#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 62))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((22 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((36 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 33)) {
        if ((WaveGetLaneIndex() == 58)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((46 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((55 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((75 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 3)) {
          counter2 = (counter2 + 1);
          if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 7))) {
            result = (result + WaveActiveMin(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((97 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((113 << 6) | (i1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 58)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((120 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 50))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((139 << 6) | (i1 << 4)) | (counter2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter2 == 2)) {
          break;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((151 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 43))) {
      for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
        if ((WaveGetLaneIndex() == 37)) {
          result = (result + WaveActiveMax(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((173 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 59))) {
        result = (result + WaveActiveMin(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (184 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (193 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter4 = 0;
    while ((counter4 < 2)) {
      counter4 = (counter4 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((209 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 44))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((230 << 6) | (counter4 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 62))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((241 << 6) | (counter4 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i5 == 1)) {
          continue;
        }
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (255 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  case 2: {
    if ((WaveGetLaneIndex() < 31)) {
      if ((WaveGetLaneIndex() >= 39)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (267 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (281 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter6 = 0;
        while ((counter6 < 2)) {
          counter6 = (counter6 + 1);
          if ((((WaveGetLaneIndex() == 24) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 56))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((303 << 6) | (counter6 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (312 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 2)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (319 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    uint counter7 = 0;
    while ((counter7 < 2)) {
      counter7 = (counter7 + 1);
      if ((WaveGetLaneIndex() == 38)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((333 << 6) | (counter7 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 42))) {
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 50))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((351 << 6) | (counter7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 60))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((362 << 6) | (counter7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  break;
  }
  case 3: {
    uint counter8 = 0;
    while ((counter8 < 2)) {
      counter8 = (counter8 + 1);
      if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 61))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((380 << 6) | (counter8 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i9 = 0; (i9 < 2); i9 = (i9 + 1)) {
        if ((WaveGetLaneIndex() == 26)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((395 << 6) | (counter8 << 4)) | (i9 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((405 << 6) | (counter8 << 4)) | (i9 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((414 << 6) | (counter8 << 4)) | (i9 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((419 << 6) | (counter8 << 4)) | (i9 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((426 << 6) | (counter8 << 4)) | (i9 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if ((WaveGetLaneIndex() == 47)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((433 << 6) | (counter8 << 4)) | (i9 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i9 == 1)) {
          continue;
        }
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (446 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (455 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 603
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1408, 16, 1073741832, 1408, 16, 1073741832, 1408, 16, 1073741832, 1424, 16, 1073741832, 1424, 16, 1073741832, 1424, 16, 1073741832, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3520, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 3536, 1431655765, 1431655765, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4800, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4816, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 4832, 286331153, 286331153, 8900, 4096, 0, 8904, 4096, 0, 8916, 4096, 0, 8920, 4096, 0, 8932, 4096, 0, 8936, 4096, 0, 11776, 8738, 536870912, 11776, 8738, 536870912, 11776, 8738, 536870912, 11776, 8738, 536870912, 11776, 8738, 536870912, 12352, 572522496, 546, 12352, 572522496, 546, 12352, 572522496, 546, 12352, 572522496, 546, 12352, 572522496, 546, 12352, 572522496, 546, 13392, 572522496, 546, 13392, 572522496, 546, 13392, 572522496, 546, 13392, 572522496, 546, 13392, 572522496, 546, 13392, 572522496, 546, 13408, 572522496, 546, 13408, 572522496, 546, 13408, 572522496, 546, 13408, 572522496, 546, 13408, 572522496, 546, 13408, 572522496, 546, 16320, 572522496, 546, 16320, 572522496, 546, 16320, 572522496, 546, 16320, 572522496, 546, 16320, 572522496, 546, 16320, 572522496, 546, 21328, 0, 64, 21344, 0, 64, 22480, 0, 1145307136, 22480, 0, 1145307136, 22480, 0, 1145307136, 22480, 0, 1145307136, 22496, 0, 1145307136, 22496, 0, 1145307136, 22496, 0, 1145307136, 22496, 0, 1145307136, 23184, 0, 1073741824, 23200, 0, 1073741824, 24336, 2184, 2147483648, 24336, 2184, 2147483648, 24336, 2184, 2147483648, 24336, 2184, 2147483648, 24352, 2184, 2147483648, 24352, 2184, 2147483648, 24352, 2184, 2147483648, 24352, 2184, 2147483648, 27280, 559240, 0, 27280, 559240, 0, 27280, 559240, 0, 27280, 559240, 0, 27280, 559240, 0, 27284, 559240, 0, 27284, 559240, 0, 27284, 559240, 0, 27284, 559240, 0, 27284, 559240, 0, 27296, 559240, 0, 27296, 559240, 0, 27296, 559240, 0, 27296, 559240, 0, 27296, 559240, 0, 27300, 559240, 0, 27300, 559240, 0, 27300, 559240, 0, 27300, 559240, 0, 27300, 559240, 0, 27728, 0, 32768, 27732, 0, 32768, 27744, 0, 32768, 27748, 0, 32768, 28544, 85, 0, 28544, 85, 0, 28544, 85, 0, 28544, 85, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
