#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() >= 48)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (23 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 61))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (19 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (33 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (42 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() < 2)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((56 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 28))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((78 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 61)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((85 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (89 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 192
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1472, 0, 4294901760, 1216, 32, 512, 1216, 32, 512, 2112, 73, 0, 2112, 73, 0, 2112, 73, 0, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 2688, 1363481681, 340870420, 3600, 3, 0, 3600, 3, 0, 3616, 3, 0, 3616, 3, 0, 5012, 268435712, 16, 5012, 268435712, 16, 5012, 268435712, 16, 5016, 268435712, 16, 5016, 268435712, 16, 5016, 268435712, 16, 5028, 268435712, 16, 5028, 268435712, 16, 5028, 268435712, 16, 5032, 268435712, 16, 5032, 268435712, 16, 5032, 268435712, 16, 5456, 0, 3758096384, 5456, 0, 3758096384, 5456, 0, 3758096384, 5472, 0, 3758096384, 5472, 0, 3758096384, 5472, 0, 3758096384]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
