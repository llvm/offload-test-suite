#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 32))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((29 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 35))) {
          if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 43))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((55 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() < 7)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((62 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 26)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((69 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i0 == 1)) {
        continue;
      }
    }
    break;
  }
  case 1: {
    if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 50))) {
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 58))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (110 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 46))) {
      if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 55))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (136 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 52))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((154 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 51))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((165 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter1 == 1)) {
          break;
        }
      }
      if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 44))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (181 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
      if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 30))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((212 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        continue;
      }
      if ((i2 == 1)) {
        break;
      }
    }
  }
  break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (225 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (229 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 135
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1856, 1048576, 4097, 1856, 1048576, 4097, 1856, 1048576, 4097, 1872, 1048576, 4097, 1872, 1048576, 4097, 1872, 1048576, 4097, 1888, 1048576, 4097, 1888, 1048576, 4097, 1888, 1048576, 4097, 3968, 17, 0, 3968, 17, 0, 3984, 17, 0, 3984, 17, 0, 4000, 17, 0, 4000, 17, 0, 4416, 17895697, 0, 4416, 17895697, 0, 4416, 17895697, 0, 4416, 17895697, 0, 4416, 17895697, 0, 4416, 17895697, 0, 4416, 17895697, 0, 4432, 17895697, 0, 4432, 17895697, 0, 4432, 17895697, 0, 4432, 17895697, 0, 4432, 17895697, 0, 4432, 17895697, 0, 4432, 17895697, 0, 4448, 17895697, 0, 4448, 17895697, 0, 4448, 17895697, 0, 4448, 17895697, 0, 4448, 17895697, 0, 4448, 17895697, 0, 4448, 17895697, 0, 13568, 1073758208, 0, 13568, 1073758208, 0, 13584, 1073758208, 0, 13584, 1073758208, 0, 14400, 559240, 0, 14400, 559240, 0, 14400, 559240, 0, 14400, 559240, 0, 14400, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
