#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 13)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((17 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((33 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((42 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 21)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((51 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (60 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() >= 43)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((78 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 63))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((96 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 44))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((109 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 48))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((132 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 57))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (143 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (148 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 19)) {
      if ((WaveGetLaneIndex() < 30)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (158 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 45))) {
        if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 63))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (176 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 0))) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (195 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (199 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (224 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 58)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (218 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 50)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (214 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 414
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4992, 0, 286330880, 4992, 0, 286330880, 4992, 0, 286330880, 4992, 0, 286330880, 4992, 0, 286330880, 5008, 0, 286330880, 5008, 0, 286330880, 5008, 0, 286330880, 5008, 0, 286330880, 5008, 0, 286330880, 5024, 0, 286330880, 5024, 0, 286330880, 5024, 0, 286330880, 5024, 0, 286330880, 5024, 0, 286330880, 6148, 1, 0, 6152, 1, 0, 6164, 1, 0, 6168, 1, 0, 6180, 1, 0, 6184, 1, 0, 6980, 4369, 286330880, 6980, 4369, 286330880, 6980, 4369, 286330880, 6980, 4369, 286330880, 6980, 4369, 286330880, 6980, 4369, 286330880, 6980, 4369, 286330880, 6980, 4369, 286330880, 6980, 4369, 286330880, 6984, 4369, 286330880, 6984, 4369, 286330880, 6984, 4369, 286330880, 6984, 4369, 286330880, 6984, 4369, 286330880, 6984, 4369, 286330880, 6984, 4369, 286330880, 6984, 4369, 286330880, 6984, 4369, 286330880, 6996, 4369, 286330880, 6996, 4369, 286330880, 6996, 4369, 286330880, 6996, 4369, 286330880, 6996, 4369, 286330880, 6996, 4369, 286330880, 6996, 4369, 286330880, 6996, 4369, 286330880, 6996, 4369, 286330880, 7000, 4369, 286330880, 7000, 4369, 286330880, 7000, 4369, 286330880, 7000, 4369, 286330880, 7000, 4369, 286330880, 7000, 4369, 286330880, 7000, 4369, 286330880, 7000, 4369, 286330880, 7000, 4369, 286330880, 7012, 4369, 286330880, 7012, 4369, 286330880, 7012, 4369, 286330880, 7012, 4369, 286330880, 7012, 4369, 286330880, 7012, 4369, 286330880, 7012, 4369, 286330880, 7012, 4369, 286330880, 7012, 4369, 286330880, 7016, 4369, 286330880, 7016, 4369, 286330880, 7016, 4369, 286330880, 7016, 4369, 286330880, 7016, 4369, 286330880, 7016, 4369, 286330880, 7016, 4369, 286330880, 7016, 4369, 286330880, 7016, 4369, 286330880, 9152, 0, 33554432, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 9472, 1145324612, 1145324612, 10112, 34952, 0, 10112, 34952, 0, 10112, 34952, 0, 10112, 34952, 0, 11264, 2184, 0, 11264, 2184, 0, 11264, 2184, 0, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 14336, 2863311530, 2863311530, 13952, 0, 67108864, 13696, 0, 1364459520, 13696, 0, 1364459520, 13696, 0, 1364459520, 13696, 0, 1364459520, 13696, 0, 1364459520, 13696, 0, 1364459520]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
