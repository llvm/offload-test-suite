#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (74 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 43)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (70 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 22))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (66 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 46))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (60 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 62))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (54 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 6))) {
        if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 55))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (111 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((130 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 49))) {
            if (((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 36))) {
              result = (result + WaveActiveMin(6));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((152 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 59))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((171 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 34))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((182 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((193 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 44))) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (210 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      if ((WaveGetLaneIndex() < 10)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((224 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 16)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((231 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 63))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (250 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (259 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (264 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (274 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (283 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 52)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((297 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 43)) {
          if ((WaveGetLaneIndex() < 6)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((309 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter2 == 2)) {
          break;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (316 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 360
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4736, 2863311530, 2863311530, 4480, 0, 1431654400, 4480, 0, 1431654400, 4480, 0, 1431654400, 4480, 0, 1431654400, 4480, 0, 1431654400, 4480, 0, 1431654400, 4480, 0, 1431654400, 4480, 0, 1431654400, 4480, 0, 1431654400, 4480, 0, 1431654400, 4224, 4194304, 0, 3840, 4, 0, 8320, 64, 65536, 8320, 64, 65536, 8336, 64, 65536, 8336, 64, 65536, 13440, 2097152, 0, 14352, 521, 0, 14352, 521, 0, 14352, 521, 0, 14368, 521, 0, 14368, 521, 0, 14368, 521, 0, 14384, 521, 0, 14384, 521, 0, 14384, 521, 0, 14800, 37385, 0, 14800, 37385, 0, 14800, 37385, 0, 14800, 37385, 0, 14800, 37385, 0, 14816, 37385, 0, 14816, 37385, 0, 14816, 37385, 0, 14816, 37385, 0, 14816, 37385, 0, 14832, 37385, 0, 14832, 37385, 0, 14832, 37385, 0, 14832, 37385, 0, 14832, 37385, 0, 16000, 0, 2147483648, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16576, 272696336, 68174084, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 16896, 613566756, 1227133513, 17536, 73, 0, 17536, 73, 0, 17536, 73, 0, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 18112, 272696336, 68174084, 19024, 0, 1048576, 19040, 0, 1048576]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
