#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (27 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 45))) {
          result = (result + WaveActiveMax(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((49 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 62)) {
          if ((WaveGetLaneIndex() >= 40)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((61 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((WaveGetLaneIndex() == 34)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((77 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter1 == 1)) {
              break;
            }
          }
          if ((WaveGetLaneIndex() >= 43)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((87 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 54))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((98 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (107 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (117 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (127 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
                if ((WaveGetLaneIndex() == 51)) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((142 << 6) | (i2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((WaveGetLaneIndex() == 8)) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((149 << 6) | (i2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (154 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (164 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (173 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 59))) {
                if (((WaveGetLaneIndex() == 31) || (WaveGetLaneIndex() == 54))) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (199 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              } else {
              if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 54))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (218 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    }
    break;
  }
  case 3: {
    uint counter3 = 0;
    while ((counter3 < 2)) {
      counter3 = (counter3 + 1);
      if ((WaveGetLaneIndex() >= 39)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((232 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 30)) {
        if ((WaveGetLaneIndex() < 23)) {
          result = (result + WaveActiveMin(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((242 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if ((WaveGetLaneIndex() == 16)) {
            result = (result + WaveActiveMax(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((257 << 6) | (counter3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 1)) {
            continue;
          }
          if ((i4 == 2)) {
            break;
          }
        }
      } else {
      if ((WaveGetLaneIndex() < 25)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((270 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
        if ((((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 34))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((301 << 6) | (counter3 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 18))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((326 << 6) | (counter3 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i5 == 1)) {
          continue;
        }
      }
    }
  }
  break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 330
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 1472, 613566756, 1227133513, 3136, 273, 286326784, 3136, 273, 286326784, 3136, 273, 286326784, 3136, 273, 286326784, 3136, 273, 286326784, 3136, 273, 286326784, 3136, 273, 286326784, 3152, 273, 286326784, 3152, 273, 286326784, 3152, 273, 286326784, 3152, 273, 286326784, 3152, 273, 286326784, 3152, 273, 286326784, 3152, 273, 286326784, 3168, 273, 286326784, 3168, 273, 286326784, 3168, 273, 286326784, 3168, 273, 286326784, 3168, 273, 286326784, 3168, 273, 286326784, 3168, 273, 286326784, 6272, 4369, 285212672, 6272, 4369, 285212672, 6272, 4369, 285212672, 6272, 4369, 285212672, 6272, 4369, 285212672, 6272, 4369, 285212672, 6288, 4369, 285212672, 6288, 4369, 285212672, 6288, 4369, 285212672, 6288, 4369, 285212672, 6288, 4369, 285212672, 6288, 4369, 285212672, 6304, 4369, 285212672, 6304, 4369, 285212672, 6304, 4369, 285212672, 6304, 4369, 285212672, 6304, 4369, 285212672, 6304, 4369, 285212672, 7488, 64, 0, 14864, 0, 2290649216, 14864, 0, 2290649216, 14864, 0, 2290649216, 14864, 0, 2290649216, 14864, 0, 2290649216, 14864, 0, 2290649216, 14864, 0, 2290649216, 14880, 0, 2290649216, 14880, 0, 2290649216, 14880, 0, 2290649216, 14880, 0, 2290649216, 14880, 0, 2290649216, 14880, 0, 2290649216, 14880, 0, 2290649216, 15504, 559240, 0, 15504, 559240, 0, 15504, 559240, 0, 15504, 559240, 0, 15504, 559240, 0, 15520, 559240, 0, 15520, 559240, 0, 15520, 559240, 0, 15520, 559240, 0, 15520, 559240, 0, 19280, 0, 32768, 19284, 0, 32768, 19288, 0, 32768, 19296, 0, 32768, 19300, 0, 32768, 19304, 0, 32768, 20880, 0, 8, 20884, 0, 8, 20888, 0, 8, 20896, 0, 8, 20900, 0, 8, 20904, 0, 8]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
