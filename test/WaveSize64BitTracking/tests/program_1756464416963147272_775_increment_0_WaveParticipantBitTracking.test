#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() < 12)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((16 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((30 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 22))) {
            if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 43))) {
              result = (result + WaveActiveMin(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((56 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (65 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((82 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 49)) {
          if ((WaveGetLaneIndex() == 57)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((92 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter2 = 0;
          while ((counter2 < 3)) {
            counter2 = (counter2 + 1);
            if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 42))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((114 << 6) | (i1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() == 25) || (WaveGetLaneIndex() == 56))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((125 << 6) | (i1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 48)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((134 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 32)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((141 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if ((WaveGetLaneIndex() == 43)) {
            result = (result + WaveActiveMin(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((155 << 6) | (i1 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((164 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 246
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1040, 585, 0, 1040, 585, 0, 1040, 585, 0, 1040, 585, 0, 1056, 585, 0, 1056, 585, 0, 1056, 585, 0, 1056, 585, 0, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1936, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 1952, 136348168, 2181570690, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 4160, 272696336, 68174084, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5248, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 5264, 545392672, 136348168, 9024, 0, 1, 9040, 0, 1, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10496, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168, 10512, 545392672, 136348168]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
