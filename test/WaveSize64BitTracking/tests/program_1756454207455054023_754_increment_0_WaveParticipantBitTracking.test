#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 40)) {
            for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
              if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 46))) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((29 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 56))) {
                result = (result + WaveActiveMax(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((40 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((i0 == 1)) {
                continue;
              }
            }
          } else {
          if ((WaveGetLaneIndex() == 32)) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (50 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 57))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((70 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 56))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((81 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 19)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (88 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (98 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 26))) {
              if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 27))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (124 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 30))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (147 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveMax(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((164 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((175 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((i2 == 2)) {
                break;
              }
            }
            break;
          }
        }
        break;
      }
    case 2: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (188 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (197 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 55))) {
              if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 60))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (215 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 60))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (226 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if ((WaveGetLaneIndex() == 35)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (233 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  }
  }
  case 1: {
    if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 51))) {
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((266 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 26)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((273 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i3 == 1)) {
          continue;
        }
      }
    } else {
    if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 62))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (299 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
      uint counter5 = 0;
      while ((counter5 < 2)) {
        counter5 = (counter5 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((323 << 6) | (i4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((332 << 6) | (i4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i4 == 1)) {
        break;
      }
    }
    if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 40))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (350 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (354 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 822
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4496, 1, 268435456, 4496, 1, 268435456, 4512, 1, 268435456, 4512, 1, 268435456, 5200, 266305, 268435456, 5200, 266305, 268435456, 5200, 266305, 268435456, 5200, 266305, 268435456, 5200, 266305, 268435456, 5216, 266305, 268435456, 5216, 266305, 268435456, 5216, 266305, 268435456, 5216, 266305, 268435456, 5216, 266305, 268435456, 13760, 16644, 1073741824, 13760, 16644, 1073741824, 13760, 16644, 1073741824, 13760, 16644, 1073741824, 14464, 16644, 1073741824, 14464, 16644, 1073741824, 14464, 16644, 1073741824, 14464, 16644, 1073741824, 19136, 67108880, 1075838980, 19136, 67108880, 1075838980, 19136, 67108880, 1075838980, 19136, 67108880, 1075838980, 19136, 67108880, 1075838980, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20676, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20680, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20692, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 20696, 2863311530, 2862787242, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21252, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21256, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21268, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 21272, 1427457365, 1431655765, 22400, 16384, 16777472, 22400, 16384, 16777472, 22400, 16384, 16777472]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
