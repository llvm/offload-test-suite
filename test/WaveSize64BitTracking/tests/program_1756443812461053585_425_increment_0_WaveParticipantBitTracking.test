#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (12 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              uint counter0 = 0;
              while ((counter0 < 2)) {
                counter0 = (counter0 + 1);
                if ((WaveGetLaneIndex() >= 37)) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((29 << 6) | (counter0 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((WaveGetLaneIndex() < 2)) {
                  result = (result + WaveActiveMin(3));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((36 << 6) | (counter0 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((counter0 == 1)) {
                  break;
                }
              }
              break;
            }
          case 1: {
              uint counter1 = 0;
              while ((counter1 < 3)) {
                counter1 = (counter1 + 1);
                if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 63))) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((57 << 6) | (counter1 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 58))) {
                  result = (result + WaveActiveMin(6));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((68 << 6) | (counter1 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((counter1 == 2)) {
                  break;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (76 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (81 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (90 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 53))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((111 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 52))) {
          if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 53))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((129 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 44))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((140 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 17))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((163 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 50))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((182 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 49))) {
        result = (result + WaveActiveMax(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((193 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    uint counter3 = 0;
    while ((counter3 < 3)) {
      counter3 = (counter3 + 1);
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if ((WaveGetLaneIndex() == 54)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((216 << 6) | (counter3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 35)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((225 << 6) | (counter3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 27)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((232 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 387
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 65, 0, 768, 65, 0, 3664, 16, 0, 3680, 16, 0, 4368, 1040, 67108864, 4368, 1040, 67108864, 4368, 1040, 67108864, 4384, 1040, 67108864, 4384, 1040, 67108864, 4384, 1040, 67108864, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 5184, 68174084, 1090785345, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7120, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 7136, 87381, 1430257664, 8272, 21, 1430257664, 8272, 21, 1430257664, 8272, 21, 1430257664, 8272, 21, 1430257664, 8272, 21, 1430257664, 8272, 21, 1430257664, 8272, 21, 1430257664, 8272, 21, 1430257664, 8288, 21, 1430257664, 8288, 21, 1430257664, 8288, 21, 1430257664, 8288, 21, 1430257664, 8288, 21, 1430257664, 8288, 21, 1430257664, 8288, 21, 1430257664, 8288, 21, 1430257664, 8976, 21, 1431306240, 8976, 21, 1431306240, 8976, 21, 1431306240, 8976, 21, 1431306240, 8976, 21, 1431306240, 8976, 21, 1431306240, 8976, 21, 1431306240, 8976, 21, 1431306240, 8976, 21, 1431306240, 8992, 21, 1431306240, 8992, 21, 1431306240, 8992, 21, 1431306240, 8992, 21, 1431306240, 8992, 21, 1431306240, 8992, 21, 1431306240, 8992, 21, 1431306240, 8992, 21, 1431306240, 8992, 21, 1431306240, 11664, 16384, 262144, 11664, 16384, 262144, 11680, 16384, 262144, 11680, 16384, 262144, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12368, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 12384, 21845, 1431568384, 14420, 0, 8, 14424, 0, 8, 14428, 0, 8, 14436, 0, 8, 14440, 0, 8, 14444, 0, 8, 14452, 0, 8, 14456, 0, 8, 14460, 0, 8, 14864, 134217728, 0, 14880, 134217728, 0, 14896, 134217728, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
