#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 17)) {
        if ((WaveGetLaneIndex() < 27)) {
          result = (result + WaveActiveMax(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 35)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (19 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (29 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (38 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (43 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          uint counter0 = 0;
          while ((counter0 < 3)) {
            counter0 = (counter0 + 1);
            if ((WaveGetLaneIndex() == 34)) {
              if ((WaveGetLaneIndex() == 20)) {
                result = (result + WaveActiveSum(10));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((60 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() == 1)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((67 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if ((WaveGetLaneIndex() == 53)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((74 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter0 == 2)) {
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (82 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (89 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (93 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (103 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (112 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (117 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((133 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 60))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((152 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((162 << 6) | (counter1 << 4)) | (i2 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((171 << 6) | (counter1 << 4)) | (i2 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 58))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((184 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (188 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (201 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter3 = 0;
          while ((counter3 < 2)) {
            counter3 = (counter3 + 1);
            if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMax(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((231 << 6) | (counter3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 21)) {
              if ((WaveGetLaneIndex() == 33)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((241 << 6) | (counter3 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 3))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((260 << 6) | (counter3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 49))) {
                if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 16))) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (293 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 60))) {
                  result = (result + WaveActiveSum(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (316 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              if ((WaveGetLaneIndex() < 17)) {
                if ((WaveGetLaneIndex() < 8)) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (326 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (331 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 56))) {
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 49))) {
              result = (result + WaveActiveMax(7));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (352 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 49))) {
              if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 58))) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (376 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 47))) {
                result = (result + WaveActiveMin(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (387 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 46))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (400 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() >= 62)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (407 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (416 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if ((WaveGetLaneIndex() == 2)) {
          if ((WaveGetLaneIndex() == 31)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (426 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 62))) {
            if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 44))) {
              result = (result + WaveActiveSum(6));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (444 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 63))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (455 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (460 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    uint counter4 = 0;
    while ((counter4 < 3)) {
      counter4 = (counter4 + 1);
      if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 42))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((478 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 6)) {
        if ((WaveGetLaneIndex() == 39)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((488 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
          if ((WaveGetLaneIndex() < 15)) {
            result = (result + WaveActiveMin(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((503 << 6) | (counter4 << 4)) | (i5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 38)) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((510 << 6) | (counter4 << 4)) | (i5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i5 == 1)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() == 52)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((520 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 57))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((531 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (535 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 459
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 69905, 0, 768, 69905, 0, 768, 69905, 0, 768, 69905, 0, 768, 69905, 0, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5248, 1145324612, 1145324612, 5696, 559240, 0, 5696, 559240, 0, 5696, 559240, 0, 5696, 559240, 0, 5696, 559240, 0, 6592, 17, 0, 6592, 17, 0, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 9744, 8, 2147483648, 9744, 8, 2147483648, 9748, 8, 2147483648, 9748, 8, 2147483648, 9752, 8, 2147483648, 9752, 8, 2147483648, 9760, 8, 2147483648, 9760, 8, 2147483648, 9764, 8, 2147483648, 9764, 8, 2147483648, 9768, 8, 2147483648, 9768, 8, 2147483648, 9776, 8, 2147483648, 9776, 8, 2147483648, 9780, 8, 2147483648, 9780, 8, 2147483648, 9784, 8, 2147483648, 9784, 8, 2147483648, 11792, 8, 2281701376, 11792, 8, 2281701376, 11792, 8, 2281701376, 11796, 8, 2281701376, 11796, 8, 2281701376, 11796, 8, 2281701376, 11800, 8, 2281701376, 11800, 8, 2281701376, 11800, 8, 2281701376, 11808, 8, 2281701376, 11808, 8, 2281701376, 11808, 8, 2281701376, 11812, 8, 2281701376, 11812, 8, 2281701376, 11812, 8, 2281701376, 11816, 8, 2281701376, 11816, 8, 2281701376, 11816, 8, 2281701376, 11824, 8, 2281701376, 11824, 8, 2281701376, 11824, 8, 2281701376, 11828, 8, 2281701376, 11828, 8, 2281701376, 11828, 8, 2281701376, 11832, 8, 2281701376, 11832, 8, 2281701376, 11832, 8, 2281701376, 12864, 1, 0, 21184, 1048832, 16781313, 21184, 1048832, 16781313, 21184, 1048832, 16781313, 21184, 1048832, 16781313, 21184, 1048832, 16781313, 22528, 0, 33554432, 25600, 512, 33554432, 25600, 512, 33554432, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 29440, 1145324612, 1145324612, 30608, 2184, 2290649088, 30608, 2184, 2290649088, 30608, 2184, 2290649088, 30608, 2184, 2290649088, 30608, 2184, 2290649088, 30608, 2184, 2290649088, 30608, 2184, 2290649088, 30608, 2184, 2290649088, 30608, 2184, 2290649088, 30624, 2184, 2290649088, 30624, 2184, 2290649088, 30624, 2184, 2290649088, 30624, 2184, 2290649088, 30624, 2184, 2290649088, 30624, 2184, 2290649088, 30624, 2184, 2290649088, 30624, 2184, 2290649088, 30624, 2184, 2290649088, 30640, 2184, 2290649088, 30640, 2184, 2290649088, 30640, 2184, 2290649088, 30640, 2184, 2290649088, 30640, 2184, 2290649088, 30640, 2184, 2290649088, 30640, 2184, 2290649088, 30640, 2184, 2290649088, 30640, 2184, 2290649088, 34000, 136, 2281701376, 34000, 136, 2281701376, 34000, 136, 2281701376, 34000, 136, 2281701376, 34016, 136, 2281701376, 34016, 136, 2281701376, 34016, 136, 2281701376, 34016, 136, 2281701376, 34032, 136, 2281701376, 34032, 136, 2281701376, 34032, 136, 2281701376, 34032, 136, 2281701376]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
