#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 58))) {
      if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 57))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((25 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((WaveGetLaneIndex() == 62)) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((42 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if ((WaveGetLaneIndex() >= 33)) {
            if ((WaveGetLaneIndex() < 14)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((54 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() >= 54)) {
            result = (result + WaveActiveMax(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((61 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 26)) {
            result = (result + WaveActiveMin(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((68 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((73 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
  } else {
  if ((WaveGetLaneIndex() < 32)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((82 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((96 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 57))) {
      if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 32))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((116 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((125 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((WaveGetLaneIndex() >= 45)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((134 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if ((i0 == 1)) {
    continue;
  }
  if ((i0 == 1)) {
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 324
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1600, 3, 4227858432, 1600, 3, 4227858432, 1600, 3, 4227858432, 1600, 3, 4227858432, 1600, 3, 4227858432, 1600, 3, 4227858432, 1600, 3, 4227858432, 1600, 3, 4227858432, 1616, 3, 4227858432, 1616, 3, 4227858432, 1616, 3, 4227858432, 1616, 3, 4227858432, 1616, 3, 4227858432, 1616, 3, 4227858432, 1616, 3, 4227858432, 1616, 3, 4227858432, 4352, 2, 0, 4368, 2, 0, 4672, 0, 1207959552, 4672, 0, 1207959552, 4688, 0, 1207959552, 4688, 0, 1207959552, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5248, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 5264, 4294967292, 0, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8576, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672, 8592, 0, 67100672]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
