#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 56))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (42 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 1))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (38 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (32 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (52 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (62 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 56))) {
                if (((WaveGetLaneIndex() == 28) || (WaveGetLaneIndex() == 53))) {
                  result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (93 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 55))) {
                  result = (result + WaveActiveMin(2));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (108 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              } else {
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (117 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            uint counter0 = 0;
            while ((counter0 < 2)) {
              counter0 = (counter0 + 1);
              if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 55))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((147 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 27))) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((164 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (169 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        break;
      }
    case 2: {
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() == 29) || (WaveGetLaneIndex() == 58))) {
            if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 61))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((203 << 6) | (i1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 30)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((210 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((219 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (224 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() == 44)) {
      if ((WaveGetLaneIndex() == 22)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (234 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (244 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (253 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (263 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (272 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (276 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 342
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2688, 65535, 4278190080, 2432, 2147483648, 1048576, 2432, 2147483648, 1048576, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 2048, 715784192, 11184810, 3328, 17, 0, 3328, 17, 0, 14016, 537002016, 2097664, 14016, 537002016, 2097664, 14016, 537002016, 2097664, 14016, 537002016, 2097664, 14016, 537002016, 2097664, 14032, 537002016, 2097664, 14032, 537002016, 2097664, 14032, 537002016, 2097664, 14032, 537002016, 2097664, 14032, 537002016, 2097664, 14048, 537002016, 2097664, 14048, 537002016, 2097664, 14048, 537002016, 2097664, 14048, 537002016, 2097664, 14048, 537002016, 2097664, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 14336, 1145324612, 1145324612, 16832, 85, 0, 16832, 85, 0, 16832, 85, 0, 16832, 85, 0, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765, 17408, 1431655765, 1431655765]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
