#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 59))) {
        if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 61))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (20 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 43))) {
          if ((WaveGetLaneIndex() == 62)) {
            if ((WaveGetLaneIndex() == 13)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (39 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 50))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (50 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (64 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 2)) {
          counter0 = (counter0 + 1);
          if ((WaveGetLaneIndex() >= 47)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((78 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 3)) {
            counter1 = (counter1 + 1);
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((92 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() >= 63)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((101 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
      } else {
      if ((WaveGetLaneIndex() == 45)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (110 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 46))) {
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 56))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((148 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 50)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((155 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (160 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 52))) {
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 62))) {
          result = (result + WaveActiveMin(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((193 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 42))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((212 << 6) | (counter3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 1)) {
            continue;
          }
          if ((i4 == 2)) {
            break;
          }
        }
        if ((counter3 == 2)) {
          break;
        }
      }
      if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 61))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (232 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (236 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 195
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1280, 1, 0, 3200, 1, 268435456, 3200, 1, 268435456, 5008, 0, 572653568, 5008, 0, 572653568, 5008, 0, 572653568, 5008, 0, 572653568, 5024, 0, 572653568, 5024, 0, 572653568, 5024, 0, 572653568, 5024, 0, 572653568, 5908, 34, 0, 5908, 34, 0, 5912, 34, 0, 5912, 34, 0, 5916, 34, 0, 5916, 34, 0, 5924, 34, 0, 5924, 34, 0, 5928, 34, 0, 5928, 34, 0, 5932, 34, 0, 5932, 34, 0, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 10240, 1145324612, 1145324612, 13584, 8, 2290089984, 13584, 8, 2290089984, 13584, 8, 2290089984, 13584, 8, 2290089984, 13588, 8, 2290089984, 13588, 8, 2290089984, 13588, 8, 2290089984, 13588, 8, 2290089984, 13592, 8, 2290089984, 13592, 8, 2290089984, 13592, 8, 2290089984, 13592, 8, 2290089984, 13600, 8, 2290089984, 13600, 8, 2290089984, 13600, 8, 2290089984, 13600, 8, 2290089984, 13604, 8, 2290089984, 13604, 8, 2290089984, 13604, 8, 2290089984, 13604, 8, 2290089984, 13608, 8, 2290089984, 13608, 8, 2290089984, 13608, 8, 2290089984, 13608, 8, 2290089984, 14848, 8, 2147483648, 14848, 8, 2147483648]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
