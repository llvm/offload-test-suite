#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 55))) {
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 51))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (30 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            uint counter0 = 0;
            while ((counter0 < 2)) {
              counter0 = (counter0 + 1);
              if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 37))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((48 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 47))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (59 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 54))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (70 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 28))) {
            if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 33))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (96 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 58))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (107 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (116 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((137 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((148 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((169 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((178 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 52))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((197 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 5))) {
          if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 25))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((233 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 40))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((252 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() < 28)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((259 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 47)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((266 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (276 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (286 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (295 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if (((WaveGetLaneIndex() & 1) == 1)) {
                if (((WaveGetLaneIndex() & 1) == 0)) {
                  result = (result + WaveActiveMax(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (312 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (321 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if ((WaveGetLaneIndex() < 15)) {
                if ((WaveGetLaneIndex() >= 59)) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (331 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              } else {
              if (((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 54))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (350 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 465
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1920, 8, 2181038080, 1920, 8, 2181038080, 1920, 8, 2181038080, 3776, 8, 2181038080, 3776, 8, 2181038080, 3776, 8, 2181038080, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10832, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10848, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 10864, 1431655765, 1431655765, 12608, 32768, 0, 12624, 32768, 0, 16128, 8192, 0, 16144, 8192, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16576, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 16592, 178948746, 0, 17024, 0, 715816960, 17024, 0, 715816960, 17024, 0, 715816960, 17024, 0, 715816960, 17024, 0, 715816960, 17024, 0, 715816960, 17024, 0, 715816960, 17024, 0, 715816960, 17040, 0, 715816960, 17040, 0, 715816960, 17040, 0, 715816960, 17040, 0, 715816960, 17040, 0, 715816960, 17040, 0, 715816960, 17040, 0, 715816960, 17040, 0, 715816960, 17664, 85, 0, 17664, 85, 0, 17664, 85, 0, 17664, 85, 0, 18304, 8, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
