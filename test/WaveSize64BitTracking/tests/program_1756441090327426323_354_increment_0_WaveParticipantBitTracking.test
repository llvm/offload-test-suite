#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((28 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 52))) {
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((49 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((58 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((62 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
        }
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 56))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((73 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  uint counter1 = 0;
  while ((counter1 < 2)) {
    counter1 = (counter1 + 1);
    if ((((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 28))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((95 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 63))) {
      if ((((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 57))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((137 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 62))) {
        if (((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 55))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((173 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 5))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((196 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 30))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((219 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 246
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1792, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1808, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 1824, 2, 2863310848, 4672, 170, 2852126720, 4672, 170, 2852126720, 4672, 170, 2852126720, 4672, 170, 2852126720, 4672, 170, 2852126720, 4672, 170, 2852126720, 4672, 170, 2852126720, 4672, 170, 2852126720, 4688, 170, 2852126720, 4688, 170, 2852126720, 4688, 170, 2852126720, 4688, 170, 2852126720, 4688, 170, 2852126720, 4688, 170, 2852126720, 4688, 170, 2852126720, 4688, 170, 2852126720, 4704, 170, 2852126720, 4704, 170, 2852126720, 4704, 170, 2852126720, 4704, 170, 2852126720, 4704, 170, 2852126720, 4704, 170, 2852126720, 4704, 170, 2852126720, 4704, 170, 2852126720, 6096, 402653184, 2147483648, 6096, 402653184, 2147483648, 6096, 402653184, 2147483648, 6112, 402653184, 2147483648, 6112, 402653184, 2147483648, 6112, 402653184, 2147483648, 12560, 0, 2147483648, 12576, 0, 2147483648, 14032, 1082130496, 536870944, 14032, 1082130496, 536870944, 14032, 1082130496, 536870944, 14032, 1082130496, 536870944, 14032, 1082130496, 536870944, 14048, 1082130496, 536870944, 14048, 1082130496, 536870944, 14048, 1082130496, 536870944, 14048, 1082130496, 536870944, 14048, 1082130496, 536870944]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
