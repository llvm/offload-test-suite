#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if ((WaveGetLaneIndex() >= 45)) {
        if ((WaveGetLaneIndex() < 29)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (19 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() >= 46)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((34 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 47)) {
            if ((WaveGetLaneIndex() == 53)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((46 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 52))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((57 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((WaveGetLaneIndex() < 32)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (66 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (75 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 20))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((102 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 27))) {
        result = (result + WaveActiveMax(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((125 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (130 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (146 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (156 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (165 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (179 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (188 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 3: {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (195 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (199 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (208 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if ((((WaveGetLaneIndex() == 22) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((239 << 6) | (i2 << 4)) | (i3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 51))) {
        if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 18))) {
          result = (result + WaveActiveMin(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((273 << 6) | (i2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 9))) {
          result = (result + WaveActiveMax(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((292 << 6) | (i2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i3 == 1)) {
        break;
      }
    }
    if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 9))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((314 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 777
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2176, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2192, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 2208, 0, 3067822080, 3648, 0, 3067084800, 3648, 0, 3067084800, 3648, 0, 3067084800, 3648, 0, 3067084800, 3648, 0, 3067084800, 3648, 0, 3067084800, 3648, 0, 3067084800, 3648, 0, 3067084800, 3664, 0, 3067084800, 3664, 0, 3067084800, 3664, 0, 3067084800, 3664, 0, 3067084800, 3664, 0, 3067084800, 3664, 0, 3067084800, 3664, 0, 3067084800, 3664, 0, 3067084800, 3680, 0, 3067084800, 3680, 0, 3067084800, 3680, 0, 3067084800, 3680, 0, 3067084800, 3680, 0, 3067084800, 3680, 0, 3067084800, 3680, 0, 3067084800, 3680, 0, 3067084800, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 4800, 1363481681, 1300, 6528, 2147483649, 0, 6528, 2147483649, 0, 6544, 2147483649, 0, 6544, 2147483649, 0, 6560, 2147483649, 0, 6560, 2147483649, 0, 8000, 167772160, 32, 8000, 167772160, 32, 8000, 167772160, 32, 8016, 167772160, 32, 8016, 167772160, 32, 8016, 167772160, 32, 8032, 167772160, 32, 8032, 167772160, 32, 8032, 167772160, 32, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 8320, 4294967295, 4294967295, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9344, 1431655765, 1431655765, 9984, 17, 0, 9984, 17, 0, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 11456, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 12032, 1145324612, 1145324612, 15296, 4210688, 2097152, 15296, 4210688, 2097152, 15296, 4210688, 2097152, 15300, 4210688, 2097152, 15300, 4210688, 2097152, 15300, 4210688, 2097152, 15312, 4210688, 2097152, 15312, 4210688, 2097152, 15312, 4210688, 2097152, 15316, 4210688, 2097152, 15316, 4210688, 2097152, 15316, 4210688, 2097152, 15328, 4210688, 2097152, 15328, 4210688, 2097152, 15328, 4210688, 2097152, 15332, 4210688, 2097152, 15332, 4210688, 2097152, 15332, 4210688, 2097152, 18688, 0, 67108864, 18692, 0, 67108864, 18704, 0, 67108864, 18708, 0, 67108864, 18720, 0, 67108864, 18724, 0, 67108864, 20096, 16777729, 65536, 20096, 16777729, 65536, 20096, 16777729, 65536, 20096, 16777729, 65536, 20112, 16777729, 65536, 20112, 16777729, 65536, 20112, 16777729, 65536, 20112, 16777729, 65536, 20128, 16777729, 65536, 20128, 16777729, 65536, 20128, 16777729, 65536, 20128, 16777729, 65536]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
