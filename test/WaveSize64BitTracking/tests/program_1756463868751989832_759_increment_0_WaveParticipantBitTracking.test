#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() == 9)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((16 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((34 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter1 == 2)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() == 23)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((46 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 61))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((64 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 6))) {
          if (((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 17))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((102 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((121 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 63))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((132 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter2 == 1)) {
          break;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (139 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 17))) {
          result = (result + WaveActiveMin(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((173 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 14)) {
          if ((WaveGetLaneIndex() == 23)) {
            result = (result + WaveActiveMin(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((183 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((190 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 30)) {
          result = (result + WaveActiveMin(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((197 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (206 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (211 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
      if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 42))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((230 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter5 = 0;
      while ((counter5 < 2)) {
        counter5 = (counter5 + 1);
        if ((WaveGetLaneIndex() < 19)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((244 << 6) | (i4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 51)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((251 << 6) | (i4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i4 == 1)) {
        continue;
      }
      if ((i4 == 2)) {
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 330
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4112, 682, 2684354560, 4112, 682, 2684354560, 4112, 682, 2684354560, 4112, 682, 2684354560, 4112, 682, 2684354560, 4112, 682, 2684354560, 4112, 682, 2684354560, 8464, 43690, 2147483648, 8464, 43690, 2147483648, 8464, 43690, 2147483648, 8464, 43690, 2147483648, 8464, 43690, 2147483648, 8464, 43690, 2147483648, 8464, 43690, 2147483648, 8464, 43690, 2147483648, 8464, 43690, 2147483648, 11072, 0, 65536, 11088, 0, 65536, 11104, 0, 65536, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 13504, 1145324612, 1145324612, 14720, 2184, 2290649088, 14720, 2184, 2290649088, 14720, 2184, 2290649088, 14720, 2184, 2290649088, 14720, 2184, 2290649088, 14720, 2184, 2290649088, 14720, 2184, 2290649088, 14720, 2184, 2290649088, 14720, 2184, 2290649088, 14736, 2184, 2290649088, 14736, 2184, 2290649088, 14736, 2184, 2290649088, 14736, 2184, 2290649088, 14736, 2184, 2290649088, 14736, 2184, 2290649088, 14736, 2184, 2290649088, 14736, 2184, 2290649088, 14736, 2184, 2290649088, 14752, 2184, 2290649088, 14752, 2184, 2290649088, 14752, 2184, 2290649088, 14752, 2184, 2290649088, 14752, 2184, 2290649088, 14752, 2184, 2290649088, 14752, 2184, 2290649088, 14752, 2184, 2290649088, 14752, 2184, 2290649088, 15620, 34952, 0, 15620, 34952, 0, 15620, 34952, 0, 15620, 34952, 0, 15624, 34952, 0, 15624, 34952, 0, 15624, 34952, 0, 15624, 34952, 0, 15636, 34952, 0, 15636, 34952, 0, 15636, 34952, 0, 15636, 34952, 0, 15640, 34952, 0, 15640, 34952, 0, 15640, 34952, 0, 15640, 34952, 0, 15652, 34952, 0, 15652, 34952, 0, 15652, 34952, 0, 15652, 34952, 0, 15656, 34952, 0, 15656, 34952, 0, 15656, 34952, 0, 15656, 34952, 0, 16068, 0, 2290614272, 16068, 0, 2290614272, 16068, 0, 2290614272, 16068, 0, 2290614272, 16072, 0, 2290614272, 16072, 0, 2290614272, 16072, 0, 2290614272, 16072, 0, 2290614272, 16084, 0, 2290614272, 16084, 0, 2290614272, 16084, 0, 2290614272, 16084, 0, 2290614272, 16088, 0, 2290614272, 16088, 0, 2290614272, 16088, 0, 2290614272, 16088, 0, 2290614272, 16100, 0, 2290614272, 16100, 0, 2290614272, 16100, 0, 2290614272, 16100, 0, 2290614272, 16104, 0, 2290614272, 16104, 0, 2290614272, 16104, 0, 2290614272, 16104, 0, 2290614272]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
