#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 48))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (29 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 44)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (23 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (39 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((63 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 53))) {
            if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 51))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((83 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 53))) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((94 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((103 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 55))) {
        if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (141 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (151 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
              if ((WaveGetLaneIndex() == 43)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((168 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() == 16)) {
                result = (result + WaveActiveMin(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((175 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 53))) {
              if (((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 45))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (201 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 49))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (212 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 57))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (227 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() >= 34)) {
            if ((WaveGetLaneIndex() >= 40)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (237 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (241 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 25))) {
        result = (result + WaveActiveSum(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (264 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (268 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 43)) {
        if ((WaveGetLaneIndex() >= 38)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (281 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 52))) {
          if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 44))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (299 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 48))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (310 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 43)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (317 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (326 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 732
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1856, 2147483656, 65540, 1856, 2147483656, 65540, 1856, 2147483656, 65540, 1856, 2147483656, 65540, 1472, 0, 4096, 2496, 73, 0, 2496, 73, 0, 2496, 73, 0, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4048, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4052, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4064, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4068, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4080, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 4084, 2181570690, 545392672, 5328, 146, 612368384, 5328, 146, 612368384, 5328, 146, 612368384, 5328, 146, 612368384, 5328, 146, 612368384, 5328, 146, 612368384, 5332, 146, 612368384, 5332, 146, 612368384, 5332, 146, 612368384, 5332, 146, 612368384, 5332, 146, 612368384, 5332, 146, 612368384, 5344, 146, 612368384, 5344, 146, 612368384, 5344, 146, 612368384, 5344, 146, 612368384, 5344, 146, 612368384, 5344, 146, 612368384, 5348, 146, 612368384, 5348, 146, 612368384, 5348, 146, 612368384, 5348, 146, 612368384, 5348, 146, 612368384, 5348, 146, 612368384, 5360, 146, 612368384, 5360, 146, 612368384, 5360, 146, 612368384, 5360, 146, 612368384, 5360, 146, 612368384, 5360, 146, 612368384, 5364, 146, 612368384, 5364, 146, 612368384, 5364, 146, 612368384, 5364, 146, 612368384, 5364, 146, 612368384, 5364, 146, 612368384, 6032, 146, 612368384, 6032, 146, 612368384, 6032, 146, 612368384, 6032, 146, 612368384, 6032, 146, 612368384, 6032, 146, 612368384, 6036, 146, 612368384, 6036, 146, 612368384, 6036, 146, 612368384, 6036, 146, 612368384, 6036, 146, 612368384, 6036, 146, 612368384, 6048, 146, 612368384, 6048, 146, 612368384, 6048, 146, 612368384, 6048, 146, 612368384, 6048, 146, 612368384, 6048, 146, 612368384, 6052, 146, 612368384, 6052, 146, 612368384, 6052, 146, 612368384, 6052, 146, 612368384, 6052, 146, 612368384, 6052, 146, 612368384, 6064, 146, 612368384, 6064, 146, 612368384, 6064, 146, 612368384, 6064, 146, 612368384, 6064, 146, 612368384, 6064, 146, 612368384, 6068, 146, 612368384, 6068, 146, 612368384, 6068, 146, 612368384, 6068, 146, 612368384, 6068, 146, 612368384, 6068, 146, 612368384, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6608, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6612, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6624, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6628, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6640, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 6644, 2181570690, 545392672, 17984, 0, 1431654400, 17984, 0, 1431654400, 17984, 0, 1431654400, 17984, 0, 1431654400, 17984, 0, 1431654400, 17984, 0, 1431654400, 17984, 0, 1431654400, 17984, 0, 1431654400, 17984, 0, 1431654400, 17984, 0, 1431654400, 19136, 0, 1431306240, 19136, 0, 1431306240, 19136, 0, 1431306240, 19136, 0, 1431306240, 19136, 0, 1431306240, 19136, 0, 1431306240, 19840, 0, 1431306240, 19840, 0, 1431306240, 19840, 0, 1431306240, 19840, 0, 1431306240, 19840, 0, 1431306240, 19840, 0, 1431306240, 20288, 0, 1431654400, 20288, 0, 1431654400, 20288, 0, 1431654400, 20288, 0, 1431654400, 20288, 0, 1431654400, 20288, 0, 1431654400, 20288, 0, 1431654400, 20288, 0, 1431654400, 20288, 0, 1431654400, 20288, 0, 1431654400]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
