#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 2)) {
    counter0 = (counter0 + 1);
    if ((WaveGetLaneIndex() == 50)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((13 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if ((WaveGetLaneIndex() == 53)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((27 << 6) | (counter0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 48))) {
        if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((45 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((55 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((64 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((69 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((76 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((87 << 6) | (counter0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 40)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((((101 << 6) | (counter0 << 4)) | (counter1 << 2)) | counter2);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if ((WaveGetLaneIndex() == 53)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (((108 << 6) | (counter0 << 4)) | (counter1 << 2));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter1 == 1)) {
      break;
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 414
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [848, 0, 262144, 864, 0, 262144, 1748, 0, 2097152, 1764, 0, 2097152, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2900, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 2916, 2047, 4294901760, 3540, 17, 0, 3540, 17, 0, 3556, 17, 0, 3556, 17, 0, 4116, 4369, 286326784, 4116, 4369, 286326784, 4116, 4369, 286326784, 4116, 4369, 286326784, 4116, 4369, 286326784, 4116, 4369, 286326784, 4116, 4369, 286326784, 4116, 4369, 286326784, 4132, 4369, 286326784, 4132, 4369, 286326784, 4132, 4369, 286326784, 4132, 4369, 286326784, 4132, 4369, 286326784, 4132, 4369, 286326784, 4132, 4369, 286326784, 4132, 4369, 286326784, 4436, 1092, 1145307136, 4436, 1092, 1145307136, 4436, 1092, 1145307136, 4436, 1092, 1145307136, 4436, 1092, 1145307136, 4436, 1092, 1145307136, 4436, 1092, 1145307136, 4452, 1092, 1145307136, 4452, 1092, 1145307136, 4452, 1092, 1145307136, 4452, 1092, 1145307136, 4452, 1092, 1145307136, 4452, 1092, 1145307136, 4452, 1092, 1145307136, 4884, 2184, 0, 4884, 2184, 0, 4884, 2184, 0, 4900, 2184, 0, 4900, 2184, 0, 4900, 2184, 0, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5588, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 5604, 2863300608, 43690, 6485, 0, 256, 6486, 0, 256, 6501, 0, 256, 6502, 0, 256, 6932, 0, 2097152, 6948, 0, 2097152]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
