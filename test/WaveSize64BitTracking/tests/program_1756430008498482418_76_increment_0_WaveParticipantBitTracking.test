#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 2)) {
    counter0 = (counter0 + 1);
    if ((WaveGetLaneIndex() == 45)) {
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 32))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((32 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 26))) {
          if ((((WaveGetLaneIndex() == 24) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 17))) {
            result = (result + WaveActiveMin(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((62 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 50))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((85 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() >= 54)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((92 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 57))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((107 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 52)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((114 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() == 17)) {
    result = (result + WaveActiveMax(8));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((121 << 6) | (counter0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (((138 << 6) | (counter0 << 4)) | (i2 << 2));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((152 << 6) | (counter0 << 4)) | (i2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((161 << 6) | (counter0 << 4)) | (i2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(8));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (((170 << 6) | (counter0 << 4)) | (i2 << 2));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i2 == 1)) {
      break;
    }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if ((WaveGetLaneIndex() < 16)) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((190 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((206 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((215 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (225 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 44))) {
            if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 53))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (247 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (252 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (257 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (264 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (268 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 876
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [7760, 131072, 0, 7776, 131072, 0, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8848, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8852, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8864, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 8868, 2863311530, 2863303338, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10896, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10900, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10912, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 10916, 1431655765, 1431655765, 12176, 4369, 0, 12176, 4369, 0, 12176, 4369, 0, 12176, 4369, 0, 12192, 4369, 0, 12192, 4369, 0, 12192, 4369, 0, 12192, 4369, 0, 12208, 4369, 0, 12208, 4369, 0, 12208, 4369, 0, 12208, 4369, 0, 16128, 537002016, 2097664, 16128, 537002016, 2097664, 16128, 537002016, 2097664, 16128, 537002016, 2097664, 16128, 537002016, 2097664, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16448, 1145324612, 1145324612, 16896, 559240, 0, 16896, 559240, 0, 16896, 559240, 0, 16896, 559240, 0, 16896, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
