#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (22 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (58 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 35)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (54 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 37)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (50 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (44 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  if ((WaveGetLaneIndex() >= 52)) {
    if ((WaveGetLaneIndex() < 14)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (68 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (82 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveMin(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((112 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 50))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((135 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (146 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() >= 42)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (155 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 348
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 1152, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3712, 1431655765, 1431655765, 3456, 0, 8, 3200, 0, 32, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 2816, 2863311530, 2863311490, 7184, 0, 268435456, 7200, 0, 268435456, 8656, 0, 1073741824, 8672, 0, 1073741824, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720, 9920, 0, 4293918720]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
