#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 57))) {
    if (((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 7))) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (33 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (43 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (52 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (57 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 3: {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (64 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
  } else {
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() >= 50)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((79 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 20)) {
      if ((WaveGetLaneIndex() < 9)) {
        result = (result + WaveActiveMax(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((89 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 16))) {
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 33))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((123 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 24)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((130 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((WaveGetLaneIndex() >= 57)) {
      result = (result + WaveActiveMin(6));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((137 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 57))) {
        result = (result + WaveActiveMax(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((156 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i1 == 1)) {
        continue;
      }
    }
  }
  if ((WaveGetLaneIndex() < 21)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((166 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (176 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() == 43)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((191 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (195 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 729
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3648, 262144, 262144, 3648, 262144, 262144, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5056, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5072, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5088, 0, 4260888576, 5696, 511, 0, 5696, 511, 0, 5696, 511, 0, 5696, 511, 0, 5696, 511, 0, 5696, 511, 0, 5696, 511, 0, 5696, 511, 0, 5696, 511, 0, 5712, 511, 0, 5712, 511, 0, 5712, 511, 0, 5712, 511, 0, 5712, 511, 0, 5712, 511, 0, 5712, 511, 0, 5712, 511, 0, 5712, 511, 0, 5728, 511, 0, 5728, 511, 0, 5728, 511, 0, 5728, 511, 0, 5728, 511, 0, 5728, 511, 0, 5728, 511, 0, 5728, 511, 0, 5728, 511, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8320, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8336, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8352, 786431, 0, 8768, 0, 4227858432, 8768, 0, 4227858432, 8768, 0, 4227858432, 8768, 0, 4227858432, 8768, 0, 4227858432, 8768, 0, 4227858432, 8784, 0, 4227858432, 8784, 0, 4227858432, 8784, 0, 4227858432, 8784, 0, 4227858432, 8784, 0, 4227858432, 8784, 0, 4227858432, 8800, 0, 4227858432, 8800, 0, 4227858432, 8800, 0, 4227858432, 8800, 0, 4227858432, 8800, 0, 4227858432, 8800, 0, 4227858432, 9984, 0, 4227858432, 9984, 0, 4227858432, 9984, 0, 4227858432, 9984, 0, 4227858432, 9984, 0, 4227858432, 9984, 0, 4227858432, 9988, 0, 4227858432, 9988, 0, 4227858432, 9988, 0, 4227858432, 9988, 0, 4227858432, 9988, 0, 4227858432, 9988, 0, 4227858432, 10000, 0, 4227858432, 10000, 0, 4227858432, 10000, 0, 4227858432, 10000, 0, 4227858432, 10000, 0, 4227858432, 10000, 0, 4227858432, 10004, 0, 4227858432, 10004, 0, 4227858432, 10004, 0, 4227858432, 10004, 0, 4227858432, 10004, 0, 4227858432, 10004, 0, 4227858432, 10016, 0, 4227858432, 10016, 0, 4227858432, 10016, 0, 4227858432, 10016, 0, 4227858432, 10016, 0, 4227858432, 10016, 0, 4227858432, 10020, 0, 4227858432, 10020, 0, 4227858432, 10020, 0, 4227858432, 10020, 0, 4227858432, 10020, 0, 4227858432, 10020, 0, 4227858432, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10624, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10640, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 10656, 1835007, 0, 11264, 85, 0, 11264, 85, 0, 11264, 85, 0, 11264, 85, 0, 12224, 0, 2048, 12240, 0, 2048, 12256, 0, 2048]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
