#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 12))) {
    if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 16))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (37 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (47 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (56 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (61 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (65 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if ((((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 23))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (88 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() < 19)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (95 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    if ((WaveGetLaneIndex() == 50)) {
      if ((WaveGetLaneIndex() == 38)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((112 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 35))) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((139 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 45))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((158 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 35))) {
      result = (result + WaveActiveSum(10));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((177 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter0 == 2)) {
      break;
    }
  }
  if ((WaveGetLaneIndex() >= 54)) {
    result = (result + WaveActiveMin(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (187 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 29)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((204 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 3)) {
          counter3 = (counter3 + 1);
          if (((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 12))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((230 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 39)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((237 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter2 == 1)) {
          break;
        }
      }
    }
  case 1: {
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 42))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((266 << 6) | (counter4 << 4)) | (i5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 5)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((275 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 52))) {
    if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 62))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (293 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 16))) {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (322 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (331 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (336 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 39))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (355 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 55))) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (368 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (377 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 51))) {
    if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 9))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (407 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i6 = 0; (i6 < 3); i6 = (i6 + 1)) {
      if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 11))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((438 << 6) | (i6 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 37))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (461 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1371
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3584, 0, 4, 3904, 32, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 6080, 258015, 0, 11344, 268435712, 2056, 11344, 268435712, 2056, 11344, 268435712, 2056, 11344, 268435712, 2056, 11360, 268435712, 2056, 11360, 268435712, 2056, 11360, 268435712, 2056, 11360, 268435712, 2056, 11968, 0, 4257218560, 11968, 0, 4257218560, 11968, 0, 4257218560, 11968, 0, 4257218560, 11968, 0, 4257218560, 11968, 0, 4257218560, 11968, 0, 4257218560, 11968, 0, 4257218560, 11968, 0, 4257218560, 14740, 4096, 1073741824, 14740, 4096, 1073741824, 14744, 4096, 1073741824, 14744, 4096, 1073741824, 14748, 4096, 1073741824, 14748, 4096, 1073741824, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17040, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17044, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17048, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17056, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17060, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17064, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17072, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17076, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17080, 524287, 4294966272, 17616, 32, 0, 17632, 32, 0, 17648, 32, 0, 18752, 7, 3221225472, 18752, 7, 3221225472, 18752, 7, 3221225472, 18752, 7, 3221225472, 18752, 7, 3221225472, 21184, 0, 1048576, 21504, 4, 0, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 3, 4286578688, 23552, 4, 0, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 24128, 1431655760, 349525, 29504, 0, 64]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
