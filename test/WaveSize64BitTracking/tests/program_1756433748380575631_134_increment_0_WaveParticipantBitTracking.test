#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() >= 34)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((25 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 56)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((32 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
        }
        if ((((WaveGetLaneIndex() == 28) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 13))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((50 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 57))) {
        if ((((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 9))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (84 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if ((WaveGetLaneIndex() == 59)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((100 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 57))) {
          result = (result + WaveActiveSum(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (115 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 5)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (122 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((139 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((148 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 0)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (157 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1089
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1600, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1604, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1608, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1616, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1620, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1624, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1632, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1636, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 1640, 0, 1431655764, 2048, 0, 1426063360, 2048, 0, 1426063360, 2048, 0, 1426063360, 2048, 0, 1426063360, 2052, 0, 1426063360, 2052, 0, 1426063360, 2052, 0, 1426063360, 2052, 0, 1426063360, 2056, 0, 1426063360, 2056, 0, 1426063360, 2056, 0, 1426063360, 2056, 0, 1426063360, 2064, 0, 1426063360, 2064, 0, 1426063360, 2064, 0, 1426063360, 2064, 0, 1426063360, 2068, 0, 1426063360, 2068, 0, 1426063360, 2068, 0, 1426063360, 2068, 0, 1426063360, 2072, 0, 1426063360, 2072, 0, 1426063360, 2072, 0, 1426063360, 2072, 0, 1426063360, 2080, 0, 1426063360, 2080, 0, 1426063360, 2080, 0, 1426063360, 2080, 0, 1426063360, 2084, 0, 1426063360, 2084, 0, 1426063360, 2084, 0, 1426063360, 2084, 0, 1426063360, 2088, 0, 1426063360, 2088, 0, 1426063360, 2088, 0, 1426063360, 2088, 0, 1426063360, 3200, 268435456, 64, 3200, 268435456, 64, 3216, 268435456, 64, 3216, 268435456, 64, 3232, 268435456, 64, 3232, 268435456, 64, 7360, 0, 33554432, 7808, 32, 0, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8896, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8912, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 8928, 2863311530, 2829757098, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9472, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9488, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 9504, 1431655509, 1431654741, 10048, 1, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
