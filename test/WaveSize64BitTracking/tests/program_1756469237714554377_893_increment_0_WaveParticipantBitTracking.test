#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 18)) {
        if ((WaveGetLaneIndex() < 32)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (22 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (31 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (35 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 6)) {
        if ((WaveGetLaneIndex() == 45)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (47 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 30))) {
          if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 20))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (77 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (87 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (96 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (101 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (105 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
        }
        if ((WaveGetLaneIndex() == 49)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (112 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() >= 52)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((133 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 24)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((140 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 48))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (155 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 51))) {
      if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 54))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (189 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() == 34)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((204 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if ((WaveGetLaneIndex() == 37)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((219 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i3 == 1)) {
            continue;
          }
          if ((i3 == 2)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() == 21)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((232 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (236 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 168
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 37449, 0, 768, 37449, 0, 768, 37449, 0, 768, 37449, 0, 768, 37449, 0, 768, 37449, 0, 1408, 65, 0, 1408, 65, 0, 8532, 0, 613416960, 8532, 0, 613416960, 8532, 0, 613416960, 8532, 0, 613416960, 8536, 0, 613416960, 8536, 0, 613416960, 8536, 0, 613416960, 8536, 0, 613416960, 8548, 0, 613416960, 8548, 0, 613416960, 8548, 0, 613416960, 8548, 0, 613416960, 8552, 0, 613416960, 8552, 0, 613416960, 8552, 0, 613416960, 8552, 0, 613416960, 8980, 4793490, 0, 8980, 4793490, 0, 8980, 4793490, 0, 8980, 4793490, 0, 8980, 4793490, 0, 8980, 4793490, 0, 8980, 4793490, 0, 8980, 4793490, 0, 8984, 4793490, 0, 8984, 4793490, 0, 8984, 4793490, 0, 8984, 4793490, 0, 8984, 4793490, 0, 8984, 4793490, 0, 8984, 4793490, 0, 8984, 4793490, 0, 8996, 4793490, 0, 8996, 4793490, 0, 8996, 4793490, 0, 8996, 4793490, 0, 8996, 4793490, 0, 8996, 4793490, 0, 8996, 4793490, 0, 8996, 4793490, 0, 9000, 4793490, 0, 9000, 4793490, 0, 9000, 4793490, 0, 9000, 4793490, 0, 9000, 4793490, 0, 9000, 4793490, 0, 9000, 4793490, 0, 9000, 4793490, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
