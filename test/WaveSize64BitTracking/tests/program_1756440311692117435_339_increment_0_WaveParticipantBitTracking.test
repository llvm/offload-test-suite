#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 50))) {
        if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 58))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (20 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (30 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (39 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (44 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (57 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 20))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((81 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 24)) {
          if ((WaveGetLaneIndex() < 21)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((91 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 48))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((106 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (111 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 198
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1280, 4681, 2415919104, 1280, 4681, 2415919104, 1280, 4681, 2415919104, 1280, 4681, 2415919104, 1280, 4681, 2415919104, 1280, 4681, 2415919104, 1280, 4681, 2415919104, 1920, 73, 0, 1920, 73, 0, 1920, 73, 0, 3648, 73, 2454192128, 3648, 73, 2454192128, 3648, 73, 2454192128, 3648, 73, 2454192128, 3648, 73, 2454192128, 3648, 73, 2454192128, 3648, 73, 2454192128, 3648, 73, 2454192128, 5200, 16, 0, 5216, 16, 0, 5232, 16, 0, 5840, 599186, 0, 5840, 599186, 0, 5840, 599186, 0, 5840, 599186, 0, 5840, 599186, 0, 5840, 599186, 0, 5840, 599186, 0, 5856, 599186, 0, 5856, 599186, 0, 5856, 599186, 0, 5856, 599186, 0, 5856, 599186, 0, 5856, 599186, 0, 5856, 599186, 0, 5872, 599186, 0, 5872, 599186, 0, 5872, 599186, 0, 5872, 599186, 0, 5872, 599186, 0, 5872, 599186, 0, 5872, 599186, 0, 6800, 16, 0, 6816, 16, 0, 6832, 16, 0, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
