#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() >= 33)) {
    for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 57))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((29 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 18)) {
        if ((WaveGetLaneIndex() >= 54)) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((39 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 34)) {
          if ((WaveGetLaneIndex() == 58)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((49 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 43)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((58 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 56))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((69 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 50))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((88 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 1)) {
          continue;
        }
      }
      if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 58))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((102 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  } else {
  if (((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 58))) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (121 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
    if ((WaveGetLaneIndex() == 58)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((138 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 29)) {
      if ((WaveGetLaneIndex() >= 36)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((148 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 43))) {
        if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 30))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((178 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 25)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((185 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((196 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter3 = 0;
    while ((counter3 < 3)) {
      counter3 = (counter3 + 1);
      if ((WaveGetLaneIndex() >= 34)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((212 << 6) | (i2 << 4)) | (counter3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter3 == 2)) {
        break;
      }
    }
  }
  if ((WaveGetLaneIndex() == 54)) {
    result = (result + WaveActiveMax(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((222 << 6) | (i2 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 771
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1856, 0, 33587200, 1856, 0, 33587200, 1872, 0, 33587200, 1872, 0, 33587200, 1888, 0, 33587200, 1888, 0, 33587200, 4416, 0, 4278190080, 4416, 0, 4278190080, 4416, 0, 4278190080, 4416, 0, 4278190080, 4416, 0, 4278190080, 4416, 0, 4278190080, 4416, 0, 4278190080, 4416, 0, 4278190080, 4432, 0, 4278190080, 4432, 0, 4278190080, 4432, 0, 4278190080, 4432, 0, 4278190080, 4432, 0, 4278190080, 4432, 0, 4278190080, 4432, 0, 4278190080, 4432, 0, 4278190080, 4448, 0, 4278190080, 4448, 0, 4278190080, 4448, 0, 4278190080, 4448, 0, 4278190080, 4448, 0, 4278190080, 4448, 0, 4278190080, 4448, 0, 4278190080, 4448, 0, 4278190080, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5632, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5636, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5640, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5648, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5652, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5656, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5664, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5668, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 5672, 0, 4294705152, 6528, 0, 4227858432, 6528, 0, 4227858432, 6528, 0, 4227858432, 6528, 0, 4227858432, 6528, 0, 4227858432, 6528, 0, 4227858432, 6544, 0, 4227858432, 6544, 0, 4227858432, 6544, 0, 4227858432, 6544, 0, 4227858432, 6544, 0, 4227858432, 6544, 0, 4227858432, 6560, 0, 4227858432, 6560, 0, 4227858432, 6560, 0, 4227858432, 6560, 0, 4227858432, 6560, 0, 4227858432, 6560, 0, 4227858432, 7744, 1073807360, 0, 7744, 1073807360, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11840, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11856, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 11872, 33554431, 0, 12544, 1073741824, 1, 12544, 1073741824, 1, 12560, 1073741824, 1, 12560, 1073741824, 1, 12576, 1073741824, 1, 12576, 1073741824, 1]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
