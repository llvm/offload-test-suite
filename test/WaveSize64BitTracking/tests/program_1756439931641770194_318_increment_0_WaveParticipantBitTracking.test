#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 50))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((23 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 48))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((42 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
          if ((i1 == 2)) {
            break;
          }
        }
        if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 52))) {
          result = (result + WaveActiveMin(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((59 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 45))) {
        if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 57))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (79 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 62))) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((105 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 56))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (116 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (120 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() == 21)) {
        if ((WaveGetLaneIndex() == 9)) {
          result = (result + WaveActiveMin(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (133 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 33)) {
          if ((WaveGetLaneIndex() < 13)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (143 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (157 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        if ((WaveGetLaneIndex() == 50)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (166 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (175 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 48))) {
        if (((WaveGetLaneIndex() == 22) || (WaveGetLaneIndex() == 54))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (201 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 27))) {
        result = (result + WaveActiveMin(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (220 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (230 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (239 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 46))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((258 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 45))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((271 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 3: {
          uint counter4 = 0;
          while ((counter4 < 3)) {
            counter4 = (counter4 + 1);
            if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 49))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((289 << 6) | (counter4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter4 == 2)) {
              break;
            }
          }
          break;
        }
      }
      if (((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 18))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (311 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (318 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 348
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1472, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 1488, 85, 1431568384, 2688, 0, 65536, 2692, 0, 65536, 2696, 0, 65536, 2704, 0, 65536, 2708, 0, 65536, 2712, 0, 65536, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3776, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 3792, 5461, 1431306240, 5056, 42, 2852126720, 5056, 42, 2852126720, 5056, 42, 2852126720, 5056, 42, 2852126720, 5056, 42, 2852126720, 5056, 42, 2852126720, 5056, 42, 2852126720, 7424, 42, 2852126720, 7424, 42, 2852126720, 7424, 42, 2852126720, 7424, 42, 2852126720, 7424, 42, 2852126720, 7424, 42, 2852126720, 7424, 42, 2852126720, 14080, 67108864, 0, 16512, 64, 1145323520, 16512, 64, 1145323520, 16512, 64, 1145323520, 16512, 64, 1145323520, 16512, 64, 1145323520, 16512, 64, 1145323520, 16528, 64, 1145323520, 16528, 64, 1145323520, 16528, 64, 1145323520, 16528, 64, 1145323520, 16528, 64, 1145323520, 16528, 64, 1145323520, 16544, 64, 1145323520, 16544, 64, 1145323520, 16544, 64, 1145323520, 16544, 64, 1145323520, 16544, 64, 1145323520, 16544, 64, 1145323520, 17344, 1088, 1145323520, 17344, 1088, 1145323520, 17344, 1088, 1145323520, 17344, 1088, 1145323520, 17344, 1088, 1145323520, 17344, 1088, 1145323520, 17344, 1088, 1145323520, 17360, 1088, 1145323520, 17360, 1088, 1145323520, 17360, 1088, 1145323520, 17360, 1088, 1145323520, 17360, 1088, 1145323520, 17360, 1088, 1145323520, 17360, 1088, 1145323520, 17376, 1088, 1145323520, 17376, 1088, 1145323520, 17376, 1088, 1145323520, 17376, 1088, 1145323520, 17376, 1088, 1145323520, 17376, 1088, 1145323520, 17376, 1088, 1145323520, 19904, 262144, 262148, 19904, 262144, 262148, 19904, 262144, 262148, 20352, 559240, 0, 20352, 559240, 0, 20352, 559240, 0, 20352, 559240, 0, 20352, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
