#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (12 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (28 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(9));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (37 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (42 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (51 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 63))) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 42))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((90 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 63))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (101 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
    if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 32))) {
      result = (result + WaveActiveMax(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((132 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter2 = 0;
    while ((counter2 < 3)) {
      counter2 = (counter2 + 1);
      if ((WaveGetLaneIndex() < 15)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((146 << 6) | (i1 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 55))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((168 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((182 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 53))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((193 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (203 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if ((WaveGetLaneIndex() == 27)) {
            if ((WaveGetLaneIndex() == 42)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (213 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if ((WaveGetLaneIndex() >= 53)) {
            if ((WaveGetLaneIndex() >= 38)) {
              result = (result + WaveActiveMax(9));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (223 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (232 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
  }
  case 2: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (242 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (256 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (261 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 564
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 65, 0, 768, 65, 0, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 2688, 68174084, 1090785345, 6464, 7, 2147483648, 6464, 7, 2147483648, 6464, 7, 2147483648, 6464, 7, 2147483648, 8448, 524288, 33555457, 8448, 524288, 33555457, 8448, 524288, 33555457, 8448, 524288, 33555457, 8464, 524288, 33555457, 8464, 524288, 33555457, 8464, 524288, 33555457, 8464, 524288, 33555457, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9348, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9352, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9356, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9364, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9368, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 9372, 32760, 0, 10752, 1, 2449473536, 10752, 1, 2449473536, 10752, 1, 2449473536, 10752, 1, 2449473536, 10768, 1, 2449473536, 10768, 1, 2449473536, 10768, 1, 2449473536, 10768, 1, 2449473536, 10784, 1, 2449473536, 10784, 1, 2449473536, 10784, 1, 2449473536, 10784, 1, 2449473536, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11648, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11664, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 11680, 136348168, 2181570690, 12352, 1, 2453667840, 12352, 1, 2453667840, 12352, 1, 2453667840, 12352, 1, 2453667840, 12352, 1, 2453667840, 12368, 1, 2453667840, 12368, 1, 2453667840, 12368, 1, 2453667840, 12368, 1, 2453667840, 12368, 1, 2453667840, 12384, 1, 2453667840, 12384, 1, 2453667840, 12384, 1, 2453667840, 12384, 1, 2453667840, 12384, 1, 2453667840, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16384, 272696336, 68174084, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513, 16704, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
