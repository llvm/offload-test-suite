#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 51))) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 53))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (20 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
            if ((WaveGetLaneIndex() == 25)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((43 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 53)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((50 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i0 == 1)) {
            continue;
          }
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 58))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (64 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 57))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (83 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((99 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 13)) {
          if ((WaveGetLaneIndex() == 57)) {
            result = (result + WaveActiveMin(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((109 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 4))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((132 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (141 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 294
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1280, 1, 1430257664, 1280, 1, 1430257664, 1280, 1, 1430257664, 1280, 1, 1430257664, 1280, 1, 1430257664, 1280, 1, 1430257664, 4096, 1, 1409286144, 4096, 1, 1409286144, 4096, 1, 1409286144, 4096, 1, 1409286144, 5312, 65536, 0, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6352, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6368, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 6384, 1431655764, 349525, 8464, 1073741844, 16, 8464, 1073741844, 16, 8464, 1073741844, 16, 8464, 1073741844, 16, 8480, 1073741844, 16, 8480, 1073741844, 16, 8480, 1073741844, 16, 8480, 1073741844, 16, 8496, 1073741844, 16, 8496, 1073741844, 16, 8496, 1073741844, 16, 8496, 1073741844, 16]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
