#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 53))) {
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 48))) {
      result = (result + WaveActiveSum(5));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 46))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((39 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((56 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 2)) {
          break;
        }
      }
      if (((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 40))) {
        result = (result + WaveActiveMin(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((70 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (79 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() == 17)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((97 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (106 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (110 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (119 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
    if ((WaveGetLaneIndex() == 28)) {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 40)) {
            if ((WaveGetLaneIndex() == 54)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((145 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 54))) {
            result = (result + WaveActiveMax(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((160 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((169 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((174 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
  } else {
  if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 11))) {
    result = (result + WaveActiveMax(7));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((193 << 6) | (i3 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
    if (((WaveGetLaneIndex() == 25) || (WaveGetLaneIndex() == 62))) {
      result = (result + WaveActiveMin(10));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (((212 << 6) | (i3 << 4)) | (i4 << 2));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 43))) {
    result = (result + WaveActiveSum(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((231 << 6) | (i3 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if ((i3 == 1)) {
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 684
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 1088, 15, 4292870144, 2512, 64, 0, 2528, 64, 0, 2544, 64, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3600, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3604, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3608, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3616, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3620, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3624, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3632, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3636, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 3640, 65535, 0, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 5056, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 7616, 1431633920, 1398101, 10816, 268435456, 0, 10832, 268435456, 0, 12352, 33556544, 16384, 12352, 33556544, 16384, 12352, 33556544, 16384, 12352, 33556544, 16384, 12368, 33556544, 16384, 12368, 33556544, 16384, 12368, 33556544, 16384, 12368, 33556544, 16384, 13568, 33554432, 1073741824, 13568, 33554432, 1073741824, 13572, 33554432, 1073741824, 13572, 33554432, 1073741824, 13576, 33554432, 1073741824, 13576, 33554432, 1073741824, 13584, 33554432, 1073741824, 13584, 33554432, 1073741824, 13588, 33554432, 1073741824, 13588, 33554432, 1073741824, 13592, 33554432, 1073741824, 13592, 33554432, 1073741824, 14784, 8, 34816, 14784, 8, 34816, 14784, 8, 34816, 14800, 8, 34816, 14800, 8, 34816, 14800, 8, 34816]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
