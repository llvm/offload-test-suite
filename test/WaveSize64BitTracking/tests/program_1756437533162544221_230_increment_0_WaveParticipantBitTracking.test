#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 13))) {
    if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 39))) {
      result = (result + WaveActiveMax(10));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (52 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 59))) {
      if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 44))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (70 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 60))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((88 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 60))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((103 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 39))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (126 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 62))) {
            if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 57))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (160 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
              if ((WaveGetLaneIndex() == 58)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((175 << 6) | (i1 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 48))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (194 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() == 52)) {
                if ((WaveGetLaneIndex() == 26)) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (207 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((WaveGetLaneIndex() == 13)) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (214 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              uint counter2 = 0;
              while ((counter2 < 3)) {
                counter2 = (counter2 + 1);
                if ((WaveGetLaneIndex() < 8)) {
                  result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((230 << 6) | (counter2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              uint counter3 = 0;
              while ((counter3 < 2)) {
                counter3 = (counter3 + 1);
                if ((WaveGetLaneIndex() >= 60)) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((244 << 6) | (counter3 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 54))) {
                if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 43))) {
                  result = (result + WaveActiveMax(2));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (277 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 41))) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (288 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              } else {
              if ((WaveGetLaneIndex() >= 42)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (295 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (304 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (309 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (318 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        uint counter4 = 0;
        while ((counter4 < 2)) {
          counter4 = (counter4 + 1);
          if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveSum(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((343 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter5 = 0;
          while ((counter5 < 3)) {
            counter5 = (counter5 + 1);
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((361 << 6) | (counter4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((370 << 6) | (counter4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter5 == 2)) {
              break;
            }
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 63))) {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 54))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (391 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i6 = 0; (i6 < 3); i6 = (i6 + 1)) {
            if ((WaveGetLaneIndex() == 52)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((408 << 6) | (i6 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 54)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((415 << 6) | (i6 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i6 == 2)) {
              break;
            }
          }
        }
        break;
      }
    case 2: {
        for (uint i7 = 0; (i7 < 2); i7 = (i7 + 1)) {
          uint counter8 = 0;
          while ((counter8 < 3)) {
            counter8 = (counter8 + 1);
            if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 42))) {
              result = (result + WaveActiveMin(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((444 << 6) | (i7 << 4)) | (counter8 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() < 6)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((451 << 6) | (i7 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 291
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 4480, 8192, 0, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 20352, 272696336, 68174084, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28420, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28424, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28428, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28436, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28440, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28444, 149796, 1227132928, 28864, 36, 0, 28864, 36, 0, 28880, 36, 0, 28880, 36, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
