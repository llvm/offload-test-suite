#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 33)) {
        if ((WaveGetLaneIndex() < 12)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 2)) {
          counter0 = (counter0 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((28 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((37 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 50)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (46 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 57))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (59 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() == 19)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((74 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 2)) {
          break;
        }
      }
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 42))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (88 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (97 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 60))) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((124 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 44))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((147 << 6) | (i2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i3 == 1)) {
          continue;
        }
      }
      if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 44))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((165 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 3: {
    for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
      if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 60))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((184 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 62))) {
        if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 52))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((204 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 24) || (WaveGetLaneIndex() == 53))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((217 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((228 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 49))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((239 << 6) | (i4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (249 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (259 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (268 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if ((((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 1))) {
            switch ((WaveGetLaneIndex() % 2)) {
            case 0: {
                if ((WaveGetLaneIndex() < 8)) {
                  result = (result + WaveActiveSum(1));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (289 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                break;
              }
            case 1: {
                if (((WaveGetLaneIndex() % 2) == 0)) {
                  result = (result + WaveActiveSum(2));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (298 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                break;
              }
            }
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (303 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 309
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2944, 0, 286261248, 2944, 0, 286261248, 2944, 0, 286261248, 3776, 273, 0, 3776, 273, 0, 3776, 273, 0, 5632, 1, 0, 7936, 4194304, 64, 7936, 4194304, 64, 7952, 4194304, 64, 7952, 4194304, 64, 7968, 4194304, 64, 7968, 4194304, 64, 11776, 34952, 2147483648, 11776, 34952, 2147483648, 11776, 34952, 2147483648, 11776, 34952, 2147483648, 11776, 34952, 2147483648, 11792, 34952, 2147483648, 11792, 34952, 2147483648, 11792, 34952, 2147483648, 11792, 34952, 2147483648, 11792, 34952, 2147483648, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14592, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 14608, 2290649224, 2290649224, 15296, 2184, 2290614272, 15296, 2184, 2290614272, 15296, 2184, 2290614272, 15296, 2184, 2290614272, 15296, 2184, 2290614272, 15296, 2184, 2290614272, 15296, 2184, 2290614272, 15312, 2184, 2290614272, 15312, 2184, 2290614272, 15312, 2184, 2290614272, 15312, 2184, 2290614272, 15312, 2184, 2290614272, 15312, 2184, 2290614272, 15312, 2184, 2290614272, 15936, 73, 0, 15936, 73, 0, 15936, 73, 0, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 17152, 272696336, 68174084, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513, 19392, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
