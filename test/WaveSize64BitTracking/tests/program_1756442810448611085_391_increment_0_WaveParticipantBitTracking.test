#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((25 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 59))) {
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 42))) {
            result = (result + WaveActiveMax(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((43 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 46))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((58 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((69 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter0 == 1)) {
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (77 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (84 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (94 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 13)) {
            if ((WaveGetLaneIndex() < 30)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (107 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 16))) {
              if ((((WaveGetLaneIndex() == 31) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 39))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (137 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((WaveGetLaneIndex() == 24) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 57))) {
                result = (result + WaveActiveMax(9));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (152 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          } else {
          if ((WaveGetLaneIndex() == 9)) {
            result = (result + WaveActiveMin(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (159 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 60))) {
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 43))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (177 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 56))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (188 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 49)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (195 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (204 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (209 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (214 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (218 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 300
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 1616, 286331153, 286331153, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 2768, 78643, 805306368, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4432, 572662306, 572662306, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 4928, 1145324612, 1145324612, 5376, 559240, 0, 5376, 559240, 0, 5376, 559240, 0, 5376, 559240, 0, 5376, 559240, 0, 6016, 73, 0, 6016, 73, 0, 6016, 73, 0, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13056, 272696336, 68174084, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513, 13696, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
