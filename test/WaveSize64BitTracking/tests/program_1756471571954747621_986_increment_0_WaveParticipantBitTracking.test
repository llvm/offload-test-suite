#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((19 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 45))) {
          if (((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 56))) {
            if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 62))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((52 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 59))) {
            result = (result + WaveActiveMax(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((71 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 53))) {
            result = (result + WaveActiveMin(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((90 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 45))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((101 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 11)) {
          result = (result + WaveActiveMax(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((108 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((117 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (126 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (130 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 348
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5760, 85, 1430257664, 5760, 85, 1430257664, 5760, 85, 1430257664, 5760, 85, 1430257664, 5760, 85, 1430257664, 5760, 85, 1430257664, 5760, 85, 1430257664, 5760, 85, 1430257664, 5760, 85, 1430257664, 5764, 85, 1430257664, 5764, 85, 1430257664, 5764, 85, 1430257664, 5764, 85, 1430257664, 5764, 85, 1430257664, 5764, 85, 1430257664, 5764, 85, 1430257664, 5764, 85, 1430257664, 5764, 85, 1430257664, 5776, 85, 1430257664, 5776, 85, 1430257664, 5776, 85, 1430257664, 5776, 85, 1430257664, 5776, 85, 1430257664, 5776, 85, 1430257664, 5776, 85, 1430257664, 5776, 85, 1430257664, 5776, 85, 1430257664, 5780, 85, 1430257664, 5780, 85, 1430257664, 5780, 85, 1430257664, 5780, 85, 1430257664, 5780, 85, 1430257664, 5780, 85, 1430257664, 5780, 85, 1430257664, 5780, 85, 1430257664, 5780, 85, 1430257664, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6464, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6468, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6480, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304, 6484, 1398101, 1431650304]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
