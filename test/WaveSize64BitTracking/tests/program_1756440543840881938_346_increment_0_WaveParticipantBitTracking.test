#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter0 = 0;
          while ((counter0 < 3)) {
            counter0 = (counter0 + 1);
            if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 46))) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((23 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
              if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 48))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((42 << 6) | (counter0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 50))) {
                result = (result + WaveActiveSum(5));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((53 << 6) | (counter0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 53))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((64 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (73 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (83 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (92 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (97 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() < 4)) {
        if ((WaveGetLaneIndex() >= 60)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (107 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 3)) {
          counter2 = (counter2 + 1);
          if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 45))) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((137 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 23))) {
            if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 45))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((175 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 13))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((194 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 52))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((209 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 10))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((232 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 23)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (239 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 57))) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (260 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (274 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 35))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (285 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  case 2: {
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() == 18)) {
        result = (result + WaveActiveMin(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((300 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 29)) {
        if ((WaveGetLaneIndex() == 34)) {
          result = (result + WaveActiveSum(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((310 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter4 = 0;
        while ((counter4 < 3)) {
          counter4 = (counter4 + 1);
          if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 56))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((328 << 6) | (i3 << 4)) | (counter4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 47))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((339 << 6) | (i3 << 4)) | (counter4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter4 == 2)) {
            break;
          }
        }
      }
      if ((i3 == 1)) {
        break;
      }
    }
    break;
  }
  case 3: {
    for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
      if ((WaveGetLaneIndex() >= 48)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((360 << 6) | (i5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 5)) {
        for (uint i6 = 0; (i6 < 2); i6 = (i6 + 1)) {
          if ((WaveGetLaneIndex() >= 46)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((378 << 6) | (i5 << 4)) | (i6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 48)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((385 << 6) | (i5 << 4)) | (i6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 40)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((392 << 6) | (i5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
  uint counter7 = 0;
  while ((counter7 < 3)) {
    counter7 = (counter7 + 1);
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((408 << 6) | (counter7 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter8 = 0;
    while ((counter8 < 3)) {
      counter8 = (counter8 + 1);
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((426 << 6) | (counter7 << 4)) | (counter8 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 42))) {
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 54))) {
          result = (result + WaveActiveMax(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((444 << 6) | (counter7 << 4)) | (counter8 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 48))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((455 << 6) | (counter7 << 4)) | (counter8 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((464 << 6) | (counter7 << 4)) | (counter8 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((counter7 == 2)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 2208
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1488, 1, 268500992, 1488, 1, 268500992, 1488, 1, 268500992, 1504, 1, 268500992, 1504, 1, 268500992, 1504, 1, 268500992, 1520, 1, 268500992, 1520, 1, 268500992, 1520, 1, 268500992, 2704, 1, 268500992, 2704, 1, 268500992, 2704, 1, 268500992, 2708, 1, 268500992, 2708, 1, 268500992, 2708, 1, 268500992, 2720, 1, 268500992, 2720, 1, 268500992, 2720, 1, 268500992, 2724, 1, 268500992, 2724, 1, 268500992, 2724, 1, 268500992, 2736, 1, 268500992, 2736, 1, 268500992, 2736, 1, 268500992, 2740, 1, 268500992, 2740, 1, 268500992, 2740, 1, 268500992, 3408, 4097, 268435456, 3408, 4097, 268435456, 3408, 4097, 268435456, 3412, 4097, 268435456, 3412, 4097, 268435456, 3412, 4097, 268435456, 3424, 4097, 268435456, 3424, 4097, 268435456, 3424, 4097, 268435456, 3428, 4097, 268435456, 3428, 4097, 268435456, 3428, 4097, 268435456, 3440, 4097, 268435456, 3440, 4097, 268435456, 3440, 4097, 268435456, 3444, 4097, 268435456, 3444, 4097, 268435456, 3444, 4097, 268435456, 4112, 1, 268435456, 4112, 1, 268435456, 4128, 1, 268435456, 4128, 1, 268435456, 4144, 1, 268435456, 4144, 1, 268435456, 4672, 268501008, 1048832, 4672, 268501008, 1048832, 4672, 268501008, 1048832, 4672, 268501008, 1048832, 4672, 268501008, 1048832, 6208, 1048832, 16781313, 6208, 1048832, 16781313, 6208, 1048832, 16781313, 6208, 1048832, 16781313, 6208, 1048832, 16781313, 12432, 2, 0, 12448, 2, 0, 12464, 2, 0, 15296, 2, 0, 16640, 32, 33554944, 16640, 32, 33554944, 16640, 32, 33554944, 19200, 262144, 0, 19216, 262144, 0, 23040, 0, 2290614272, 23040, 0, 2290614272, 23040, 0, 2290614272, 23040, 0, 2290614272, 23056, 0, 2290614272, 23056, 0, 2290614272, 23056, 0, 2290614272, 23056, 0, 2290614272, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26128, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 26144, 2863311530, 2863311530, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27284, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27288, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27292, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27300, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27304, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 27308, 1431655765, 1431655765, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28436, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28440, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28444, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28452, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28456, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 28460, 127, 4290772992, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29140, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29144, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29148, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29156, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29160, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29164, 3, 4294901760, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29716, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29720, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29724, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29732, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29736, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765, 29740, 1431655765, 1431655765]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
