#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 47))) {
        if (((WaveGetLaneIndex() == 31) || (WaveGetLaneIndex() == 53))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (24 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((40 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (51 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if ((WaveGetLaneIndex() < 21)) {
        result = (result + WaveActiveMax(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((66 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 59))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((97 << 6) | (i1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i2 == 1)) {
          continue;
        }
      }
      if ((WaveGetLaneIndex() >= 52)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((109 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i1 == 1)) {
        continue;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (117 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (124 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 195
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 3264, 286331153, 286331153, 4224, 139810, 0, 4224, 139810, 0, 4224, 139810, 0, 4224, 139810, 0, 4224, 139810, 0, 4240, 139810, 0, 4240, 139810, 0, 4240, 139810, 0, 4240, 139810, 0, 4240, 139810, 0, 6208, 139264, 0, 6208, 139264, 0, 6212, 139264, 0, 6212, 139264, 0, 6216, 139264, 0, 6216, 139264, 0, 6224, 139264, 0, 6224, 139264, 0, 6228, 139264, 0, 6228, 139264, 0, 6232, 139264, 0, 6232, 139264, 0, 6976, 0, 572522496, 6976, 0, 572522496, 6976, 0, 572522496, 6992, 0, 572522496, 6992, 0, 572522496, 6992, 0, 572522496, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
