#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() == 7)) {
        result = (result + WaveActiveMax(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((18 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 62))) {
          if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 49))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((59 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter1 == 2)) {
          break;
        }
      }
      if ((WaveGetLaneIndex() == 55)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((69 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (78 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
    if ((WaveGetLaneIndex() < 27)) {
      result = (result + WaveActiveMin(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((93 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() < 30)) {
        result = (result + WaveActiveMax(10));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((108 << 6) | (i2 << 4)) | (i3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 30)) {
        if ((WaveGetLaneIndex() >= 54)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((118 << 6) | (i2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((134 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((143 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
    if ((i2 == 1)) {
      continue;
    }
    if ((i2 == 1)) {
      break;
    }
  }
  if ((WaveGetLaneIndex() == 54)) {
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (162 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        uint counter4 = 0;
        while ((counter4 < 2)) {
          counter4 = (counter4 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((178 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        uint counter5 = 0;
        while ((counter5 < 2)) {
          counter5 = (counter5 + 1);
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 42))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((196 << 6) | (counter5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 10)) {
            if ((WaveGetLaneIndex() == 53)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((206 << 6) | (counter5 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    case 3: {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (213 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (217 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 900
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1168, 128, 0, 1184, 128, 0, 4432, 0, 8388608, 4448, 0, 8388608, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5952, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 5968, 134217727, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6912, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6916, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6928, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 6932, 1073741823, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8576, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8580, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8592, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 8596, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9152, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9156, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9168, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 9172, 715827882, 0, 12560, 0, 4194304, 12576, 0, 4194304]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
