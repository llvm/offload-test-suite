#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (12 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (21 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((40 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            uint counter1 = 0;
            while ((counter1 < 2)) {
              counter1 = (counter1 + 1);
              if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 58))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((66 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 61))) {
                result = (result + WaveActiveSum(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((85 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if ((i0 == 2)) {
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (97 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
    if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 16))) {
      if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 16))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((135 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((149 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((158 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 49))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((177 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() >= 34)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((184 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i2 == 1)) {
      continue;
    }
    if ((i2 == 1)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 258
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 65, 0, 768, 65, 0, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 5444, 1048832, 0, 5444, 1048832, 0, 5448, 1048832, 0, 5448, 1048832, 0, 5460, 1048832, 0, 5460, 1048832, 0, 5464, 1048832, 0, 5464, 1048832, 0, 5476, 1048832, 0, 5476, 1048832, 0, 5480, 1048832, 0, 5480, 1048832, 0, 8640, 65536, 0, 8656, 65536, 0, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11776, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292, 11792, 0, 4294967292]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
