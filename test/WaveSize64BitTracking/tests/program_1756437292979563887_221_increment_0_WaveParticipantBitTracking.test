#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() >= 32)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (59 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 44))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (53 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 49))) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (49 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 24))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (45 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (69 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 63))) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 59))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (87 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 25)) {
          if ((WaveGetLaneIndex() == 38)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (97 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 55))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (108 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 5))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (125 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (135 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (144 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if ((((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 20))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (167 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 53))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((185 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 44))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((210 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 53))) {
          result = (result + WaveActiveMin(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((229 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 1)) {
          break;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 228
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3776, 0, 4294967295, 3392, 2048, 0, 3136, 63, 0, 3136, 63, 0, 3136, 63, 0, 3136, 63, 0, 3136, 63, 0, 3136, 63, 0, 2880, 17039872, 0, 2880, 17039872, 0, 2880, 17039872, 0, 4416, 73, 0, 4416, 73, 0, 4416, 73, 0, 5568, 2, 0, 6912, 2, 0, 10688, 65536, 0, 11856, 2340, 1226833920, 11856, 2340, 1226833920, 11856, 2340, 1226833920, 11856, 2340, 1226833920, 11856, 2340, 1226833920, 11856, 2340, 1226833920, 11856, 2340, 1226833920, 11856, 2340, 1226833920, 11872, 2340, 1226833920, 11872, 2340, 1226833920, 11872, 2340, 1226833920, 11872, 2340, 1226833920, 11872, 2340, 1226833920, 11872, 2340, 1226833920, 11872, 2340, 1226833920, 11872, 2340, 1226833920, 13456, 0, 4096, 13460, 0, 4096, 13472, 0, 4096, 13476, 0, 4096, 14672, 131072, 2097152, 14672, 131072, 2097152, 14676, 131072, 2097152, 14676, 131072, 2097152, 14688, 131072, 2097152, 14688, 131072, 2097152, 14692, 131072, 2097152, 14692, 131072, 2097152]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
