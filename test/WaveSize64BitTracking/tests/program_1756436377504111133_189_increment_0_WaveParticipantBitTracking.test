#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 53))) {
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 48))) {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 48))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (24 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (34 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (43 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 57))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (54 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  } else {
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (63 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 10)) {
        if ((WaveGetLaneIndex() >= 58)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (76 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 46))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (95 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 1: {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (109 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 58))) {
      if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 46))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (127 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 56))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (138 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (145 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (149 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 207
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 1536, 7, 4292870144, 2176, 5, 0, 2176, 5, 0, 3456, 7, 4261412864, 3456, 7, 4261412864, 3456, 7, 4261412864, 3456, 7, 4261412864, 3456, 7, 4261412864, 3456, 7, 4261412864, 3456, 7, 4261412864, 3456, 7, 4261412864, 3456, 7, 4261412864, 3456, 7, 4261412864, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 4032, 2863311488, 699050, 6080, 0, 16, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 6976, 286331136, 1118481, 9280, 838784, 0, 9280, 838784, 0, 9280, 838784, 0, 9280, 838784, 0, 9280, 838784, 0, 9280, 838784, 0, 9280, 838784, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
