#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (23 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (33 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (42 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (47 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (54 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (58 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (69 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((86 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 60))) {
      if (((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 35))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((112 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() == 3)) {
          result = (result + WaveActiveSum(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((127 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 51)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((134 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 0))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((157 << 6) | (i0 << 4)) | (i2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((166 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if ((i0 == 1)) {
    continue;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 432
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5504, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 5520, 2863311530, 2863311530, 10048, 1, 8192, 10048, 1, 8192, 10052, 1, 8192, 10052, 1, 8192, 10056, 1, 8192, 10056, 1, 8192, 10064, 1, 8192, 10064, 1, 8192, 10068, 1, 8192, 10068, 1, 8192, 10072, 1, 8192, 10072, 1, 8192, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10624, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765, 10640, 1431655765, 1431655765]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
