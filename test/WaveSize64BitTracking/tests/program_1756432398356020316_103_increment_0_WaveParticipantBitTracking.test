#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 37))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((29 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((45 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i0 == 1)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (57 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 50))) {
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 53))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (75 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 53))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((106 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 55))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (125 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 33))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((143 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 42))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (160 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (164 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (174 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter4 = 0;
          while ((counter4 < 2)) {
            counter4 = (counter4 + 1);
            if (((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 45))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((195 << 6) | (counter4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 46))) {
            if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 53))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (213 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 45))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (224 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((241 << 6) | (i5 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (245 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 330
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2884, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2888, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2900, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 2904, 1090785345, 272696336, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 3648, 272696336, 68174084, 4800, 36, 1226833920, 4800, 36, 1226833920, 4800, 36, 1226833920, 4800, 36, 1226833920, 4800, 36, 1226833920, 4800, 36, 1226833920, 6784, 0, 2097152, 6800, 0, 2097152, 6816, 0, 2097152, 10240, 8388608, 8, 10240, 8388608, 8, 11136, 85, 0, 11136, 85, 0, 11136, 85, 0, 11136, 85, 0, 12496, 134217728, 8192, 12496, 134217728, 8192, 12512, 134217728, 8192, 12512, 134217728, 8192, 13632, 2, 545259520, 13632, 2, 545259520, 13632, 2, 545259520, 14336, 2, 545390592, 14336, 2, 545390592, 14336, 2, 545390592, 14336, 2, 545390592, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15424, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15440, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168, 15456, 545392672, 136348168]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
