#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (19 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
                if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 45))) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((41 << 6) | (i0 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              uint counter1 = 0;
              while ((counter1 < 3)) {
                counter1 = (counter1 + 1);
                if ((WaveGetLaneIndex() == 31)) {
                  result = (result + WaveActiveMin(7));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((55 << 6) | (counter1 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((WaveGetLaneIndex() == 59)) {
                  result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((64 << 6) | (counter1 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 54))) {
                if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 60))) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (82 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 63))) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (93 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          }
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (98 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (102 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 49))) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 45))) {
          result = (result + WaveActiveMax(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (120 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 50))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (131 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() < 25)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (138 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((154 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if ((WaveGetLaneIndex() == 11)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((169 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((178 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 198
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 3536, 2147483648, 0, 3552, 2147483648, 0, 3568, 2147483648, 0, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 6272, 2454267026, 613566756, 7680, 4, 1227096064, 7680, 4, 1227096064, 7680, 4, 1227096064, 7680, 4, 1227096064, 7680, 4, 1227096064, 7680, 4, 1227096064, 8384, 292, 1227096064, 8384, 292, 1227096064, 8384, 292, 1227096064, 8384, 292, 1227096064, 8384, 292, 1227096064, 8384, 292, 1227096064, 8384, 292, 1227096064, 8384, 292, 1227096064, 8832, 9568256, 0, 8832, 9568256, 0, 8832, 9568256, 0, 9872, 545390592, 33288, 9872, 545390592, 33288, 9872, 545390592, 33288, 9872, 545390592, 33288, 9872, 545390592, 33288, 9872, 545390592, 33288, 9888, 545390592, 33288, 9888, 545390592, 33288, 9888, 545390592, 33288, 9888, 545390592, 33288, 9888, 545390592, 33288, 9888, 545390592, 33288, 11408, 68157440, 4161, 11408, 68157440, 4161, 11408, 68157440, 4161, 11408, 68157440, 4161, 11408, 68157440, 4161, 11424, 68157440, 4161, 11424, 68157440, 4161, 11424, 68157440, 4161, 11424, 68157440, 4161, 11424, 68157440, 4161]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
