#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 42))) {
    if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 60))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 43))) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((40 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((63 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((72 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 15))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((97 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 372
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 1088, 4095, 4026531840, 2560, 0, 2048, 2576, 0, 2048, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4036, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4040, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4044, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4052, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4056, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 4060, 2730, 2863310848, 6208, 0, 2147516416, 6208, 0, 2147516416, 6224, 0, 2147516416, 6224, 0, 2147516416]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
