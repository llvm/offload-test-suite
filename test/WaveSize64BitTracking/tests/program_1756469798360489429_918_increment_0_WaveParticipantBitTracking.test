#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if ((WaveGetLaneIndex() == 24)) {
      if ((WaveGetLaneIndex() == 60)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (14 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((30 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() == 25) || (WaveGetLaneIndex() == 39))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((49 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((61 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 50)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (68 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (77 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 58))) {
    if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 15))) {
      result = (result + WaveActiveMin(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (111 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 55))) {
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 48))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (129 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (139 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (148 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (152 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
    }
  } else {
  if ((((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 47))) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (175 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  uint counter2 = 0;
  while ((counter2 < 3)) {
    counter2 = (counter2 + 1);
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 47))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((203 << 6) | (counter2 << 4)) | (i3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i3 == 1)) {
        continue;
      }
    }
    if ((counter2 == 2)) {
      break;
    }
  }
  if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 44))) {
    result = (result + WaveActiveMin(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (224 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 159
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1936, 16777216, 0, 1952, 16777216, 0, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 4928, 1431655765, 1431655765, 8256, 64, 201326592, 8256, 64, 201326592, 8256, 64, 201326592, 8896, 64, 0, 11200, 134218240, 1073774592, 11200, 134218240, 1073774592, 11200, 134218240, 1073774592, 11200, 134218240, 1073774592, 13008, 128, 32768, 13008, 128, 32768, 13012, 128, 32768, 13012, 128, 32768, 13024, 128, 32768, 13024, 128, 32768, 13028, 128, 32768, 13028, 128, 32768, 14336, 8, 1073745920, 14336, 8, 1073745920, 14336, 8, 1073745920]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
