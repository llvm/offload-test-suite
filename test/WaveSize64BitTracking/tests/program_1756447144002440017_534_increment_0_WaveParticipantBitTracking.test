#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (19 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (28 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            if ((WaveGetLaneIndex() < 21)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((43 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
              if ((((WaveGetLaneIndex() == 31) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 22))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((66 << 6) | (i0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 16))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((89 << 6) | (i0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((i1 == 1)) {
                break;
              }
            }
            if ((WaveGetLaneIndex() < 30)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((99 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (104 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 49)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((121 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 50)) {
          if ((WaveGetLaneIndex() < 15)) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((131 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 38)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((138 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 3)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((145 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 62))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((164 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter4 = 0;
        while ((counter4 < 3)) {
          counter4 = (counter4 + 1);
          if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 49))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((190 << 6) | (i3 << 4)) | (counter4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 50))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((201 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (206 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 48))) {
            if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 57))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (227 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() < 10)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (234 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
          if ((((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 39))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((265 << 6) | (i5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 16))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((286 << 6) | (i5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i5 == 2)) {
            break;
          }
        }
        break;
      }
    case 2: {
        uint counter6 = 0;
        while ((counter6 < 3)) {
          counter6 = (counter6 + 1);
          if ((WaveGetLaneIndex() >= 37)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((303 << 6) | (counter6 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 408
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 6656, 613566756, 1227133513, 8848, 0, 286261248, 8848, 0, 286261248, 8848, 0, 286261248, 8864, 0, 286261248, 8864, 0, 286261248, 8864, 0, 286261248, 10496, 51, 0, 10496, 51, 0, 10496, 51, 0, 10496, 51, 0, 10512, 51, 0, 10512, 51, 0, 10512, 51, 0, 10512, 51, 0, 12164, 0, 196609, 12164, 0, 196609, 12164, 0, 196609, 12168, 0, 196609, 12168, 0, 196609, 12168, 0, 196609, 12172, 0, 196609, 12172, 0, 196609, 12172, 0, 196609, 12180, 0, 196609, 12180, 0, 196609, 12180, 0, 196609, 12184, 0, 196609, 12184, 0, 196609, 12184, 0, 196609, 12188, 0, 196609, 12188, 0, 196609, 12188, 0, 196609, 12864, 1, 858783744, 12864, 1, 858783744, 12864, 1, 858783744, 12864, 1, 858783744, 12864, 1, 858783744, 12864, 1, 858783744, 12864, 1, 858783744, 12880, 1, 858783744, 12880, 1, 858783744, 12880, 1, 858783744, 12880, 1, 858783744, 12880, 1, 858783744, 12880, 1, 858783744, 12880, 1, 858783744, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 13184, 2004318071, 2004318071, 14528, 8, 2147483648, 14528, 8, 2147483648, 19408, 0, 134250496, 19408, 0, 134250496, 19424, 0, 134250496, 19424, 0, 134250496, 19440, 0, 134250496, 19440, 0, 134250496]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
