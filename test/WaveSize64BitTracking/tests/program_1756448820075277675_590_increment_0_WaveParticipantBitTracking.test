#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 56))) {
              if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 57))) {
                result = (result + WaveActiveSum(5));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (43 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 51))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (62 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (71 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 4)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (81 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (90 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (95 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 3: {
              if ((WaveGetLaneIndex() < 20)) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (102 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (111 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (120 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (125 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 51))) {
      if ((((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 52))) {
        result = (result + WaveActiveSum(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (155 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          uint counter0 = 0;
          while ((counter0 < 2)) {
            counter0 = (counter0 + 1);
            if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 37))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((178 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 50))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((193 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter0 == 1)) {
              break;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (205 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 48))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (228 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((WaveGetLaneIndex() == 57)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (235 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (249 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 57))) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 57))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (267 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  break;
  }
  case 3: {
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if ((WaveGetLaneIndex() < 19)) {
        result = (result + WaveActiveMin(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((282 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((((WaveGetLaneIndex() == 29) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 51))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((305 << 6) | (i1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 53))) {
          if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 43))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((329 << 6) | (i1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 57))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((344 << 6) | (i1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((357 << 6) | (i1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 27))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((376 << 6) | (i1 << 4)) | (i2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        continue;
      }
    }
  }
  break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 294
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 8000, 537002016, 2097664, 8000, 537002016, 2097664, 8000, 537002016, 2097664, 8000, 537002016, 2097664, 8000, 537002016, 2097664, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 15936, 1145323588, 1145324612, 17088, 0, 1140850688, 17088, 0, 1140850688, 18048, 34952, 0, 18048, 34952, 0, 18048, 34952, 0, 18048, 34952, 0, 18064, 34952, 0, 18064, 34952, 0, 18064, 34952, 0, 18064, 34952, 0, 19520, 0, 524288, 19524, 0, 524288, 19528, 0, 524288, 19536, 0, 524288, 19540, 0, 524288, 19544, 0, 524288, 22848, 2184, 2290649088, 22848, 2184, 2290649088, 22848, 2184, 2290649088, 22848, 2184, 2290649088, 22848, 2184, 2290649088, 22848, 2184, 2290649088, 22848, 2184, 2290649088, 22848, 2184, 2290649088, 22848, 2184, 2290649088, 22852, 2184, 2290649088, 22852, 2184, 2290649088, 22852, 2184, 2290649088, 22852, 2184, 2290649088, 22852, 2184, 2290649088, 22852, 2184, 2290649088, 22852, 2184, 2290649088, 22852, 2184, 2290649088, 22852, 2184, 2290649088, 22856, 2184, 2290649088, 22856, 2184, 2290649088, 22856, 2184, 2290649088, 22856, 2184, 2290649088, 22856, 2184, 2290649088, 22856, 2184, 2290649088, 22856, 2184, 2290649088, 22856, 2184, 2290649088, 22856, 2184, 2290649088, 22864, 2184, 2290649088, 22864, 2184, 2290649088, 22864, 2184, 2290649088, 22864, 2184, 2290649088, 22864, 2184, 2290649088, 22864, 2184, 2290649088, 22864, 2184, 2290649088, 22864, 2184, 2290649088, 22864, 2184, 2290649088, 22868, 2184, 2290649088, 22868, 2184, 2290649088, 22868, 2184, 2290649088, 22868, 2184, 2290649088, 22868, 2184, 2290649088, 22868, 2184, 2290649088, 22868, 2184, 2290649088, 22868, 2184, 2290649088, 22868, 2184, 2290649088, 22872, 2184, 2290649088, 22872, 2184, 2290649088, 22872, 2184, 2290649088, 22872, 2184, 2290649088, 22872, 2184, 2290649088, 22872, 2184, 2290649088, 22872, 2184, 2290649088, 22872, 2184, 2290649088, 22872, 2184, 2290649088, 24064, 134217728, 0, 24068, 134217728, 0, 24072, 134217728, 0, 24080, 134217728, 0, 24084, 134217728, 0, 24088, 134217728, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
