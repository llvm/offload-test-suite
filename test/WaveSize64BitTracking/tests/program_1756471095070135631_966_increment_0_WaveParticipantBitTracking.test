#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 2)) {
        if ((WaveGetLaneIndex() >= 63)) {
          result = (result + WaveActiveMax(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 47)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (21 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 54))) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (36 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 9))) {
        if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 55))) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (70 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 57))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (87 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (96 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (101 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (111 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 10)) {
            if ((WaveGetLaneIndex() < 10)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (124 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
              if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 35))) {
                result = (result + WaveActiveSum(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((151 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if ((WaveGetLaneIndex() < 2)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (158 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 59))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (177 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 4)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (187 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (196 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (201 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 3: {
              if ((WaveGetLaneIndex() < 20)) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (208 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (217 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 52))) {
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 49))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (235 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 45))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((259 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 49))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (270 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (275 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (279 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if ((WaveGetLaneIndex() >= 46)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (314 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 63)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (310 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 19))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (306 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 264
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2304, 0, 4194304, 5568, 0, 33554432, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6144, 272696336, 68174084, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 6464, 613566756, 1227133513, 7104, 73, 0, 7104, 73, 0, 7104, 73, 0, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 17600, 613566756, 1227133513, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 20096, 0, 4294950912, 19584, 17301505, 0, 19584, 17301505, 0, 19584, 17301505, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
