#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() >= 53)) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((24 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 22))) {
          if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 38))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((58 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 63))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((83 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 61)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((90 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          continue;
        }
      }
      break;
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (103 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 42))) {
              result = (result + WaveActiveSum(6));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((121 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 42))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((134 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (139 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
  case 3: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() < 21)) {
          if ((WaveGetLaneIndex() < 25)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((157 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 54))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((172 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i2 == 1)) {
          continue;
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (185 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (194 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (210 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((227 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (236 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 44))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((264 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
          if ((WaveGetLaneIndex() == 15)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((279 << 6) | (i4 << 4)) | (i5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (288 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (293 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 528
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1536, 0, 572522496, 1536, 0, 572522496, 1536, 0, 572522496, 1552, 0, 572522496, 1552, 0, 572522496, 1552, 0, 572522496, 1568, 0, 572522496, 1568, 0, 572522496, 1568, 0, 572522496, 5760, 0, 536870912, 5776, 0, 536870912, 5792, 0, 536870912, 6592, 64, 0, 7760, 1024, 67125248, 7760, 1024, 67125248, 7760, 1024, 67125248, 7776, 1024, 67125248, 7776, 1024, 67125248, 7776, 1024, 67125248, 8592, 0, 67125248, 8592, 0, 67125248, 8608, 0, 67125248, 8608, 0, 67125248, 8896, 67125252, 1074004032, 8896, 67125252, 1074004032, 8896, 67125252, 1074004032, 8896, 67125252, 1074004032, 8896, 67125252, 1074004032, 8896, 67125252, 1074004032, 10048, 838860, 0, 10048, 838860, 0, 10048, 838860, 0, 10048, 838860, 0, 10048, 838860, 0, 10048, 838860, 0, 10048, 838860, 0, 10048, 838860, 0, 10048, 838860, 0, 10048, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 10064, 838860, 0, 11008, 0, 4194304, 11024, 0, 4194304, 11840, 73, 0, 11840, 73, 0, 11840, 73, 0, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 12416, 1363481681, 340870420, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14528, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 14544, 2863311530, 2863311530, 17856, 32768, 0, 17860, 32768, 0, 17872, 32768, 0, 17876, 32768, 0, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18432, 272696336, 68174084, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513, 18752, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
