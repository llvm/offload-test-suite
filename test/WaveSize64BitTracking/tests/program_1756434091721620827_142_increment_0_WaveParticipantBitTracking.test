#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 41)) {
        if ((WaveGetLaneIndex() >= 47)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 58))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((33 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 56))) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((44 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((70 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            continue;
          }
        }
      }
      break;
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (83 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 45))) {
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 59))) {
              result = (result + WaveActiveMin(7));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (101 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 52))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (112 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 30)) {
            result = (result + WaveActiveMin(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (119 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (124 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (128 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (138 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (147 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (152 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
        for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 58))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((179 << 6) | (i3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 60))) {
            if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 58))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((205 << 6) | (i3 << 4)) | (i4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((214 << 6) | (i3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((i3 == 1)) {
        break;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (221 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 420
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 0, 2454257664, 768, 0, 2454257664, 768, 0, 2454257664, 768, 0, 2454257664, 768, 0, 2454257664, 768, 0, 2454257664, 2112, 0, 2415919104, 2112, 0, 2415919104, 2128, 0, 2415919104, 2128, 0, 2415919104, 2144, 0, 2415919104, 2144, 0, 2415919104, 2816, 0, 2449473536, 2816, 0, 2449473536, 2816, 0, 2449473536, 2832, 0, 2449473536, 2832, 0, 2449473536, 2832, 0, 2449473536, 2848, 0, 2449473536, 2848, 0, 2449473536, 2848, 0, 2449473536, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4496, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4500, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4504, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4512, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4516, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 4520, 272696336, 68174084, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 8832, 17, 0, 8832, 17, 0, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 9728, 1145324612, 1145324612, 11456, 136, 2281701376, 11456, 136, 2281701376, 11456, 136, 2281701376, 11456, 136, 2281701376, 11460, 136, 2281701376, 11460, 136, 2281701376, 11460, 136, 2281701376, 11460, 136, 2281701376, 11472, 136, 2281701376, 11472, 136, 2281701376, 11472, 136, 2281701376, 11472, 136, 2281701376, 11476, 136, 2281701376, 11476, 136, 2281701376, 11476, 136, 2281701376, 11476, 136, 2281701376, 13120, 8, 0, 13124, 8, 0, 13136, 8, 0, 13140, 8, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
