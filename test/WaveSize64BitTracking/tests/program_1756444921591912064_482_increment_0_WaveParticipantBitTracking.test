#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 34)) {
        if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 33))) {
          if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 61))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (31 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 4)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (41 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (50 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (55 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 3: {
              if ((WaveGetLaneIndex() < 20)) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (62 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (66 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 46))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (81 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 45)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (88 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (97 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 54))) {
        if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 53))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (134 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 2)) {
          counter0 = (counter0 + 1);
          if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 62))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((160 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 16))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (183 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 42))) {
        result = (result + WaveActiveMin(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (194 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 56))) {
        result = (result + WaveActiveMin(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (205 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (214 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (219 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 321
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5632, 0, 1431650304, 5632, 0, 1431650304, 5632, 0, 1431650304, 5632, 0, 1431650304, 5632, 0, 1431650304, 5632, 0, 1431650304, 5632, 0, 1431650304, 5632, 0, 1431650304, 5632, 0, 1431650304, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 6208, 1431655765, 1431655765, 10256, 16777216, 0, 10272, 16777216, 0, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 12416, 4681, 2450072576, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13120, 299593, 2449473536, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 13696, 1363481681, 340870420, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513, 14016, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
