#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 9)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((17 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() < 28)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((32 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 7)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((39 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
          if ((i1 == 1)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() == 57)) {
          result = (result + WaveActiveMax(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((52 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (61 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (71 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (80 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 42))) {
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 42))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (98 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 58))) {
          if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 62))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (132 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 47))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (143 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (150 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (160 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (169 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (174 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (181 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 345
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2048, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2052, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2064, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2068, 89478485, 0, 2496, 85, 0, 2496, 85, 0, 2496, 85, 0, 2496, 85, 0, 2500, 85, 0, 2500, 85, 0, 2500, 85, 0, 2500, 85, 0, 2512, 85, 0, 2512, 85, 0, 2512, 85, 0, 2512, 85, 0, 2516, 85, 0, 2516, 85, 0, 2516, 85, 0, 2516, 85, 0, 4544, 17, 0, 4544, 17, 0, 6272, 4, 1145324544, 6272, 4, 1145324544, 6272, 4, 1145324544, 6272, 4, 1145324544, 6272, 4, 1145324544, 6272, 4, 1145324544, 6272, 4, 1145324544, 8448, 4, 0, 9152, 4, 1145307136, 9152, 4, 1145307136, 9152, 4, 1145307136, 9152, 4, 1145307136, 9152, 4, 1145307136, 9600, 559240, 0, 9600, 559240, 0, 9600, 559240, 0, 9600, 559240, 0, 9600, 559240, 0, 10240, 17, 0, 10240, 17, 0, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11136, 1145324612, 1145324612, 11584, 559240, 0, 11584, 559240, 0, 11584, 559240, 0, 11584, 559240, 0, 11584, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
