#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 54))) {
    if (((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 41))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (25 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() < 16)) {
        result = (result + WaveActiveMax(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((39 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() >= 32)) {
          result = (result + WaveActiveSum(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((54 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 8)) {
          if ((WaveGetLaneIndex() < 5)) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((64 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i1 == 1)) {
          continue;
        }
      }
    }
    if (((WaveGetLaneIndex() == 26) || (WaveGetLaneIndex() == 34))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (78 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (109 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 53))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (105 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 1)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (99 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 159
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2512, 32768, 0, 2528, 32768, 0, 3472, 0, 4198400, 3472, 0, 4198400, 3476, 0, 4198400, 3476, 0, 4198400, 3480, 0, 4198400, 3480, 0, 4198400, 3488, 0, 4198400, 3488, 0, 4198400, 3492, 0, 4198400, 3492, 0, 4198400, 3496, 0, 4198400, 3496, 0, 4198400, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6976, 1431655765, 1431655765, 6720, 2, 2862612480, 6720, 2, 2862612480, 6720, 2, 2862612480, 6720, 2, 2862612480, 6720, 2, 2862612480, 6720, 2, 2862612480, 6720, 2, 2862612480]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
