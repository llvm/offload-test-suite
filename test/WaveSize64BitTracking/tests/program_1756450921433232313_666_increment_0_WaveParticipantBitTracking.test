#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (12 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (21 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (26 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (40 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (50 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (59 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (63 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (74 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (83 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 58)) {
            if ((WaveGetLaneIndex() == 36)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (96 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 25)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (105 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (114 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (119 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (123 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (132 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 54))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((161 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() == 14)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((175 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 55))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((186 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (195 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (200 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 43))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((227 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 52))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((238 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i2 == 2)) {
          break;
        }
      }
      break;
    }
  }
  if ((WaveGetLaneIndex() >= 58)) {
    if ((WaveGetLaneIndex() < 30)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (251 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter4 = 0;
    while ((counter4 < 2)) {
      counter4 = (counter4 + 1);
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 4))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((277 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((294 << 6) | (counter4 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((303 << 6) | (counter4 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((counter4 == 1)) {
        break;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 564
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 65, 0, 768, 65, 0, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1344, 272696336, 68174084, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 1664, 68174084, 1090785345, 10320, 65536, 256, 10320, 65536, 256, 10336, 65536, 256, 10336, 65536, 256, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 12800, 1717986918, 1717986918, 14528, 2184, 2290649088, 14528, 2184, 2290649088, 14528, 2184, 2290649088, 14528, 2184, 2290649088, 14528, 2184, 2290649088, 14528, 2184, 2290649088, 14528, 2184, 2290649088, 14528, 2184, 2290649088, 14528, 2184, 2290649088, 14532, 2184, 2290649088, 14532, 2184, 2290649088, 14532, 2184, 2290649088, 14532, 2184, 2290649088, 14532, 2184, 2290649088, 14532, 2184, 2290649088, 14532, 2184, 2290649088, 14532, 2184, 2290649088, 14532, 2184, 2290649088, 14536, 2184, 2290649088, 14536, 2184, 2290649088, 14536, 2184, 2290649088, 14536, 2184, 2290649088, 14536, 2184, 2290649088, 14536, 2184, 2290649088, 14536, 2184, 2290649088, 14536, 2184, 2290649088, 14536, 2184, 2290649088, 14544, 2184, 2290649088, 14544, 2184, 2290649088, 14544, 2184, 2290649088, 14544, 2184, 2290649088, 14544, 2184, 2290649088, 14544, 2184, 2290649088, 14544, 2184, 2290649088, 14544, 2184, 2290649088, 14544, 2184, 2290649088, 14548, 2184, 2290649088, 14548, 2184, 2290649088, 14548, 2184, 2290649088, 14548, 2184, 2290649088, 14548, 2184, 2290649088, 14548, 2184, 2290649088, 14548, 2184, 2290649088, 14548, 2184, 2290649088, 14548, 2184, 2290649088, 14552, 2184, 2290649088, 14552, 2184, 2290649088, 14552, 2184, 2290649088, 14552, 2184, 2290649088, 14552, 2184, 2290649088, 14552, 2184, 2290649088, 14552, 2184, 2290649088, 14552, 2184, 2290649088, 14552, 2184, 2290649088, 14560, 2184, 2290649088, 14560, 2184, 2290649088, 14560, 2184, 2290649088, 14560, 2184, 2290649088, 14560, 2184, 2290649088, 14560, 2184, 2290649088, 14560, 2184, 2290649088, 14560, 2184, 2290649088, 14560, 2184, 2290649088, 14564, 2184, 2290649088, 14564, 2184, 2290649088, 14564, 2184, 2290649088, 14564, 2184, 2290649088, 14564, 2184, 2290649088, 14564, 2184, 2290649088, 14564, 2184, 2290649088, 14564, 2184, 2290649088, 14564, 2184, 2290649088, 14568, 2184, 2290649088, 14568, 2184, 2290649088, 14568, 2184, 2290649088, 14568, 2184, 2290649088, 14568, 2184, 2290649088, 14568, 2184, 2290649088, 14568, 2184, 2290649088, 14568, 2184, 2290649088, 14568, 2184, 2290649088, 15232, 8, 2290089984, 15232, 8, 2290089984, 15232, 8, 2290089984, 15232, 8, 2290089984, 15236, 8, 2290089984, 15236, 8, 2290089984, 15236, 8, 2290089984, 15236, 8, 2290089984, 15240, 8, 2290089984, 15240, 8, 2290089984, 15240, 8, 2290089984, 15240, 8, 2290089984, 15248, 8, 2290089984, 15248, 8, 2290089984, 15248, 8, 2290089984, 15248, 8, 2290089984, 15252, 8, 2290089984, 15252, 8, 2290089984, 15252, 8, 2290089984, 15252, 8, 2290089984, 15256, 8, 2290089984, 15256, 8, 2290089984, 15256, 8, 2290089984, 15256, 8, 2290089984, 15264, 8, 2290089984, 15264, 8, 2290089984, 15264, 8, 2290089984, 15264, 8, 2290089984, 15268, 8, 2290089984, 15268, 8, 2290089984, 15268, 8, 2290089984, 15268, 8, 2290089984, 15272, 8, 2290089984, 15272, 8, 2290089984, 15272, 8, 2290089984, 15272, 8, 2290089984, 18832, 0, 2818572288, 18832, 0, 2818572288, 18832, 0, 2818572288, 18836, 0, 2818572288, 18836, 0, 2818572288, 18836, 0, 2818572288, 19408, 0, 1409286144, 19408, 0, 1409286144, 19408, 0, 1409286144, 19412, 0, 1409286144, 19412, 0, 1409286144, 19412, 0, 1409286144]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
