#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 62))) {
          result = (result + WaveActiveMax(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((21 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() >= 50)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((36 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 32)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((43 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 63))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((56 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 2)) {
          break;
        }
      }
    }
  case 1: {
      if ((((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 46))) {
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 7))) {
          result = (result + WaveActiveSum(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (101 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 56))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((132 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            break;
          }
        }
      } else {
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (145 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (154 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (159 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (166 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (175 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (179 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 9)) {
        if ((WaveGetLaneIndex() >= 32)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (192 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if ((WaveGetLaneIndex() == 39)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((207 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((221 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((230 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((i3 == 1)) {
            continue;
          }
        }
      } else {
      if (((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 59))) {
        if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 58))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (261 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((278 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 1)) {
            break;
          }
        }
        if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 54))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (292 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (301 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() == 49)) {
          if ((WaveGetLaneIndex() == 21)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (314 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 62))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (325 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter5 = 0;
        while ((counter5 < 2)) {
          counter5 = (counter5 + 1);
          if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 42))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((343 << 6) | (counter5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 47))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((354 << 6) | (counter5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter5 == 1)) {
            break;
          }
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 57))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (368 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() < 12)) {
        if ((WaveGetLaneIndex() >= 59)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (378 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 23)) {
          if ((WaveGetLaneIndex() == 24)) {
            result = (result + WaveActiveMin(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (388 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 41))) {
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 55))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (420 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (434 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (443 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  }
  break;
  }
  }
  if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 56))) {
    if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 47))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (461 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 23)) {
      if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 46))) {
        if ((WaveGetLaneIndex() >= 55)) {
          if ((WaveGetLaneIndex() >= 62)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (487 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
    if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 53))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (498 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1233
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1344, 1365, 1073741824, 1344, 1365, 1073741824, 1344, 1365, 1073741824, 1344, 1365, 1073741824, 1344, 1365, 1073741824, 1344, 1365, 1073741824, 1344, 1365, 1073741824, 1360, 1365, 1073741824, 1360, 1365, 1073741824, 1360, 1365, 1073741824, 1360, 1365, 1073741824, 1360, 1365, 1073741824, 1360, 1365, 1073741824, 1360, 1365, 1073741824, 1376, 1365, 1073741824, 1376, 1365, 1073741824, 1376, 1365, 1073741824, 1376, 1365, 1073741824, 1376, 1365, 1073741824, 1376, 1365, 1073741824, 1376, 1365, 1073741824, 2304, 0, 1431568384, 2304, 0, 1431568384, 2304, 0, 1431568384, 2304, 0, 1431568384, 2304, 0, 1431568384, 2304, 0, 1431568384, 2304, 0, 1431568384, 2308, 0, 1431568384, 2308, 0, 1431568384, 2308, 0, 1431568384, 2308, 0, 1431568384, 2308, 0, 1431568384, 2308, 0, 1431568384, 2308, 0, 1431568384, 2312, 0, 1431568384, 2312, 0, 1431568384, 2312, 0, 1431568384, 2312, 0, 1431568384, 2312, 0, 1431568384, 2312, 0, 1431568384, 2312, 0, 1431568384, 2320, 0, 1431568384, 2320, 0, 1431568384, 2320, 0, 1431568384, 2320, 0, 1431568384, 2320, 0, 1431568384, 2320, 0, 1431568384, 2320, 0, 1431568384, 2324, 0, 1431568384, 2324, 0, 1431568384, 2324, 0, 1431568384, 2324, 0, 1431568384, 2324, 0, 1431568384, 2324, 0, 1431568384, 2324, 0, 1431568384, 2328, 0, 1431568384, 2328, 0, 1431568384, 2328, 0, 1431568384, 2328, 0, 1431568384, 2328, 0, 1431568384, 2328, 0, 1431568384, 2328, 0, 1431568384, 2336, 0, 1431568384, 2336, 0, 1431568384, 2336, 0, 1431568384, 2336, 0, 1431568384, 2336, 0, 1431568384, 2336, 0, 1431568384, 2336, 0, 1431568384, 2340, 0, 1431568384, 2340, 0, 1431568384, 2340, 0, 1431568384, 2340, 0, 1431568384, 2340, 0, 1431568384, 2340, 0, 1431568384, 2340, 0, 1431568384, 2344, 0, 1431568384, 2344, 0, 1431568384, 2344, 0, 1431568384, 2344, 0, 1431568384, 2344, 0, 1431568384, 2344, 0, 1431568384, 2344, 0, 1431568384, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2752, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2756, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2760, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2768, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2772, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2776, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2784, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2788, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 2792, 0, 1431655765, 3584, 5461, 0, 3584, 5461, 0, 3584, 5461, 0, 3584, 5461, 0, 3584, 5461, 0, 3584, 5461, 0, 3584, 5461, 0, 3600, 5461, 0, 3600, 5461, 0, 3600, 5461, 0, 3600, 5461, 0, 3600, 5461, 0, 3600, 5461, 0, 3600, 5461, 0, 3616, 5461, 0, 3616, 5461, 0, 3616, 5461, 0, 3616, 5461, 0, 3616, 5461, 0, 3616, 5461, 0, 3616, 5461, 0, 9280, 17, 0, 9280, 17, 0, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 9856, 286330897, 286327057, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10176, 2004317815, 2004297591, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 10624, 1048319, 0, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 11200, 1431655509, 1431635285, 14144, 8, 0, 14160, 8, 0, 14176, 8, 0, 14720, 8, 0, 14736, 8, 0, 14752, 8, 0, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 19264, 272696336, 68174084, 27776, 0, 16777216, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 29504, 63, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080, 31872, 16383, 4278190080]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
