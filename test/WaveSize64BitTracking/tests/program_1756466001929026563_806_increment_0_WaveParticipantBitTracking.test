#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (15 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if (((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 0))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((42 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 38))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((60 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 52))) {
          if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 60))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((78 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 46))) {
            result = (result + WaveActiveSum(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((89 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 51))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((106 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 38))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((121 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 1)) {
        break;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveSum(10));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (133 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((WaveGetLaneIndex() == 3)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (198 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 48))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (192 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 44))) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (188 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 32))) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (184 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 60)) {
    result = (result + WaveActiveMin(5));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (180 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 342
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2688, 2621440, 33554432, 2688, 2621440, 33554432, 2688, 2621440, 33554432, 2704, 2621440, 33554432, 2704, 2621440, 33554432, 2704, 2621440, 33554432, 4996, 10, 2684354560, 4996, 10, 2684354560, 4996, 10, 2684354560, 4996, 10, 2684354560, 5000, 10, 2684354560, 5000, 10, 2684354560, 5000, 10, 2684354560, 5000, 10, 2684354560, 5004, 10, 2684354560, 5004, 10, 2684354560, 5004, 10, 2684354560, 5004, 10, 2684354560, 5012, 10, 2684354560, 5012, 10, 2684354560, 5012, 10, 2684354560, 5012, 10, 2684354560, 5016, 10, 2684354560, 5016, 10, 2684354560, 5016, 10, 2684354560, 5016, 10, 2684354560, 5020, 10, 2684354560, 5020, 10, 2684354560, 5020, 10, 2684354560, 5020, 10, 2684354560, 5700, 0, 2862612480, 5700, 0, 2862612480, 5700, 0, 2862612480, 5700, 0, 2862612480, 5700, 0, 2862612480, 5700, 0, 2862612480, 5704, 0, 2862612480, 5704, 0, 2862612480, 5704, 0, 2862612480, 5704, 0, 2862612480, 5704, 0, 2862612480, 5704, 0, 2862612480, 5708, 0, 2862612480, 5708, 0, 2862612480, 5708, 0, 2862612480, 5708, 0, 2862612480, 5708, 0, 2862612480, 5708, 0, 2862612480, 5716, 0, 2862612480, 5716, 0, 2862612480, 5716, 0, 2862612480, 5716, 0, 2862612480, 5716, 0, 2862612480, 5716, 0, 2862612480, 5720, 0, 2862612480, 5720, 0, 2862612480, 5720, 0, 2862612480, 5720, 0, 2862612480, 5720, 0, 2862612480, 5720, 0, 2862612480, 5724, 0, 2862612480, 5724, 0, 2862612480, 5724, 0, 2862612480, 5724, 0, 2862612480, 5724, 0, 2862612480, 5724, 0, 2862612480, 6788, 2097152, 524288, 6788, 2097152, 524288, 6792, 2097152, 524288, 6792, 2097152, 524288, 6796, 2097152, 524288, 6796, 2097152, 524288, 6804, 2097152, 524288, 6804, 2097152, 524288, 6808, 2097152, 524288, 6808, 2097152, 524288, 6812, 2097152, 524288, 6812, 2097152, 524288, 12672, 8, 0, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12288, 65527, 4294901760, 12032, 4194304, 4096, 12032, 4194304, 4096, 11776, 0, 33, 11776, 0, 33]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
