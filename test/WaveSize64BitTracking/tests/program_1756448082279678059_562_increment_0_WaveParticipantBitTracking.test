#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (19 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (28 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (33 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 50))) {
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 53))) {
          result = (result + WaveActiveMax(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (63 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 2)) {
          counter0 = (counter0 + 1);
          if ((WaveGetLaneIndex() >= 33)) {
            result = (result + WaveActiveMax(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((77 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 56))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (92 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 45))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((110 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 48))) {
          if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 46))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((140 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 50))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((151 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 42))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((162 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 63))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((173 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter1 == 2)) {
        break;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (189 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter2 = 0;
          while ((counter2 < 2)) {
            counter2 = (counter2 + 1);
            if ((WaveGetLaneIndex() == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((203 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter2 == 1)) {
              break;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (211 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (220 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 54))) {
        if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 50))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (250 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 53)) {
          if ((WaveGetLaneIndex() < 6)) {
            result = (result + WaveActiveMin(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (260 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 37))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (271 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 43))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((297 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 9))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (318 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (322 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  uint counter4 = 0;
  while ((counter4 < 2)) {
    counter4 = (counter4 + 1);
    if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 55))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((340 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 51))) {
      if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 51))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((372 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 34))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((385 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 53))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((398 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 516
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 2112, 537002016, 2097664, 2112, 537002016, 2097664, 2112, 537002016, 2097664, 2112, 537002016, 2097664, 2112, 537002016, 2097664, 4944, 0, 262208, 4944, 0, 262208, 4960, 0, 262208, 4960, 0, 262208, 7056, 2184, 2290647040, 7056, 2184, 2290647040, 7056, 2184, 2290647040, 7056, 2184, 2290647040, 7056, 2184, 2290647040, 7056, 2184, 2290647040, 7056, 2184, 2290647040, 7056, 2184, 2290647040, 7072, 2184, 2290647040, 7072, 2184, 2290647040, 7072, 2184, 2290647040, 7072, 2184, 2290647040, 7072, 2184, 2290647040, 7072, 2184, 2290647040, 7072, 2184, 2290647040, 7072, 2184, 2290647040, 9680, 34824, 2290614272, 9680, 34824, 2290614272, 9680, 34824, 2290614272, 9680, 34824, 2290614272, 9680, 34824, 2290614272, 9680, 34824, 2290614272, 9680, 34824, 2290614272, 9696, 34824, 2290614272, 9696, 34824, 2290614272, 9696, 34824, 2290614272, 9696, 34824, 2290614272, 9696, 34824, 2290614272, 9696, 34824, 2290614272, 9696, 34824, 2290614272, 10384, 8, 2290649088, 10384, 8, 2290649088, 10384, 8, 2290649088, 10384, 8, 2290649088, 10384, 8, 2290649088, 10384, 8, 2290649088, 10384, 8, 2290649088, 10400, 8, 2290649088, 10400, 8, 2290649088, 10400, 8, 2290649088, 10400, 8, 2290649088, 10400, 8, 2290649088, 10400, 8, 2290649088, 10400, 8, 2290649088, 11088, 8, 2147483648, 11088, 8, 2147483648, 11104, 8, 2147483648, 11104, 8, 2147483648, 12096, 73, 0, 12096, 73, 0, 12096, 73, 0, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 14080, 272696336, 68174084, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21776, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 21792, 4095, 4286578688, 23824, 2147483648, 524288, 23824, 2147483648, 524288, 23840, 2147483648, 524288, 23840, 2147483648, 524288, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25488, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144, 25504, 65535, 4292870144]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
