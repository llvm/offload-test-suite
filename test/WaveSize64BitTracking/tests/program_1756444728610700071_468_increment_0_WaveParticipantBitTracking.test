#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (30 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (46 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (56 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (65 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (69 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (78 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() >= 58)) {
    result = (result + WaveActiveSum(10));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (85 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    if ((WaveGetLaneIndex() >= 55)) {
      if ((WaveGetLaneIndex() < 22)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((102 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 19)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((109 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 46))) {
      result = (result + WaveActiveMin(7));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((128 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 8))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((151 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((160 << 6) | (counter0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if ((WaveGetLaneIndex() >= 38)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (167 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 43))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (227 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 46))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (223 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 52))) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (217 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 54))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (213 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 657
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1152, 286331153, 286331153, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 5440, 0, 1409286144, 5440, 0, 1409286144, 5440, 0, 1409286144, 8208, 4, 17472, 8208, 4, 17472, 8208, 4, 17472, 8208, 4, 17472, 8224, 4, 17472, 8224, 4, 17472, 8224, 4, 17472, 8224, 4, 17472, 8240, 4, 17472, 8240, 4, 17472, 8240, 4, 17472, 8240, 4, 17472, 9680, 16777472, 4096, 9680, 16777472, 4096, 9680, 16777472, 4096, 9696, 16777472, 4096, 9696, 16777472, 4096, 9696, 16777472, 4096, 9712, 16777472, 4096, 9712, 16777472, 4096, 9712, 16777472, 4096, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10256, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10272, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10288, 1431655765, 1431655765, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 10688, 0, 1431655744, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 14528, 1048575, 4294965248, 13888, 0, 8]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
