#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (13 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((32 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 1)) {
        continue;
      }
      if ((i0 == 1)) {
        break;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (47 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (57 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if ((WaveGetLaneIndex() == 53)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((79 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 34)) {
            if ((WaveGetLaneIndex() >= 48)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((89 << 6) | (counter1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((WaveGetLaneIndex() == 22) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 9))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((104 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 39))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((119 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (124 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 312
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3648, 73, 0, 3648, 73, 0, 3648, 73, 0, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5712, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5716, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5720, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5728, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5732, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 5736, 0, 3067805696, 6672, 4194816, 0, 6672, 4194816, 0, 6676, 4194816, 0, 6676, 4194816, 0, 6680, 4194816, 0, 6680, 4194816, 0, 6688, 4194816, 0, 6688, 4194816, 0, 6692, 4194816, 0, 6692, 4194816, 0, 6696, 4194816, 0, 6696, 4194816, 0, 7632, 0, 128, 7648, 0, 128, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513, 7936, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
