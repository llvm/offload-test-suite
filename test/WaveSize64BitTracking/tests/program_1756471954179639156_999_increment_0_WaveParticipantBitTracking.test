#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 63))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((29 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 45))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((40 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter0 == 1)) {
          break;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (52 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if ((WaveGetLaneIndex() < 6)) {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (64 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (74 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (83 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (88 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (92 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
        if ((WaveGetLaneIndex() >= 44)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (99 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (109 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (118 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (122 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 59))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (145 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (155 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (164 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (169 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (176 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if ((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 39))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (238 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 59))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (232 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 53))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (226 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (220 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 501
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1876, 1, 2147483648, 1876, 1, 2147483648, 1880, 1, 2147483648, 1880, 1, 2147483648, 1884, 1, 2147483648, 1884, 1, 2147483648, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2580, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2584, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 2588, 37449, 2454265856, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 3328, 1363481681, 340870420, 4096, 63, 0, 4096, 63, 0, 4096, 63, 0, 4096, 63, 0, 4096, 63, 0, 4096, 63, 0, 4736, 9, 0, 4736, 9, 0, 5312, 16, 0, 5632, 36, 0, 5632, 36, 0, 6976, 64, 0, 9280, 16777280, 1207959616, 9280, 16777280, 1207959616, 9280, 16777280, 1207959616, 9280, 16777280, 1207959616, 9280, 16777280, 1207959616, 9920, 17, 0, 9920, 17, 0, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 10816, 1717986918, 1717986918, 11264, 559240, 0, 11264, 559240, 0, 11264, 559240, 0, 11264, 559240, 0, 11264, 559240, 0, 15232, 262144, 132, 15232, 262144, 132, 15232, 262144, 132, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14848, 32767, 4160749568, 14464, 524288, 2101248, 14464, 524288, 2101248, 14464, 524288, 2101248, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385, 14080, 1431371776, 89474385]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
