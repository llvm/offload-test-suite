#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((18 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 8))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((47 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 63))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((62 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (74 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (79 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() == 7)) {
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if ((WaveGetLaneIndex() == 61)) {
            result = (result + WaveActiveMax(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((97 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (107 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() >= 42)) {
        if ((WaveGetLaneIndex() >= 62)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (117 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((141 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((150 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((161 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 46))) {
          result = (result + WaveActiveMin(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((172 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i3 == 1)) {
          continue;
        }
      }
      if ((WaveGetLaneIndex() < 21)) {
        result = (result + WaveActiveMax(10));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (182 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (186 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if ((((WaveGetLaneIndex() == 22) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 10))) {
    if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 37))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (220 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter4 = 0;
    while ((counter4 < 3)) {
      counter4 = (counter4 + 1);
      if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 58))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((240 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
        if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 49))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((261 << 6) | (counter4 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 46))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((272 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 47))) {
      result = (result + WaveActiveMin(5));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (295 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 666
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1168, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1184, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 1200, 286331153, 286331153, 3024, 257, 0, 3024, 257, 0, 3028, 257, 0, 3028, 257, 0, 3032, 257, 0, 3032, 257, 0, 3040, 257, 0, 3040, 257, 0, 3044, 257, 0, 3044, 257, 0, 3048, 257, 0, 3048, 257, 0, 3056, 257, 0, 3056, 257, 0, 3060, 257, 0, 3060, 257, 0, 3064, 257, 0, 3064, 257, 0, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 4736, 286331153, 286331153, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 5056, 1145324612, 1145324612, 6848, 85, 0, 6848, 85, 0, 6848, 85, 0, 6848, 85, 0, 7488, 0, 2147483648, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9024, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9040, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9056, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9600, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9616, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 9632, 0, 2863310848, 11008, 0, 2863300608, 11008, 0, 2863300608, 11008, 0, 2863300608, 11008, 0, 2863300608, 11008, 0, 2863300608, 11008, 0, 2863300608, 11008, 0, 2863300608, 11008, 0, 2863300608, 11008, 0, 2863300608, 11024, 0, 2863300608, 11024, 0, 2863300608, 11024, 0, 2863300608, 11024, 0, 2863300608, 11024, 0, 2863300608, 11024, 0, 2863300608, 11024, 0, 2863300608, 11024, 0, 2863300608, 11024, 0, 2863300608, 11040, 0, 2863300608, 11040, 0, 2863300608, 11040, 0, 2863300608, 11040, 0, 2863300608, 11040, 0, 2863300608, 11040, 0, 2863300608, 11040, 0, 2863300608, 11040, 0, 2863300608, 11040, 0, 2863300608, 14080, 1024, 8388608, 14080, 1024, 8388608, 16720, 1024, 8388608, 16720, 1024, 8388608, 16724, 1024, 8388608, 16724, 1024, 8388608, 16728, 1024, 8388608, 16728, 1024, 8388608, 16736, 1024, 8388608, 16736, 1024, 8388608, 16740, 1024, 8388608, 16740, 1024, 8388608, 16744, 1024, 8388608, 16744, 1024, 8388608, 16752, 1024, 8388608, 16752, 1024, 8388608, 16756, 1024, 8388608, 16756, 1024, 8388608, 16760, 1024, 8388608, 16760, 1024, 8388608, 17424, 1024, 8388608, 17424, 1024, 8388608, 17440, 1024, 8388608, 17440, 1024, 8388608, 17456, 1024, 8388608, 17456, 1024, 8388608]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
