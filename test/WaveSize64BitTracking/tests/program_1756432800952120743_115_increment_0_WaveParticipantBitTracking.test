#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 45))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((23 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 46)) {
          if ((WaveGetLaneIndex() == 31)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((33 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
            if ((WaveGetLaneIndex() == 47)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((48 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i1 == 2)) {
              break;
            }
          }
          if ((WaveGetLaneIndex() == 16)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((58 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 49))) {
          result = (result + WaveActiveMax(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((69 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        uint counter3 = 0;
        while ((counter3 < 3)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((93 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 8)) {
            if ((WaveGetLaneIndex() < 22)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((103 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 57))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((122 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 28) || (WaveGetLaneIndex() == 55))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((133 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((142 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i2 == 1)) {
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (150 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (163 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (172 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 42))) {
            if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 60))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (192 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 50))) {
        if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 45))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (210 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter4 = 0;
        while ((counter4 < 3)) {
          counter4 = (counter4 + 1);
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 49))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((230 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if ((WaveGetLaneIndex() == 52)) {
        if ((WaveGetLaneIndex() == 49)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (240 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter5 = 0;
        while ((counter5 < 2)) {
          counter5 = (counter5 + 1);
          if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 18))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((262 << 6) | (counter5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 3: {
      uint counter6 = 0;
      while ((counter6 < 2)) {
        counter6 = (counter6 + 1);
        for (uint i7 = 0; (i7 < 3); i7 = (i7 + 1)) {
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 63))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((290 << 6) | (counter6 << 4)) | (i7 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i7 == 1)) {
            continue;
          }
        }
        if ((WaveGetLaneIndex() >= 62)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((300 << 6) | (counter6 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (304 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 900
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1472, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1488, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 1504, 37449, 2454265856, 4416, 585, 2454192128, 4416, 585, 2454192128, 4416, 585, 2454192128, 4416, 585, 2454192128, 4416, 585, 2454192128, 4416, 585, 2454192128, 4416, 585, 2454192128, 4416, 585, 2454192128, 4416, 585, 2454192128, 4432, 585, 2454192128, 4432, 585, 2454192128, 4432, 585, 2454192128, 4432, 585, 2454192128, 4432, 585, 2454192128, 4432, 585, 2454192128, 4432, 585, 2454192128, 4432, 585, 2454192128, 4432, 585, 2454192128, 4448, 585, 2454192128, 4448, 585, 2454192128, 4448, 585, 2454192128, 4448, 585, 2454192128, 4448, 585, 2454192128, 4448, 585, 2454192128, 4448, 585, 2454192128, 4448, 585, 2454192128, 4448, 585, 2454192128, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5956, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5960, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5964, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5972, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5976, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 5980, 272696336, 68174084, 6596, 146, 0, 6596, 146, 0, 6596, 146, 0, 6600, 146, 0, 6600, 146, 0, 6600, 146, 0, 6604, 146, 0, 6604, 146, 0, 6604, 146, 0, 6612, 146, 0, 6612, 146, 0, 6612, 146, 0, 6616, 146, 0, 6616, 146, 0, 6616, 146, 0, 6620, 146, 0, 6620, 146, 0, 6620, 146, 0, 7812, 268435456, 32, 7812, 268435456, 32, 7816, 268435456, 32, 7816, 268435456, 32, 7820, 268435456, 32, 7820, 268435456, 32, 7828, 268435456, 32, 7828, 268435456, 32, 7832, 268435456, 32, 7832, 268435456, 32, 7836, 268435456, 32, 7836, 268435456, 32, 8516, 268435456, 8388608, 8516, 268435456, 8388608, 8520, 268435456, 8388608, 8520, 268435456, 8388608, 8524, 268435456, 8388608, 8524, 268435456, 8388608, 8532, 268435456, 8388608, 8532, 268435456, 8388608, 8536, 268435456, 8388608, 8536, 268435456, 8388608, 8540, 268435456, 8388608, 8540, 268435456, 8388608, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9092, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9096, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9100, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9108, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9112, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9116, 2181570690, 545392672, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 9600, 613566756, 1227133513, 10432, 1, 0, 11008, 268501008, 1048832, 11008, 268501008, 1048832, 11008, 268501008, 1048832, 11008, 268501008, 1048832, 11008, 268501008, 1048832, 13440, 8738, 572522496, 13440, 8738, 572522496, 13440, 8738, 572522496, 13440, 8738, 572522496, 13440, 8738, 572522496, 13440, 8738, 572522496, 13440, 8738, 572522496, 14736, 2, 572522496, 14736, 2, 572522496, 14736, 2, 572522496, 14736, 2, 572522496, 14752, 2, 572522496, 14752, 2, 572522496, 14752, 2, 572522496, 14752, 2, 572522496, 14768, 2, 572522496, 14768, 2, 572522496, 14768, 2, 572522496, 14768, 2, 572522496, 18576, 136, 2147483648, 18576, 136, 2147483648, 18576, 136, 2147483648, 18580, 136, 2147483648, 18580, 136, 2147483648, 18580, 136, 2147483648, 18584, 136, 2147483648, 18584, 136, 2147483648, 18584, 136, 2147483648, 18592, 136, 2147483648, 18592, 136, 2147483648, 18592, 136, 2147483648, 18596, 136, 2147483648, 18596, 136, 2147483648, 18596, 136, 2147483648, 18600, 136, 2147483648, 18600, 136, 2147483648, 18600, 136, 2147483648, 19216, 0, 2147483648, 19232, 0, 2147483648]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
