#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 56))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((29 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 59))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((40 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 62)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((47 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (56 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (61 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (71 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((89 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 3)) {
          counter3 = (counter3 + 1);
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((106 << 6) | (counter2 << 4)) | (counter3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((115 << 6) | (counter2 << 4)) | (counter3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((119 << 6) | (counter2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if ((WaveGetLaneIndex() < 18)) {
            result = (result + WaveActiveMin(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((126 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter3 == 2)) {
            break;
          }
        }
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (134 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 972
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1856, 585, 2449473536, 1856, 585, 2449473536, 1856, 585, 2449473536, 1856, 585, 2449473536, 1856, 585, 2449473536, 1856, 585, 2449473536, 1856, 585, 2449473536, 1860, 585, 2449473536, 1860, 585, 2449473536, 1860, 585, 2449473536, 1860, 585, 2449473536, 1860, 585, 2449473536, 1860, 585, 2449473536, 1860, 585, 2449473536, 1872, 585, 2449473536, 1872, 585, 2449473536, 1872, 585, 2449473536, 1872, 585, 2449473536, 1872, 585, 2449473536, 1872, 585, 2449473536, 1872, 585, 2449473536, 1876, 585, 2449473536, 1876, 585, 2449473536, 1876, 585, 2449473536, 1876, 585, 2449473536, 1876, 585, 2449473536, 1876, 585, 2449473536, 1876, 585, 2449473536, 1888, 585, 2449473536, 1888, 585, 2449473536, 1888, 585, 2449473536, 1888, 585, 2449473536, 1888, 585, 2449473536, 1888, 585, 2449473536, 1888, 585, 2449473536, 1892, 585, 2449473536, 1892, 585, 2449473536, 1892, 585, 2449473536, 1892, 585, 2449473536, 1892, 585, 2449473536, 1892, 585, 2449473536, 1892, 585, 2449473536, 2560, 73, 2415919104, 2560, 73, 2415919104, 2560, 73, 2415919104, 2560, 73, 2415919104, 2560, 73, 2415919104, 2564, 73, 2415919104, 2564, 73, 2415919104, 2564, 73, 2415919104, 2564, 73, 2415919104, 2564, 73, 2415919104, 2576, 73, 2415919104, 2576, 73, 2415919104, 2576, 73, 2415919104, 2576, 73, 2415919104, 2576, 73, 2415919104, 2580, 73, 2415919104, 2580, 73, 2415919104, 2580, 73, 2415919104, 2580, 73, 2415919104, 2580, 73, 2415919104, 2592, 73, 2415919104, 2592, 73, 2415919104, 2592, 73, 2415919104, 2592, 73, 2415919104, 2592, 73, 2415919104, 2596, 73, 2415919104, 2596, 73, 2415919104, 2596, 73, 2415919104, 2596, 73, 2415919104, 2596, 73, 2415919104, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3584, 1363481681, 340870420, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 3904, 4294967295, 4294967295, 4544, 73, 0, 4544, 73, 0, 4544, 73, 0, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5712, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 5728, 219, 3067832320, 6804, 81, 0, 6804, 81, 0, 6804, 81, 0, 6808, 81, 0, 6808, 81, 0, 6808, 81, 0, 6820, 81, 0, 6820, 81, 0, 6820, 81, 0, 6824, 81, 0, 6824, 81, 0, 6824, 81, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8084, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8088, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8100, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8104, 112347, 0, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295, 8576, 4294967295, 4294967295]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
