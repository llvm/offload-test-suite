#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 45))) {
        if ((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 51))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (28 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() == 37)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((43 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 50))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (58 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (67 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((85 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 58))) {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 50))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((103 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((112 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  case 3: {
    if ((WaveGetLaneIndex() >= 61)) {
      if ((WaveGetLaneIndex() >= 43)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (122 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((138 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 15)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (145 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((WaveGetLaneIndex() == 19)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (152 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter3 = 0;
    while ((counter3 < 2)) {
      counter3 = (counter3 + 1);
      if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 54))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((170 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter3 == 1)) {
        break;
      }
    }
  }
  break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (183 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (192 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 465
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 4288, 286331153, 286331153, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5456, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5472, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 5488, 1, 2004316160, 6608, 7, 1946157056, 6608, 7, 1946157056, 6608, 7, 1946157056, 6608, 7, 1946157056, 6608, 7, 1946157056, 6608, 7, 1946157056, 6608, 7, 1946157056, 6624, 7, 1946157056, 6624, 7, 1946157056, 6624, 7, 1946157056, 6624, 7, 1946157056, 6624, 7, 1946157056, 6624, 7, 1946157056, 6624, 7, 1946157056, 6640, 7, 1946157056, 6640, 7, 1946157056, 6640, 7, 1946157056, 6640, 7, 1946157056, 6640, 7, 1946157056, 6640, 7, 1946157056, 6640, 7, 1946157056, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7184, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7200, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7216, 572662272, 35791394, 7808, 0, 3758096384, 7808, 0, 3758096384, 7808, 0, 3758096384, 8848, 0, 1073741824, 8864, 0, 1073741824, 8880, 0, 1073741824, 9728, 524288, 0, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 10896, 8191, 532676608, 11712, 85, 0, 11712, 85, 0, 11712, 85, 0, 11712, 85, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
