#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 45))) {
        if ((((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 48))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (52 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (62 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (71 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (94 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (98 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() == 28)) {
        if ((WaveGetLaneIndex() == 46)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (111 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 2)) {
          counter0 = (counter0 + 1);
          if ((WaveGetLaneIndex() == 51)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((125 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (134 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 17)) {
        if ((WaveGetLaneIndex() < 30)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (144 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 38)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (151 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (160 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 55))) {
      if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 49))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (192 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() >= 58)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((207 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 63))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (226 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 26)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((243 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 50))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((264 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i3 == 2)) {
            break;
          }
        }
      }
      break;
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 55))) {
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 62))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (297 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (307 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (316 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (320 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
        if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 54))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (339 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (344 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() == 1)) {
        if ((WaveGetLaneIndex() == 24)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (354 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
          if ((WaveGetLaneIndex() >= 57)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((369 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 5)) {
          result = (result + WaveActiveMax(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (376 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() >= 52)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (385 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 31)) {
        if ((WaveGetLaneIndex() >= 52)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (395 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 43)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (402 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 450
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 9216, 87381, 0, 9216, 87381, 0, 9216, 87381, 0, 9216, 87381, 0, 9216, 87381, 0, 9216, 87381, 0, 9216, 87381, 0, 9216, 87381, 0, 9216, 87381, 0, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 10240, 1163220309, 1431655765, 16912, 69905, 286261248, 16912, 69905, 286261248, 16912, 69905, 286261248, 16912, 69905, 286261248, 16912, 69905, 286261248, 16912, 69905, 286261248, 16912, 69905, 286261248, 16912, 69905, 286261248, 16916, 69905, 286261248, 16916, 69905, 286261248, 16916, 69905, 286261248, 16916, 69905, 286261248, 16916, 69905, 286261248, 16916, 69905, 286261248, 16916, 69905, 286261248, 16916, 69905, 286261248, 16920, 69905, 286261248, 16920, 69905, 286261248, 16920, 69905, 286261248, 16920, 69905, 286261248, 16920, 69905, 286261248, 16920, 69905, 286261248, 16920, 69905, 286261248, 16920, 69905, 286261248, 16928, 69905, 286261248, 16928, 69905, 286261248, 16928, 69905, 286261248, 16928, 69905, 286261248, 16928, 69905, 286261248, 16928, 69905, 286261248, 16928, 69905, 286261248, 16928, 69905, 286261248, 16932, 69905, 286261248, 16932, 69905, 286261248, 16932, 69905, 286261248, 16932, 69905, 286261248, 16932, 69905, 286261248, 16932, 69905, 286261248, 16932, 69905, 286261248, 16932, 69905, 286261248, 16936, 69905, 286261248, 16936, 69905, 286261248, 16936, 69905, 286261248, 16936, 69905, 286261248, 16936, 69905, 286261248, 16936, 69905, 286261248, 16936, 69905, 286261248, 16936, 69905, 286261248, 16944, 69905, 286261248, 16944, 69905, 286261248, 16944, 69905, 286261248, 16944, 69905, 286261248, 16944, 69905, 286261248, 16944, 69905, 286261248, 16944, 69905, 286261248, 16944, 69905, 286261248, 16948, 69905, 286261248, 16948, 69905, 286261248, 16948, 69905, 286261248, 16948, 69905, 286261248, 16948, 69905, 286261248, 16948, 69905, 286261248, 16948, 69905, 286261248, 16948, 69905, 286261248, 16952, 69905, 286261248, 16952, 69905, 286261248, 16952, 69905, 286261248, 16952, 69905, 286261248, 16952, 69905, 286261248, 16952, 69905, 286261248, 16952, 69905, 286261248, 16952, 69905, 286261248, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 22016, 1145324612, 1145324612, 24640, 0, 2290089984, 24640, 0, 2290089984, 24640, 0, 2290089984, 25728, 0, 2290649088, 25728, 0, 2290649088, 25728, 0, 2290649088, 25728, 0, 2290649088, 25728, 0, 2290649088, 25728, 0, 2290649088]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
