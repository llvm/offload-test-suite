#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (30 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (43 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter0 = 0;
          while ((counter0 < 2)) {
            counter0 = (counter0 + 1);
            uint counter1 = 0;
            while ((counter1 < 3)) {
              counter1 = (counter1 + 1);
              if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 59))) {
                result = (result + WaveActiveSum(5));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((72 << 6) | (counter0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((83 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
            if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 42))) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((106 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            uint counter3 = 0;
            while ((counter3 < 3)) {
              counter3 = (counter3 + 1);
              if ((WaveGetLaneIndex() < 22)) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((120 << 6) | (i2 << 4)) | (counter3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() < 16)) {
                result = (result + WaveActiveMax(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((127 << 6) | (i2 << 4)) | (counter3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 51))) {
              result = (result + WaveActiveSum(6));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((146 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i2 == 1)) {
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (158 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
        if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 55))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((189 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter5 = 0;
        while ((counter5 < 2)) {
          counter5 = (counter5 + 1);
          switch ((WaveGetLaneIndex() % 4)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((206 << 6) | (i4 << 4)) | (counter5 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((215 << 6) | (i4 << 4)) | (counter5 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((220 << 6) | (i4 << 4)) | (counter5 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 3: {
              if ((WaveGetLaneIndex() < 20)) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((227 << 6) | (i4 << 4)) | (counter5 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((231 << 6) | (i4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 42))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((242 << 6) | (i4 << 4)) | (counter5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (249 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (259 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (268 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (273 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        uint counter6 = 0;
        while ((counter6 < 2)) {
          counter6 = (counter6 + 1);
          if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 61))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((300 << 6) | (counter6 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((323 << 6) | (counter6 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 49))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (334 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i7 = 0; (i7 < 3); i7 = (i7 + 1)) {
        if ((WaveGetLaneIndex() < 9)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((351 << 6) | (i7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 43)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((358 << 6) | (i7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (362 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 573
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1920, 559240, 0, 1920, 559240, 0, 1920, 559240, 0, 1920, 559240, 0, 1920, 559240, 0, 2752, 1, 0, 7684, 1048832, 0, 7684, 1048832, 0, 7688, 1048832, 0, 7688, 1048832, 0, 7692, 1048832, 0, 7692, 1048832, 0, 7700, 1048832, 0, 7700, 1048832, 0, 7704, 1048832, 0, 7704, 1048832, 0, 7708, 1048832, 0, 7708, 1048832, 0, 8132, 256, 0, 8136, 256, 0, 8140, 256, 0, 8148, 256, 0, 8152, 256, 0, 8156, 256, 0, 12096, 67108928, 262144, 12096, 67108928, 262144, 12096, 67108928, 262144, 12112, 67108928, 262144, 12112, 67108928, 262144, 12112, 67108928, 262144, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14084, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14088, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14100, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 14104, 1145324612, 1145324612, 15492, 68, 1145324544, 15492, 68, 1145324544, 15492, 68, 1145324544, 15492, 68, 1145324544, 15492, 68, 1145324544, 15492, 68, 1145324544, 15492, 68, 1145324544, 15492, 68, 1145324544, 15496, 68, 1145324544, 15496, 68, 1145324544, 15496, 68, 1145324544, 15496, 68, 1145324544, 15496, 68, 1145324544, 15496, 68, 1145324544, 15496, 68, 1145324544, 15496, 68, 1145324544, 15508, 68, 1145324544, 15508, 68, 1145324544, 15508, 68, 1145324544, 15508, 68, 1145324544, 15508, 68, 1145324544, 15508, 68, 1145324544, 15508, 68, 1145324544, 15508, 68, 1145324544, 15512, 68, 1145324544, 15512, 68, 1145324544, 15512, 68, 1145324544, 15512, 68, 1145324544, 15512, 68, 1145324544, 15512, 68, 1145324544, 15512, 68, 1145324544, 15512, 68, 1145324544, 15936, 559240, 0, 15936, 559240, 0, 15936, 559240, 0, 15936, 559240, 0, 15936, 559240, 0, 16576, 17, 0, 16576, 17, 0, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 17472, 1145324612, 1145324612, 22464, 136, 0, 22464, 136, 0, 22480, 136, 0, 22480, 136, 0, 22496, 136, 0, 22496, 136, 0, 22912, 0, 2290649088, 22912, 0, 2290649088, 22912, 0, 2290649088, 22912, 0, 2290649088, 22912, 0, 2290649088, 22912, 0, 2290649088, 22928, 0, 2290649088, 22928, 0, 2290649088, 22928, 0, 2290649088, 22928, 0, 2290649088, 22928, 0, 2290649088, 22928, 0, 2290649088, 22944, 0, 2290649088, 22944, 0, 2290649088, 22944, 0, 2290649088, 22944, 0, 2290649088, 22944, 0, 2290649088, 22944, 0, 2290649088]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
