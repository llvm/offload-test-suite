#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 53))) {
    if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 58))) {
      result = (result + WaveActiveMax(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() == 22) || (WaveGetLaneIndex() == 42))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((43 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 56))) {
          result = (result + WaveActiveSum(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((62 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (75 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (84 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (89 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (105 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
          if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 43))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((124 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            continue;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (136 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (145 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if ((WaveGetLaneIndex() < 31)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((160 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 32)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((167 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
  uint counter4 = 0;
  while ((counter4 < 2)) {
    counter4 = (counter4 + 1);
    if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 42))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((189 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter4 == 1)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 399
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 15, 4227858432, 1088, 15, 4227858432, 1088, 15, 4227858432, 1088, 15, 4227858432, 1088, 15, 4227858432, 1088, 15, 4227858432, 1088, 15, 4227858432, 1088, 15, 4227858432, 1088, 15, 4227858432, 1088, 15, 4227858432, 3972, 0, 16777216, 3976, 0, 16777216, 3988, 0, 16777216, 3992, 0, 16777216, 4800, 65, 0, 4800, 65, 0, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5376, 272696336, 68174084, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 5696, 68174084, 1090785345, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10240, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10256, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10272, 715827882, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10688, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10704, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 10720, 2863311530, 0, 12112, 536870928, 1024, 12112, 536870928, 1024, 12112, 536870928, 1024]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
