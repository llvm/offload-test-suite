#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 26)) {
    if ((WaveGetLaneIndex() == 25)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() < 8)) {
    result = (result + WaveActiveMin(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (16 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 42))) {
      result = (result + WaveActiveMin(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((39 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 8))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((61 << 6) | (i0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 42))) {
      result = (result + WaveActiveMin(5));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((76 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  uint counter2 = 0;
  while ((counter2 < 2)) {
    counter2 = (counter2 + 1);
    if ((WaveGetLaneIndex() == 8)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((90 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 165
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1024, 255, 0, 1024, 255, 0, 1024, 255, 0, 1024, 255, 0, 1024, 255, 0, 1024, 255, 0, 1024, 255, 0, 1024, 255, 0, 2496, 536871040, 1024, 2496, 536871040, 1024, 2496, 536871040, 1024, 2512, 536871040, 1024, 2512, 536871040, 1024, 2512, 536871040, 1024, 2528, 536871040, 1024, 2528, 536871040, 1024, 2528, 536871040, 1024, 3908, 33024, 2, 3908, 33024, 2, 3908, 33024, 2, 3912, 33024, 2, 3912, 33024, 2, 3912, 33024, 2, 3916, 33024, 2, 3916, 33024, 2, 3916, 33024, 2, 3924, 33024, 2, 3924, 33024, 2, 3924, 33024, 2, 3928, 33024, 2, 3928, 33024, 2, 3928, 33024, 2, 3932, 33024, 2, 3932, 33024, 2, 3932, 33024, 2, 3940, 33024, 2, 3940, 33024, 2, 3940, 33024, 2, 3944, 33024, 2, 3944, 33024, 2, 3944, 33024, 2, 3948, 33024, 2, 3948, 33024, 2, 3948, 33024, 2, 4864, 33562624, 1024, 4864, 33562624, 1024, 4864, 33562624, 1024, 4880, 33562624, 1024, 4880, 33562624, 1024, 4880, 33562624, 1024, 4896, 33562624, 1024, 4896, 33562624, 1024, 4896, 33562624, 1024, 5776, 256, 0, 5792, 256, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
