#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 30) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 63))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((27 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 8))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((57 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 53))) {
            if (((WaveGetLaneIndex() == 30) || (WaveGetLaneIndex() == 53))) {
              result = (result + WaveActiveMin(6));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((75 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 59))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((86 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 4)) {
            result = (result + WaveActiveMin(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((93 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 57))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((108 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i0 == 1)) {
        break;
      }
    }
    break;
  }
  case 1: {
    if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 53))) {
      if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 52))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (145 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (155 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (164 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 61))) {
            if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 53))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (196 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 58))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (211 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (215 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 55))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (230 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((WaveGetLaneIndex() == 20)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (237 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((256 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((270 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((279 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 44))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((294 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 56))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((313 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((322 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i2 == 2)) {
      break;
    }
  }
  }
  break;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (341 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 312
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1728, 1073741824, 0, 1744, 1073741824, 0, 3652, 262400, 0, 3652, 262400, 0, 3656, 262400, 0, 3656, 262400, 0, 3668, 262400, 0, 3668, 262400, 0, 3672, 262400, 0, 3672, 262400, 0, 5956, 16, 0, 5960, 16, 0, 5972, 16, 0, 5976, 16, 0, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20608, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20624, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610, 20640, 2863311530, 2861181610]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
