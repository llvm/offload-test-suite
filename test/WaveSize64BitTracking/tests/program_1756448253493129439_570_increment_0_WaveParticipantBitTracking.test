#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() < 16)) {
            result = (result + WaveActiveMin(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((25 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 46)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((32 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (44 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() < 31)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((59 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 45)) {
          if ((WaveGetLaneIndex() < 14)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((69 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((80 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 22)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((87 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        break;
      }
    }
    break;
  }
  }
  if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 29))) {
    if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 57))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (124 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 32))) {
        result = (result + WaveActiveMax(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((151 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((169 << 6) | (i3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter4 == 2)) {
          break;
        }
      }
      if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 62))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((195 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i3 == 1)) {
        break;
      }
    }
    if (((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 61))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (217 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 426
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1600, 37449, 0, 1600, 37449, 0, 1600, 37449, 0, 1600, 37449, 0, 1600, 37449, 0, 1600, 37449, 0, 1604, 37449, 0, 1604, 37449, 0, 1604, 37449, 0, 1604, 37449, 0, 1604, 37449, 0, 1604, 37449, 0, 1608, 37449, 0, 1608, 37449, 0, 1608, 37449, 0, 1608, 37449, 0, 1608, 37449, 0, 1608, 37449, 0, 1616, 37449, 0, 1616, 37449, 0, 1616, 37449, 0, 1616, 37449, 0, 1616, 37449, 0, 1616, 37449, 0, 1620, 37449, 0, 1620, 37449, 0, 1620, 37449, 0, 1620, 37449, 0, 1620, 37449, 0, 1620, 37449, 0, 1624, 37449, 0, 1624, 37449, 0, 1624, 37449, 0, 1624, 37449, 0, 1624, 37449, 0, 1624, 37449, 0, 2048, 0, 2454257664, 2048, 0, 2454257664, 2048, 0, 2454257664, 2048, 0, 2454257664, 2048, 0, 2454257664, 2048, 0, 2454257664, 2052, 0, 2454257664, 2052, 0, 2454257664, 2052, 0, 2454257664, 2052, 0, 2454257664, 2052, 0, 2454257664, 2052, 0, 2454257664, 2056, 0, 2454257664, 2056, 0, 2454257664, 2056, 0, 2454257664, 2056, 0, 2454257664, 2056, 0, 2454257664, 2056, 0, 2454257664, 2064, 0, 2454257664, 2064, 0, 2454257664, 2064, 0, 2454257664, 2064, 0, 2454257664, 2064, 0, 2454257664, 2064, 0, 2454257664, 2068, 0, 2454257664, 2068, 0, 2454257664, 2068, 0, 2454257664, 2068, 0, 2454257664, 2068, 0, 2454257664, 2068, 0, 2454257664, 2072, 0, 2454257664, 2072, 0, 2454257664, 2072, 0, 2454257664, 2072, 0, 2454257664, 2072, 0, 2454257664, 2072, 0, 2454257664, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 2816, 272696336, 68174084, 3776, 613566756, 0, 3776, 613566756, 0, 3776, 613566756, 0, 3776, 613566756, 0, 3776, 613566756, 0, 3776, 613566756, 0, 3776, 613566756, 0, 3776, 613566756, 0, 3776, 613566756, 0, 3776, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 3792, 613566756, 0, 5120, 545392672, 520, 5120, 545392672, 520, 5120, 545392672, 520, 5120, 545392672, 520, 5120, 545392672, 520, 5120, 545392672, 520, 5120, 545392672, 520, 5136, 545392672, 520, 5136, 545392672, 520, 5136, 545392672, 520, 5136, 545392672, 520, 5136, 545392672, 520, 5136, 545392672, 520, 5136, 545392672, 520, 5568, 1198372, 0, 5568, 1198372, 0, 5568, 1198372, 0, 5568, 1198372, 0, 5568, 1198372, 0, 5568, 1198372, 0, 5568, 1198372, 0, 5584, 1198372, 0, 5584, 1198372, 0, 5584, 1198372, 0, 5584, 1198372, 0, 5584, 1198372, 0, 5584, 1198372, 0, 5584, 1198372, 0, 10820, 268436480, 0, 10820, 268436480, 0, 10824, 268436480, 0, 10824, 268436480, 0, 10836, 268436480, 0, 10836, 268436480, 0, 10840, 268436480, 0, 10840, 268436480, 0, 12480, 268436480, 0, 12480, 268436480, 0, 12496, 268436480, 0, 12496, 268436480, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
