#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((33 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((43 << 6) | (counter0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((52 << 6) | (counter0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((56 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((65 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            break;
          }
        }
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 56))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((83 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (88 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 348
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2128, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2132, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2144, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2148, 272696336, 68174084, 2768, 16, 0, 2772, 16, 0, 2784, 16, 0, 2788, 16, 0, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4176, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4180, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4192, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 4196, 2181570690, 545392672, 5328, 33554434, 0, 5328, 33554434, 0, 5344, 33554434, 0, 5344, 33554434, 0, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
