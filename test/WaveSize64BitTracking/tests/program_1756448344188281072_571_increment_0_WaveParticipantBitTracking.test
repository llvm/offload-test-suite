#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 55))) {
    if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 56))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 48))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (30 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (47 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((63 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 53))) {
            if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 53))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((81 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 55))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((94 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 63))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((105 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (114 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (119 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() == 37)) {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 57))) {
          result = (result + WaveActiveMax(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((144 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 19)) {
          if ((WaveGetLaneIndex() < 4)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((154 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 4)) {
            result = (result + WaveActiveMin(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((161 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 26))) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((180 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter1 == 1)) {
          break;
        }
      }
      if ((WaveGetLaneIndex() == 6)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (190 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 61))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((209 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 61))) {
      if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 46))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((239 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 34))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((265 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 60)) {
          if ((WaveGetLaneIndex() == 55)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((277 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 13))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((300 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((310 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((319 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((324 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 3: {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((331 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 348
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1088, 4095, 4278190080, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 1920, 8191, 4286578688, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 7616, 1145324612, 1145324612, 13376, 1, 3758096384, 13376, 1, 3758096384, 13376, 1, 3758096384, 13376, 1, 3758096384, 13392, 1, 3758096384, 13392, 1, 3758096384, 13392, 1, 3758096384, 13392, 1, 3758096384, 19204, 0, 536870912, 19208, 0, 536870912, 19212, 0, 536870912, 19220, 0, 536870912, 19224, 0, 536870912, 19228, 0, 536870912, 19840, 17, 0, 19840, 17, 0, 19856, 17, 0, 19856, 17, 0, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20736, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 20752, 1145324608, 1145324612, 21184, 559240, 0, 21184, 559240, 0, 21184, 559240, 0, 21184, 559240, 0, 21184, 559240, 0, 21200, 559240, 0, 21200, 559240, 0, 21200, 559240, 0, 21200, 559240, 0, 21200, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
