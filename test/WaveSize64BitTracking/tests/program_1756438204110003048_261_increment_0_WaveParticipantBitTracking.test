#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 50))) {
          result = (result + WaveActiveMin(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((32 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 26)) {
          if ((WaveGetLaneIndex() < 32)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((42 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 22)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((49 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i0 == 2)) {
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (57 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() == 18)) {
        if ((WaveGetLaneIndex() == 63)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (67 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 55))) {
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 56))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (87 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 49))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (98 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 60)) {
          result = (result + WaveActiveMin(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (105 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 45))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (116 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (126 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (135 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (140 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 47))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (153 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() >= 42)) {
    if ((WaveGetLaneIndex() >= 58)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (163 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() < 26)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (170 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 51))) {
      if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 60))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (193 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 46))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (206 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (215 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  if ((WaveGetLaneIndex() >= 45)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (257 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 31)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (251 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 42))) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (245 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 62))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (241 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 540
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 2048, 0, 512, 2064, 0, 512, 2080, 0, 512, 2688, 35791394, 0, 2688, 35791394, 0, 2688, 35791394, 0, 2688, 35791394, 0, 2688, 35791394, 0, 2688, 35791394, 0, 2688, 35791394, 0, 2704, 35791394, 0, 2704, 35791394, 0, 2704, 35791394, 0, 2704, 35791394, 0, 2704, 35791394, 0, 2704, 35791394, 0, 2704, 35791394, 0, 2720, 35791394, 0, 2720, 35791394, 0, 2720, 35791394, 0, 2720, 35791394, 0, 2720, 35791394, 0, 2720, 35791394, 0, 2720, 35791394, 0, 3136, 2236962, 0, 3136, 2236962, 0, 3136, 2236962, 0, 3136, 2236962, 0, 3136, 2236962, 0, 3136, 2236962, 0, 3152, 2236962, 0, 3152, 2236962, 0, 3152, 2236962, 0, 3152, 2236962, 0, 3152, 2236962, 0, 3152, 2236962, 0, 3168, 2236962, 0, 3168, 2236962, 0, 3168, 2236962, 0, 3168, 2236962, 0, 3168, 2236962, 0, 3168, 2236962, 0, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 3648, 1145324612, 1145324612, 7424, 136, 2290647040, 7424, 136, 2290647040, 7424, 136, 2290647040, 7424, 136, 2290647040, 7424, 136, 2290647040, 7424, 136, 2290647040, 7424, 136, 2290647040, 8064, 8, 0, 8960, 8390656, 134250504, 8960, 8390656, 134250504, 8960, 8390656, 134250504, 8960, 8390656, 134250504, 8960, 8390656, 134250504, 9792, 0, 2290647040, 9792, 0, 2290647040, 9792, 0, 2290647040, 9792, 0, 2290647040, 9792, 0, 2290647040, 10432, 0, 4227858432, 10432, 0, 4227858432, 10432, 0, 4227858432, 10432, 0, 4227858432, 10432, 0, 4227858432, 10432, 0, 4227858432, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 10880, 67108863, 0, 12352, 1365, 0, 12352, 1365, 0, 12352, 1365, 0, 12352, 1365, 0, 12352, 1365, 0, 12352, 1365, 0, 13184, 21845, 0, 13184, 21845, 0, 13184, 21845, 0, 13184, 21845, 0, 13184, 21845, 0, 13184, 21845, 0, 13184, 21845, 0, 13184, 21845, 0, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 13760, 1431655765, 341, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16448, 0, 4294959104, 16064, 2147483648, 0, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168, 15680, 4095, 7168]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
