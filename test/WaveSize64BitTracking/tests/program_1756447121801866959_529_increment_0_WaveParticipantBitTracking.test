#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() >= 47)) {
    if ((WaveGetLaneIndex() < 21)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (11 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 62))) {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter0 = 0;
          while ((counter0 < 2)) {
            counter0 = (counter0 + 1);
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((45 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter0 == 1)) {
              break;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (57 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (62 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (66 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 62))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (85 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 50))) {
    if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 56))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (103 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 47))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (157 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 45))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (151 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 0))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (147 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (141 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 201
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3968, 0, 1073774592, 3968, 0, 1073774592, 5440, 0, 1073741824, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 6592, 63, 4278190080, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 10048, 4095, 4294934528, 9664, 0, 24576, 9664, 0, 24576, 9408, 524288, 512, 9408, 524288, 512, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461, 9024, 1431654400, 5461]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
