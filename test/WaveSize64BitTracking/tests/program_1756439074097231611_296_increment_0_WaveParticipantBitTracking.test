#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 8)) {
    if ((WaveGetLaneIndex() == 20)) {
      result = (result + WaveActiveSum(9));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() < 24)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((25 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 43))) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 46))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((43 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 55))) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((54 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 38)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((61 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 39)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (70 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((90 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((104 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((113 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 35)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((122 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((131 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i1 == 1)) {
        continue;
      }
    }
    break;
  }
  case 1: {
    for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
      if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 48))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((161 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((177 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((186 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter3 == 2)) {
          break;
        }
      }
      if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 36))) {
        result = (result + WaveActiveMax(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((204 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        break;
      }
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (212 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (226 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((245 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((254 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (265 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 507
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1616, 256, 0, 1632, 256, 0, 1648, 256, 0, 10304, 536870912, 131072, 10304, 536870912, 131072, 10320, 536870912, 131072, 10320, 536870912, 131072, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11332, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11336, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11348, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 11352, 572662306, 572662306, 13056, 0, 512, 13072, 0, 512, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 13568, 1717986918, 1717986918, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 14464, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15680, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15696, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224, 15712, 2290649224, 2290649224]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
