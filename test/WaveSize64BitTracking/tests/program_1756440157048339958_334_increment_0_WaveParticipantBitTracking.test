#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 34))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((40 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 10))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((59 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((68 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          continue;
        }
      }
      break;
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 36))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((101 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
          if ((((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 1))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((124 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 53))) {
          result = (result + WaveActiveSum(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((143 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (148 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (158 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if ((WaveGetLaneIndex() < 8)) {
        if ((WaveGetLaneIndex() < 21)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (168 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (178 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (187 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (191 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() == 60)) {
        if ((WaveGetLaneIndex() == 42)) {
          result = (result + WaveActiveSum(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (204 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 16)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (211 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 5)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (218 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter4 = 0;
      while ((counter4 < 2)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 53))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((236 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 49)) {
          if ((WaveGetLaneIndex() == 1)) {
            result = (result + WaveActiveSum(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((246 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 63)) {
            result = (result + WaveActiveSum(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((253 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 60))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((272 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 57))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((289 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 47))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((300 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (309 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (314 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 423
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3780, 2097152, 0, 3784, 2097152, 0, 3796, 2097152, 0, 3800, 2097152, 0, 3812, 2097152, 0, 3816, 2097152, 0, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4368, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 4384, 1090785345, 272696336, 6480, 0, 131072, 6496, 0, 131072, 7952, 2, 0, 7956, 2, 0, 7968, 2, 0, 7972, 2, 0, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 9472, 613566756, 1227133513, 10112, 85, 0, 10112, 85, 0, 10112, 85, 0, 10112, 85, 0, 10752, 255, 0, 10752, 255, 0, 10752, 255, 0, 10752, 255, 0, 10752, 255, 0, 10752, 255, 0, 10752, 255, 0, 10752, 255, 0, 11392, 85, 0, 11392, 85, 0, 11392, 85, 0, 11392, 85, 0, 15120, 9, 2185232384, 15120, 9, 2185232384, 15120, 9, 2185232384, 15120, 9, 2185232384, 15120, 9, 2185232384, 15136, 9, 2185232384, 15136, 9, 2185232384, 15136, 9, 2185232384, 15136, 9, 2185232384, 15136, 9, 2185232384, 17424, 262144, 0, 17440, 262144, 0, 18512, 1, 33554432, 18512, 1, 33554432, 18528, 1, 33554432, 18528, 1, 33554432, 19216, 1, 2185822208, 19216, 1, 2185822208, 19216, 1, 2185822208, 19216, 1, 2185822208, 19216, 1, 2185822208, 19216, 1, 2185822208, 19232, 1, 2185822208, 19232, 1, 2185822208, 19232, 1, 2185822208, 19232, 1, 2185822208, 19232, 1, 2185822208, 19232, 1, 2185822208, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 19776, 272696336, 68174084, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513, 20096, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
