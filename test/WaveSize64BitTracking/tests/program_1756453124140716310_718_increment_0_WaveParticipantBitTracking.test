#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 21))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (53 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 59))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (49 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 36)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (45 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 21)) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (39 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (66 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (75 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 55))) {
            if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 37))) {
              result = (result + WaveActiveMin(8));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (101 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 55))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (120 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (129 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (134 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 255
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3392, 538968072, 65792, 3392, 538968072, 65792, 3392, 538968072, 65792, 3392, 538968072, 65792, 3392, 538968072, 65792, 3136, 65536, 134217744, 3136, 65536, 134217744, 3136, 65536, 134217744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2880, 0, 4160683744, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 2496, 2031607, 0, 4224, 73, 0, 4224, 73, 0, 4224, 73, 0, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8256, 272696336, 68174084, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513, 8576, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
