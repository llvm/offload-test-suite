#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 55))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (38 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 57))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (32 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (28 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 16))) {
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((77 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((91 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() == 25) || (WaveGetLaneIndex() == 61))) {
        result = (result + WaveActiveMin(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (102 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (111 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (116 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 43))) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((135 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 10))) {
        if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 31))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((169 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((188 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 49))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((201 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 318
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2432, 16842752, 8388608, 2432, 16842752, 8388608, 2432, 16842752, 8388608, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 2048, 65535, 4261412864, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 1792, 2863267840, 2796202, 5840, 17, 0, 5840, 17, 0, 5856, 17, 0, 5856, 17, 0, 5872, 17, 0, 5872, 17, 0, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 7424, 1145324612, 1145324612, 8640, 136, 2290649088, 8640, 136, 2290649088, 8640, 136, 2290649088, 8640, 136, 2290649088, 8640, 136, 2290649088, 8640, 136, 2290649088, 8640, 136, 2290649088, 8640, 136, 2290649088, 8656, 136, 2290649088, 8656, 136, 2290649088, 8656, 136, 2290649088, 8656, 136, 2290649088, 8656, 136, 2290649088, 8656, 136, 2290649088, 8656, 136, 2290649088, 8656, 136, 2290649088, 8672, 136, 2290649088, 8672, 136, 2290649088, 8672, 136, 2290649088, 8672, 136, 2290649088, 8672, 136, 2290649088, 8672, 136, 2290649088, 8672, 136, 2290649088, 8672, 136, 2290649088, 12864, 8, 2290614272, 12864, 8, 2290614272, 12864, 8, 2290614272, 12864, 8, 2290614272, 12864, 8, 2290614272, 12880, 8, 2290614272, 12880, 8, 2290614272, 12880, 8, 2290614272, 12880, 8, 2290614272, 12880, 8, 2290614272, 12896, 8, 2290614272, 12896, 8, 2290614272, 12896, 8, 2290614272, 12896, 8, 2290614272, 12896, 8, 2290614272]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
