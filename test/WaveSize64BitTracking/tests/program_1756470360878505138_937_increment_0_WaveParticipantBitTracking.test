#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter0 = 0;
          while ((counter0 < 2)) {
            counter0 = (counter0 + 1);
            for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
              if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 29))) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((37 << 6) | (counter0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((i1 == 1)) {
                continue;
              }
              if ((i1 == 2)) {
                break;
              }
            }
            if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 62))) {
              result = (result + WaveActiveMin(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((62 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 57))) {
            if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 51))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (80 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            uint counter2 = 0;
            while ((counter2 < 2)) {
              counter2 = (counter2 + 1);
              if ((WaveGetLaneIndex() >= 42)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((94 << 6) | (counter2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (99 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (103 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (112 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (117 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((144 << 6) | (i3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 62))) {
            if (((WaveGetLaneIndex() == 28) || (WaveGetLaneIndex() == 40))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((166 << 6) | (i3 << 4)) | (i4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() >= 42)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((173 << 6) | (i3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i4 == 2)) {
          break;
        }
      }
      if ((WaveGetLaneIndex() == 58)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((183 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 174
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5120, 16, 0, 6336, 1048832, 16781313, 6336, 1048832, 16781313, 6336, 1048832, 16781313, 6336, 1048832, 16781313, 6336, 1048832, 16781313, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 7488, 1145324612, 1145324612, 11072, 0, 2290649088, 11072, 0, 2290649088, 11072, 0, 2290649088, 11072, 0, 2290649088, 11072, 0, 2290649088, 11072, 0, 2290649088, 11076, 0, 2290649088, 11076, 0, 2290649088, 11076, 0, 2290649088, 11076, 0, 2290649088, 11076, 0, 2290649088, 11076, 0, 2290649088, 11080, 0, 2290649088, 11080, 0, 2290649088, 11080, 0, 2290649088, 11080, 0, 2290649088, 11080, 0, 2290649088, 11080, 0, 2290649088, 11088, 0, 2290649088, 11088, 0, 2290649088, 11088, 0, 2290649088, 11088, 0, 2290649088, 11088, 0, 2290649088, 11088, 0, 2290649088, 11092, 0, 2290649088, 11092, 0, 2290649088, 11092, 0, 2290649088, 11092, 0, 2290649088, 11092, 0, 2290649088, 11092, 0, 2290649088, 11096, 0, 2290649088, 11096, 0, 2290649088, 11096, 0, 2290649088, 11096, 0, 2290649088, 11096, 0, 2290649088, 11096, 0, 2290649088]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
