#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 53))) {
          if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 51))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((38 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 3)) {
            counter1 = (counter1 + 1);
            if ((WaveGetLaneIndex() == 0)) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((52 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 62))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((63 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 15)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((70 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (83 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              uint counter2 = 0;
              while ((counter2 < 2)) {
                counter2 = (counter2 + 1);
                if (((WaveGetLaneIndex() & 1) == 1)) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((99 << 6) | (counter2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (104 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (114 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              uint counter3 = 0;
              while ((counter3 < 3)) {
                counter3 = (counter3 + 1);
                if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 22))) {
                  result = (result + WaveActiveMax(7));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((136 << 6) | (counter3 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((counter3 == 2)) {
                  break;
                }
              }
              break;
            }
          case 2: {
              if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 8))) {
                if (((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 37))) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (173 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 63))) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (196 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              } else {
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveSum(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (205 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveSum(8));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (214 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    case 2: {
        if ((WaveGetLaneIndex() < 23)) {
          for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
            if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 56))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((244 << 6) | (i4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 59))) {
      if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 56))) {
        result = (result + WaveActiveMax(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (274 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 24)) {
        if ((WaveGetLaneIndex() == 28)) {
          result = (result + WaveActiveMin(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (284 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 42)) {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (294 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 1)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (303 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 30) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 48))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (320 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    uint counter5 = 0;
    while ((counter5 < 2)) {
      counter5 = (counter5 + 1);
      uint counter6 = 0;
      while ((counter6 < 3)) {
        counter6 = (counter6 + 1);
        if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 53))) {
          result = (result + WaveActiveSum(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((345 << 6) | (counter5 << 4)) | (counter6 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((358 << 6) | (counter5 << 4)) | (counter6 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 4)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((365 << 6) | (counter5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 37))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (388 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (395 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter7 = 0;
      while ((counter7 < 2)) {
        counter7 = (counter7 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((414 << 6) | (counter7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i8 = 0; (i8 < 3); i8 = (i8 + 1)) {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 58))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((433 << 6) | (counter7 << 4)) | (i8 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 50))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((444 << 6) | (counter7 << 4)) | (i8 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((453 << 6) | (counter7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 61))) {
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 52))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (471 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (485 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 60))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (496 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      uint counter9 = 0;
      while ((counter9 < 2)) {
        counter9 = (counter9 + 1);
        if ((WaveGetLaneIndex() == 22)) {
          if ((WaveGetLaneIndex() == 6)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((513 << 6) | (counter9 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((524 << 6) | (counter9 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() == 51)) {
        if ((WaveGetLaneIndex() == 1)) {
          result = (result + WaveActiveSum(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (534 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (545 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (555 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (564 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (569 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (576 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (580 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (589 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 729
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [22100, 279620, 1145044992, 22100, 279620, 1145044992, 22100, 279620, 1145044992, 22100, 279620, 1145044992, 22100, 279620, 1145044992, 22100, 279620, 1145044992, 22100, 279620, 1145044992, 22100, 279620, 1145044992, 22104, 279620, 1145044992, 22104, 279620, 1145044992, 22104, 279620, 1145044992, 22104, 279620, 1145044992, 22104, 279620, 1145044992, 22104, 279620, 1145044992, 22104, 279620, 1145044992, 22104, 279620, 1145044992, 22108, 279620, 1145044992, 22108, 279620, 1145044992, 22108, 279620, 1145044992, 22108, 279620, 1145044992, 22108, 279620, 1145044992, 22108, 279620, 1145044992, 22108, 279620, 1145044992, 22108, 279620, 1145044992, 22116, 279620, 1145044992, 22116, 279620, 1145044992, 22116, 279620, 1145044992, 22116, 279620, 1145044992, 22116, 279620, 1145044992, 22116, 279620, 1145044992, 22116, 279620, 1145044992, 22116, 279620, 1145044992, 22120, 279620, 1145044992, 22120, 279620, 1145044992, 22120, 279620, 1145044992, 22120, 279620, 1145044992, 22120, 279620, 1145044992, 22120, 279620, 1145044992, 22120, 279620, 1145044992, 22120, 279620, 1145044992, 22124, 279620, 1145044992, 22124, 279620, 1145044992, 22124, 279620, 1145044992, 22124, 279620, 1145044992, 22124, 279620, 1145044992, 22124, 279620, 1145044992, 22124, 279620, 1145044992, 22124, 279620, 1145044992, 22932, 279620, 1145307136, 22932, 279620, 1145307136, 22932, 279620, 1145307136, 22932, 279620, 1145307136, 22932, 279620, 1145307136, 22932, 279620, 1145307136, 22932, 279620, 1145307136, 22932, 279620, 1145307136, 22932, 279620, 1145307136, 22936, 279620, 1145307136, 22936, 279620, 1145307136, 22936, 279620, 1145307136, 22936, 279620, 1145307136, 22936, 279620, 1145307136, 22936, 279620, 1145307136, 22936, 279620, 1145307136, 22936, 279620, 1145307136, 22936, 279620, 1145307136, 22940, 279620, 1145307136, 22940, 279620, 1145307136, 22940, 279620, 1145307136, 22940, 279620, 1145307136, 22940, 279620, 1145307136, 22940, 279620, 1145307136, 22940, 279620, 1145307136, 22940, 279620, 1145307136, 22940, 279620, 1145307136, 22948, 279620, 1145307136, 22948, 279620, 1145307136, 22948, 279620, 1145307136, 22948, 279620, 1145307136, 22948, 279620, 1145307136, 22948, 279620, 1145307136, 22948, 279620, 1145307136, 22948, 279620, 1145307136, 22948, 279620, 1145307136, 22952, 279620, 1145307136, 22952, 279620, 1145307136, 22952, 279620, 1145307136, 22952, 279620, 1145307136, 22952, 279620, 1145307136, 22952, 279620, 1145307136, 22952, 279620, 1145307136, 22952, 279620, 1145307136, 22952, 279620, 1145307136, 22956, 279620, 1145307136, 22956, 279620, 1145307136, 22956, 279620, 1145307136, 22956, 279620, 1145307136, 22956, 279620, 1145307136, 22956, 279620, 1145307136, 22956, 279620, 1145307136, 22956, 279620, 1145307136, 22956, 279620, 1145307136, 25280, 559240, 0, 25280, 559240, 0, 25280, 559240, 0, 25280, 559240, 0, 25280, 559240, 0, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26512, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 26528, 286331153, 286331153, 27728, 1, 268435456, 27728, 1, 268435456, 27732, 1, 268435456, 27732, 1, 268435456, 27736, 1, 268435456, 27736, 1, 268435456, 27744, 1, 268435456, 27744, 1, 268435456, 27748, 1, 268435456, 27748, 1, 268435456, 27752, 1, 268435456, 27752, 1, 268435456, 28432, 17, 286261248, 28432, 17, 286261248, 28432, 17, 286261248, 28432, 17, 286261248, 28432, 17, 286261248, 28436, 17, 286261248, 28436, 17, 286261248, 28436, 17, 286261248, 28436, 17, 286261248, 28436, 17, 286261248, 28440, 17, 286261248, 28440, 17, 286261248, 28440, 17, 286261248, 28440, 17, 286261248, 28440, 17, 286261248, 28448, 17, 286261248, 28448, 17, 286261248, 28448, 17, 286261248, 28448, 17, 286261248, 28448, 17, 286261248, 28452, 17, 286261248, 28452, 17, 286261248, 28452, 17, 286261248, 28452, 17, 286261248, 28452, 17, 286261248, 28456, 17, 286261248, 28456, 17, 286261248, 28456, 17, 286261248, 28456, 17, 286261248, 28456, 17, 286261248, 30144, 51, 536870912, 30144, 51, 536870912, 30144, 51, 536870912, 30144, 51, 536870912, 30144, 51, 536870912, 31744, 51, 536870912, 31744, 51, 536870912, 31744, 51, 536870912, 31744, 51, 536870912, 31744, 51, 536870912, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33552, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 33568, 1145324612, 1145324612, 36864, 559240, 0, 36864, 559240, 0, 36864, 559240, 0, 36864, 559240, 0, 36864, 559240, 0, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936, 37696, 2290649224, 2290124936]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
