#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() >= 51)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((16 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() == 16)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((32 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 59)) {
            result = (result + WaveActiveMin(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((39 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter1 == 1)) {
            break;
          }
        }
      }
      break;
    }
  case 1: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() == 27)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((59 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((77 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((86 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((102 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter5 = 0;
        while ((counter5 < 3)) {
          counter5 = (counter5 + 1);
          if ((WaveGetLaneIndex() == 32)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((118 << 6) | (counter4 << 4)) | (counter5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 3: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (132 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i6 = 0; (i6 < 2); i6 = (i6 + 1)) {
          if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 46))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((153 << 6) | (i6 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 47))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((164 << 6) | (i6 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if ((WaveGetLaneIndex() >= 59)) {
        result = (result + WaveActiveMin(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (171 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() >= 52)) {
        if ((WaveGetLaneIndex() >= 38)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (181 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 59)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (188 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter7 = 0;
          while ((counter7 < 2)) {
            counter7 = (counter7 + 1);
            if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 62))) {
              result = (result + WaveActiveMax(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((216 << 6) | (counter7 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter7 == 1)) {
              break;
            }
          }
          break;
        }
      case 1: {
          if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 13))) {
            if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 44))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (249 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 16))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (272 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (277 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (286 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 504
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1040, 0, 286261248, 1040, 0, 286261248, 1040, 0, 286261248, 1056, 0, 286261248, 1056, 0, 286261248, 1056, 0, 286261248, 1072, 0, 286261248, 1072, 0, 286261248, 1072, 0, 286261248, 2068, 65536, 0, 2084, 65536, 0, 2100, 65536, 0, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4932, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4936, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4948, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 4952, 572662306, 572662306, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6544, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6560, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 6576, 1145324612, 1145324612, 9792, 2184, 2290647040, 9792, 2184, 2290647040, 9792, 2184, 2290647040, 9792, 2184, 2290647040, 9792, 2184, 2290647040, 9792, 2184, 2290647040, 9792, 2184, 2290647040, 9792, 2184, 2290647040, 9808, 2184, 2290647040, 9808, 2184, 2290647040, 9808, 2184, 2290647040, 9808, 2184, 2290647040, 9808, 2184, 2290647040, 9808, 2184, 2290647040, 9808, 2184, 2290647040, 9808, 2184, 2290647040, 10496, 2184, 2290647040, 10496, 2184, 2290647040, 10496, 2184, 2290647040, 10496, 2184, 2290647040, 10496, 2184, 2290647040, 10496, 2184, 2290647040, 10496, 2184, 2290647040, 10496, 2184, 2290647040, 10512, 2184, 2290647040, 10512, 2184, 2290647040, 10512, 2184, 2290647040, 10512, 2184, 2290647040, 10512, 2184, 2290647040, 10512, 2184, 2290647040, 10512, 2184, 2290647040, 10512, 2184, 2290647040, 13840, 1, 0, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345, 17728, 68174084, 1090785345]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
