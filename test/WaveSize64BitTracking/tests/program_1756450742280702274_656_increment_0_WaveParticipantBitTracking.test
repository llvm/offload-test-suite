#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (28 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (37 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (42 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (49 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (53 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 62))) {
      if ((((WaveGetLaneIndex() == 26) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 38))) {
        if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((114 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((133 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 39))) {
        result = (result + WaveActiveMin(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((148 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 55))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((159 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i0 == 2)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 402
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1792, 17, 0, 1792, 17, 0, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 2688, 1717986918, 1717986918, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 3136, 978670, 0, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10176, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10192, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688, 10208, 262143, 4286578688]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
