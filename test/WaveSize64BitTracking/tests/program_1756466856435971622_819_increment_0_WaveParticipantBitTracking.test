#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (15 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() < 9)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((39 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((50 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((counter0 == 1)) {
        break;
      }
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 61))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((78 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((92 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter2 = 0;
          while ((counter2 < 2)) {
            counter2 = (counter2 + 1);
            if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 62))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((114 << 6) | (counter1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 39))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((125 << 6) | (counter1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((134 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 36))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((145 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (154 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (164 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter3 = 0;
          while ((counter3 < 3)) {
            counter3 = (counter3 + 1);
            if ((WaveGetLaneIndex() < 4)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((178 << 6) | (counter3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter3 == 2)) {
              break;
            }
          }
          break;
        }
      case 2: {
          for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
            if ((WaveGetLaneIndex() == 57)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((196 << 6) | (i4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            uint counter5 = 0;
            while ((counter5 < 2)) {
              counter5 = (counter5 + 1);
              if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 17))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((222 << 6) | (i4 << 4)) | (counter5 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if ((WaveGetLaneIndex() == 40)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((229 << 6) | (i4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i4 == 2)) {
              break;
            }
          }
          break;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (236 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 276
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 960, 2863311530, 2863311530, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5904, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 5920, 1090785345, 272696336, 8020, 64, 0, 8024, 64, 0, 8036, 64, 0, 8040, 64, 0, 9296, 512, 16, 9296, 512, 16, 9312, 512, 16, 9312, 512, 16, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 11408, 2, 0, 11424, 2, 0, 14212, 131104, 1, 14212, 131104, 1, 14212, 131104, 1, 14216, 131104, 1, 14216, 131104, 1, 14216, 131104, 1, 14228, 131104, 1, 14228, 131104, 1, 14228, 131104, 1, 14232, 131104, 1, 14232, 131104, 1, 14232, 131104, 1, 14244, 131104, 1, 14244, 131104, 1, 14244, 131104, 1, 14248, 131104, 1, 14248, 131104, 1, 14248, 131104, 1]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
