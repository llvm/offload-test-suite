#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 0))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (39 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 53))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (33 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if ((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 31))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((72 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 26)) {
            if ((WaveGetLaneIndex() < 13)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((82 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 49))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((97 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            break;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (109 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (114 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (121 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 57))) {
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 62))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((168 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            continue;
          }
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (180 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if ((WaveGetLaneIndex() < 18)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((195 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i3 == 1)) {
          continue;
        }
        if ((i3 == 2)) {
          break;
        }
      }
    }
    break;
  }
  case 1: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if ((WaveGetLaneIndex() >= 60)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((219 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (228 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (242 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (251 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 327
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2496, 2097161, 33554432, 2496, 2097161, 33554432, 2496, 2097161, 33554432, 2496, 2097161, 33554432, 2112, 8390656, 2621440, 2112, 8390656, 2621440, 2112, 8390656, 2621440, 2112, 8390656, 2621440, 4624, 0, 268435456, 4628, 0, 268435456, 4640, 0, 268435456, 4644, 0, 268435456, 5264, 4369, 0, 5264, 4369, 0, 5264, 4369, 0, 5264, 4369, 0, 5268, 4369, 0, 5268, 4369, 0, 5268, 4369, 0, 5268, 4369, 0, 5280, 4369, 0, 5280, 4369, 0, 5280, 4369, 0, 5280, 4369, 0, 5284, 4369, 0, 5284, 4369, 0, 5284, 4369, 0, 5284, 4369, 0, 6224, 4096, 0, 6228, 4096, 0, 6240, 4096, 0, 6244, 4096, 0, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7296, 1145324612, 1145324612, 7744, 559240, 0, 7744, 559240, 0, 7744, 559240, 0, 7744, 559240, 0, 7744, 559240, 0, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 11520, 1431590229, 1431639380, 12480, 21845, 0, 12480, 21845, 0, 12480, 21845, 0, 12480, 21845, 0, 12480, 21845, 0, 12480, 21845, 0, 12480, 21845, 0, 12480, 21845, 0, 12496, 21845, 0, 12496, 21845, 0, 12496, 21845, 0, 12496, 21845, 0, 12496, 21845, 0, 12496, 21845, 0, 12496, 21845, 0, 12496, 21845, 0, 12512, 21845, 0, 12512, 21845, 0, 12512, 21845, 0, 12512, 21845, 0, 12512, 21845, 0, 12512, 21845, 0, 12512, 21845, 0, 12512, 21845, 0, 14016, 0, 2147483648, 14032, 0, 2147483648, 14048, 0, 2147483648]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
