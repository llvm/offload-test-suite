#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 15))) {
        if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 29))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (47 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (57 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
              if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 58))) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((78 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 34))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (93 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 1))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (114 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 53))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((135 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 19))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (152 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    uint counter2 = 0;
    while ((counter2 < 2)) {
      counter2 = (counter2 + 1);
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 45))) {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 61))) {
          result = (result + WaveActiveMax(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((177 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 35))) {
          if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 24))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((207 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 40))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((230 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 42))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((243 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 34)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((250 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (254 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 60))) {
    if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 57))) {
      result = (result + WaveActiveMin(8));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (272 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() == 10)) {
        if ((WaveGetLaneIndex() == 22)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((290 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((300 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((309 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((314 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((321 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if ((WaveGetLaneIndex() == 28)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((328 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 29)) {
        result = (result + WaveActiveSum(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((335 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 47))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((354 << 6) | (i3 << 4)) | (i4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if ((WaveGetLaneIndex() == 37)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((361 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 58))) {
    result = (result + WaveActiveMin(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (372 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (382 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (391 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 564
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 7296, 65538, 0, 7296, 65538, 0, 9728, 524288, 0, 11344, 4, 1073741824, 11344, 4, 1073741824, 11360, 4, 1073741824, 11360, 4, 1073741824, 15568, 4, 1227128832, 15568, 4, 1227128832, 15568, 4, 1227128832, 15568, 4, 1227128832, 15568, 4, 1227128832, 15568, 4, 1227128832, 15568, 4, 1227128832, 15584, 4, 1227128832, 15584, 4, 1227128832, 15584, 4, 1227128832, 15584, 4, 1227128832, 15584, 4, 1227128832, 15584, 4, 1227128832, 15584, 4, 1227128832, 16016, 0, 1227133512, 16016, 0, 1227133512, 16016, 0, 1227133512, 16016, 0, 1227133512, 16016, 0, 1227133512, 16016, 0, 1227133512, 16016, 0, 1227133512, 16016, 0, 1227133512, 16016, 0, 1227133512, 16016, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 16032, 0, 1227133512, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 17408, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22656, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22660, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22664, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22672, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22676, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 22680, 1023, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 23808, 63, 4026531840, 24448, 85, 0, 24448, 85, 0, 24448, 85, 0, 24448, 85, 0, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765, 25024, 1431655765, 1431655765]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
