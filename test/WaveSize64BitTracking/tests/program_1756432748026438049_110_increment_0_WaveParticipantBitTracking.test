#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (13 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((33 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 46))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((51 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    case 1: {
        uint counter2 = 0;
        while ((counter2 < 3)) {
          counter2 = (counter2 + 1);
          if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 60))) {
            if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 46))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((88 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 30)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((95 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 34)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((102 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((111 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter3 = 0;
          while ((counter3 < 3)) {
            counter3 = (counter3 + 1);
            if ((WaveGetLaneIndex() == 30)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((128 << 6) | (counter3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (137 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (142 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (151 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 396
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2112, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2128, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 2144, 136348168, 2181570690, 3268, 8, 2181562368, 3268, 8, 2181562368, 3268, 8, 2181562368, 3268, 8, 2181562368, 3272, 8, 2181562368, 3272, 8, 2181562368, 3272, 8, 2181562368, 3272, 8, 2181562368, 3284, 8, 2181562368, 3284, 8, 2181562368, 3284, 8, 2181562368, 3284, 8, 2181562368, 3288, 8, 2181562368, 3288, 8, 2181562368, 3288, 8, 2181562368, 3288, 8, 2181562368, 3300, 8, 2181562368, 3300, 8, 2181562368, 3300, 8, 2181562368, 3300, 8, 2181562368, 3304, 8, 2181562368, 3304, 8, 2181562368, 3304, 8, 2181562368, 3304, 8, 2181562368, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7120, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7136, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 7152, 2181570690, 545392672, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9088, 545392672, 136348168, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530, 9664, 2863311530, 2863311530]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
