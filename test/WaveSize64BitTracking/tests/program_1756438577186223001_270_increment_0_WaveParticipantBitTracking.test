#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 37)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (23 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 11))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (19 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (33 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (42 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() >= 55)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((56 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 35))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((79 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() < 30)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((88 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter0 == 2)) {
          break;
        }
      }
      break;
    }
  }
  for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
    if ((WaveGetLaneIndex() < 16)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((106 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 16))) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((131 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if ((WaveGetLaneIndex() == 37)) {
            result = (result + WaveActiveMax(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((146 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i3 == 1)) {
            continue;
          }
        }
      }
      if ((((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 19))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((174 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() >= 49)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((181 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 426
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1472, 0, 32, 1216, 2112, 8, 1216, 2112, 8, 1216, 2112, 8, 2112, 73, 0, 2112, 73, 0, 2112, 73, 0, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 2688, 272696336, 68174084, 3600, 0, 1224736768, 3600, 0, 1224736768, 3600, 0, 1224736768, 3616, 0, 1224736768, 3616, 0, 1224736768, 3616, 0, 1224736768, 5072, 0, 8, 5076, 0, 8, 5080, 0, 8, 5088, 0, 8, 5092, 0, 8, 5096, 0, 8, 5648, 613566756, 0, 5648, 613566756, 0, 5648, 613566756, 0, 5648, 613566756, 0, 5648, 613566756, 0, 5648, 613566756, 0, 5648, 613566756, 0, 5648, 613566756, 0, 5648, 613566756, 0, 5648, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 5664, 613566756, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6784, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6800, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 6816, 65535, 0, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11584, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11600, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224, 11616, 0, 4294836224]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
