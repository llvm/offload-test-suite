#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() == 20)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((26 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 34)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((33 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 23)) {
            if ((WaveGetLaneIndex() == 14)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (48 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 62)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (55 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if ((WaveGetLaneIndex() >= 59)) {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (65 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        uint counter2 = 0;
        while ((counter2 < 3)) {
          counter2 = (counter2 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((81 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 162
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1680, 1048576, 0, 1684, 1048576, 0, 1688, 1048576, 0, 1696, 1048576, 0, 1700, 1048576, 0, 1704, 1048576, 0, 1712, 1048576, 0, 1716, 1048576, 0, 1720, 1048576, 0, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2128, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2144, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764, 2160, 0, 1431655764]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
