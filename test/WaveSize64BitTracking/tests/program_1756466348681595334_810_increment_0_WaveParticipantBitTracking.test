#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (19 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (28 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 34))) {
            if ((((WaveGetLaneIndex() == 31) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 8))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (62 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (71 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (90 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (99 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((116 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 57)) {
          if ((WaveGetLaneIndex() == 15)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((128 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 41)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((135 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 36)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((142 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((151 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 1)) {
        break;
      }
    }
  }
  break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (163 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (173 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (182 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() >= 52)) {
          result = (result + WaveActiveMin(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((196 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 48))) {
          if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 58))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((216 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 44))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((227 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 4))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((242 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 28)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((249 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (256 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (260 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 393
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1216, 8, 0, 4544, 8521760, 136348168, 4544, 8521760, 136348168, 4544, 8521760, 136348168, 4544, 8521760, 136348168, 4544, 8521760, 136348168, 4544, 8521760, 136348168, 4544, 8521760, 136348168, 4544, 8521760, 136348168, 4544, 8521760, 136348168, 9088, 0, 16, 9104, 0, 16, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9664, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 9680, 1431655765, 1431655765, 11072, 17, 0, 11072, 17, 0, 12560, 0, 1145044992, 12560, 0, 1145044992, 12560, 0, 1145044992, 12576, 0, 1145044992, 12576, 0, 1145044992, 12576, 0, 1145044992, 13840, 17476, 1140850688, 13840, 17476, 1140850688, 13840, 17476, 1140850688, 13840, 17476, 1140850688, 13840, 17476, 1140850688, 13840, 17476, 1140850688, 13856, 17476, 1140850688, 13856, 17476, 1140850688, 13856, 17476, 1140850688, 13856, 17476, 1140850688, 13856, 17476, 1140850688, 13856, 17476, 1140850688, 14544, 68, 1145307136, 14544, 68, 1145307136, 14544, 68, 1145307136, 14544, 68, 1145307136, 14544, 68, 1145307136, 14544, 68, 1145307136, 14560, 68, 1145307136, 14560, 68, 1145307136, 14560, 68, 1145307136, 14560, 68, 1145307136, 14560, 68, 1145307136, 14560, 68, 1145307136, 15952, 71582788, 0, 15952, 71582788, 0, 15952, 71582788, 0, 15952, 71582788, 0, 15952, 71582788, 0, 15952, 71582788, 0, 15952, 71582788, 0, 15968, 71582788, 0, 15968, 71582788, 0, 15968, 71582788, 0, 15968, 71582788, 0, 15968, 71582788, 0, 15968, 71582788, 0, 15968, 71582788, 0, 16384, 559240, 0, 16384, 559240, 0, 16384, 559240, 0, 16384, 559240, 0, 16384, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
