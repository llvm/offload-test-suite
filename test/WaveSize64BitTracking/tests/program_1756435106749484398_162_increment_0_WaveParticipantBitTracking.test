#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (17 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (26 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (30 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (39 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (44 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((68 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((77 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 59))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((96 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() < 27)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((113 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 39))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((140 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((154 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 58))) {
            if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 58))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((190 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 57))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((209 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((218 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 55))) {
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 51))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (236 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 63))) {
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 55))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (254 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 46))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (265 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (269 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (279 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (288 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 765
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 2816, 1145324612, 1145324612, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4356, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4360, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4372, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4376, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4932, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4936, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4948, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 4952, 2290649224, 2290649224, 6144, 0, 134219776, 6144, 0, 134219776, 6160, 0, 134219776, 6160, 0, 134219776, 7248, 19173961, 0, 7248, 19173961, 0, 7248, 19173961, 0, 7248, 19173961, 0, 7248, 19173961, 0, 7248, 19173961, 0, 7248, 19173961, 0, 7248, 19173961, 0, 7248, 19173961, 0, 7264, 19173961, 0, 7264, 19173961, 0, 7264, 19173961, 0, 7264, 19173961, 0, 7264, 19173961, 0, 7264, 19173961, 0, 7264, 19173961, 0, 7264, 19173961, 0, 7264, 19173961, 0, 7280, 19173961, 0, 7280, 19173961, 0, 7280, 19173961, 0, 7280, 19173961, 0, 7280, 19173961, 0, 7280, 19173961, 0, 7280, 19173961, 0, 7280, 19173961, 0, 7280, 19173961, 0, 8960, 0, 256, 8976, 0, 256, 8992, 0, 256, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9856, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9872, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 9888, 272696336, 68174084, 12160, 0, 67108864, 12176, 0, 67108864, 12192, 0, 67108864, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13952, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13968, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 13984, 272696336, 68174084, 15104, 36, 1224736768, 15104, 36, 1224736768, 15104, 36, 1224736768, 15104, 36, 1224736768, 15104, 36, 1224736768, 16256, 4, 0, 16960, 4, 1224736768, 16960, 4, 1224736768, 16960, 4, 1224736768, 16960, 4, 1224736768, 17856, 85, 0, 17856, 85, 0, 17856, 85, 0, 17856, 85, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
