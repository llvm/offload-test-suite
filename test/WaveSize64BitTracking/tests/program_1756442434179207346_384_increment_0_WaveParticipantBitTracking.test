#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 53))) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((21 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 45))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((50 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 20))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((73 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 30)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (90 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 28)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (97 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() >= 37)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (104 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 56))) {
          result = (result + WaveActiveSum(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((122 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 56))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((137 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter2 == 2)) {
          break;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 192
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1344, 5, 1430257664, 1344, 5, 1430257664, 1344, 5, 1430257664, 1344, 5, 1430257664, 1344, 5, 1430257664, 1344, 5, 1430257664, 1344, 5, 1430257664, 1360, 5, 1430257664, 1360, 5, 1430257664, 1360, 5, 1430257664, 1360, 5, 1430257664, 1360, 5, 1430257664, 1360, 5, 1430257664, 1360, 5, 1430257664, 3200, 4096, 4194304, 3200, 4096, 4194304, 3204, 4096, 4194304, 3204, 4096, 4194304, 3208, 4096, 4194304, 3208, 4096, 4194304, 3216, 4096, 4194304, 3216, 4096, 4194304, 3220, 4096, 4194304, 3220, 4096, 4194304, 3224, 4096, 4194304, 3224, 4096, 4194304, 4672, 17825796, 67108864, 4672, 17825796, 67108864, 4672, 17825796, 67108864, 4672, 17825796, 67108864, 4676, 17825796, 67108864, 4676, 17825796, 67108864, 4676, 17825796, 67108864, 4676, 17825796, 67108864, 4680, 17825796, 67108864, 4680, 17825796, 67108864, 4680, 17825796, 67108864, 4680, 17825796, 67108864, 4688, 17825796, 67108864, 4688, 17825796, 67108864, 4688, 17825796, 67108864, 4688, 17825796, 67108864, 4692, 17825796, 67108864, 4692, 17825796, 67108864, 4692, 17825796, 67108864, 4692, 17825796, 67108864, 4696, 17825796, 67108864, 4696, 17825796, 67108864, 4696, 17825796, 67108864, 4696, 17825796, 67108864, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520, 6656, 0, 2863311520]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
