#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() == 56)) {
        if ((WaveGetLaneIndex() == 14)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (14 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 60))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((37 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 21))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((52 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 38)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (59 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (68 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() >= 46)) {
        if ((WaveGetLaneIndex() >= 46)) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (78 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (89 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 42))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((107 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() < 31)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((124 << 6) | (counter1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (129 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 525
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4352, 1090785345, 272696336, 4992, 0, 2454257664, 4992, 0, 2454257664, 4992, 0, 2454257664, 4992, 0, 2454257664, 4992, 0, 2454257664, 4992, 0, 2454257664, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 5696, 1090785345, 272696336, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6864, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6880, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 6896, 9362, 613566464, 7952, 306783378, 0, 7952, 306783378, 0, 7952, 306783378, 0, 7952, 306783378, 0, 7952, 306783378, 0, 7952, 306783378, 0, 7952, 306783378, 0, 7952, 306783378, 0, 7952, 306783378, 0, 7952, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7956, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7960, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7968, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7972, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7976, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7984, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7988, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 7992, 306783378, 0, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513, 8256, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
