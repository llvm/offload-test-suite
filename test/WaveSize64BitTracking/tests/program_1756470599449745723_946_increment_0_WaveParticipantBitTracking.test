#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 36))) {
    if (((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 55))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (19 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 55)) {
      if ((WaveGetLaneIndex() == 58)) {
        result = (result + WaveActiveMin(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (29 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 41)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((46 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          break;
        }
      }
    }
    if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 56))) {
      result = (result + WaveActiveMin(1));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (64 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 62))) {
            if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 47))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (88 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 56))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (99 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if ((WaveGetLaneIndex() < 8)) {
            if ((WaveGetLaneIndex() >= 40)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (109 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() < 13)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (116 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (121 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (131 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 14))) {
            if ((((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 14))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (165 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          uint counter1 = 0;
          while ((counter1 < 3)) {
            counter1 = (counter1 + 1);
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((181 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((190 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (194 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 240
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4096, 0, 16, 5632, 65, 0, 5632, 65, 0, 6336, 65, 0, 6336, 65, 0, 7424, 16, 0, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 7744, 68174084, 1090785345, 8384, 73, 0, 8384, 73, 0, 8384, 73, 0, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11600, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11616, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 11632, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12176, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12192, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168, 12208, 545392672, 136348168]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
