#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() == 56)) {
        if ((WaveGetLaneIndex() == 59)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 6))) {
          if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 50))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (42 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 46))) {
              result = (result + WaveActiveMax(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((61 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 61))) {
              result = (result + WaveActiveMax(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((72 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i0 == 1)) {
              continue;
            }
          }
        }
        if ((WaveGetLaneIndex() == 54)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (84 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (93 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
          if ((WaveGetLaneIndex() == 18)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((115 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 58)) {
            if ((WaveGetLaneIndex() == 8)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((125 << 6) | (counter1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 1)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((132 << 6) | (counter1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((141 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((150 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 6)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((157 << 6) | (counter1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((177 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((193 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((204 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((213 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((224 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i3 == 1)) {
        continue;
      }
      if ((i3 == 2)) {
        break;
      }
    }
  }
  case 1: {
    for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
      if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 56))) {
        if (((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 50))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((264 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 56))) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((275 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() == 34)) {
    if ((WaveGetLaneIndex() == 55)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (285 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter5 = 0;
    while ((counter5 < 3)) {
      counter5 = (counter5 + 1);
      if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 53))) {
        result = (result + WaveActiveMax(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((303 << 6) | (counter5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 22)) {
        if ((WaveGetLaneIndex() < 18)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((313 << 6) | (counter5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 13)) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((320 << 6) | (counter5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 56))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((331 << 6) | (counter5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 51)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (338 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 990
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5952, 272696336, 68174084, 5952, 272696336, 68174084, 5952, 272696336, 68174084, 5952, 272696336, 68174084, 5952, 272696336, 68174084, 5952, 272696336, 68174084, 5952, 272696336, 68174084, 5952, 272696336, 68174084, 5952, 272696336, 68174084, 5952, 272696336, 68174084, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9040, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9044, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9056, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9060, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9072, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9076, 68174084, 1090785345, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9616, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9620, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9632, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9636, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9648, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 9652, 545392672, 136348168, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12352, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12368, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 12384, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14336, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14352, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 14368, 1431655765, 1431655765, 17600, 0, 16777216, 17616, 0, 16777216]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
