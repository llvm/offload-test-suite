#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 57))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((44 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 54))) {
            result = (result + WaveActiveSum(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((55 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            break;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((69 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
          if ((WaveGetLaneIndex() >= 32)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((92 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 25)) {
            result = (result + WaveActiveMin(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((99 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i3 == 1)) {
            continue;
          }
        }
        if ((WaveGetLaneIndex() == 58)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((111 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 61))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (178 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 18)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (174 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (168 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 59))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (164 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 37)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (158 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
  uint counter4 = 0;
  while ((counter4 < 2)) {
    counter4 = (counter4 + 1);
    if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 55))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((196 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 42))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((207 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 765
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 2816, 0, 2048, 2820, 0, 2048, 2832, 0, 2048, 2836, 0, 2048, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4416, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 4432, 272696336, 68174084, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5888, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5892, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5904, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 5908, 0, 1227133513, 6336, 9586980, 0, 6336, 9586980, 0, 6336, 9586980, 0, 6336, 9586980, 0, 6336, 9586980, 0, 6336, 9586980, 0, 6336, 9586980, 0, 6336, 9586980, 0, 6340, 9586980, 0, 6340, 9586980, 0, 6340, 9586980, 0, 6340, 9586980, 0, 6340, 9586980, 0, 6340, 9586980, 0, 6340, 9586980, 0, 6340, 9586980, 0, 6352, 9586980, 0, 6352, 9586980, 0, 6352, 9586980, 0, 6352, 9586980, 0, 6352, 9586980, 0, 6352, 9586980, 0, 6352, 9586980, 0, 6352, 9586980, 0, 6356, 9586980, 0, 6356, 9586980, 0, 6356, 9586980, 0, 6356, 9586980, 0, 6356, 9586980, 0, 6356, 9586980, 0, 6356, 9586980, 0, 6356, 9586980, 0, 11392, 1073741826, 805306384, 11392, 1073741826, 805306384, 11392, 1073741826, 805306384, 11392, 1073741826, 805306384, 11392, 1073741826, 805306384, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 11136, 262141, 0, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10752, 357826560, 1163220293, 10496, 2097152, 134217856, 10496, 2097152, 134217856, 10496, 2097152, 134217856, 10112, 0, 32, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12560, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 12576, 524287, 4286578688, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13264, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272, 13280, 7, 4294966272]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
