#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 52))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((22 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 38))) {
      if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 7))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((58 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() < 21)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((75 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 1)) {
          continue;
        }
        if ((i1 == 2)) {
          break;
        }
      }
      if ((((WaveGetLaneIndex() == 30) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 41))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((98 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    uint counter2 = 0;
    while ((counter2 < 2)) {
      counter2 = (counter2 + 1);
      if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 24))) {
        result = (result + WaveActiveMax(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((120 << 6) | (i0 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 15))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((135 << 6) | (i0 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if ((((WaveGetLaneIndex() == 26) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 24))) {
    result = (result + WaveActiveSum(6));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((150 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 102
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1408, 1048576, 1048592, 1408, 1048576, 1048592, 1408, 1048576, 1048592, 1424, 1048576, 1048592, 1424, 1048576, 1048592, 1424, 1048576, 1048592, 4800, 8192, 0, 4804, 8192, 0, 4808, 8192, 0, 4816, 8192, 0, 4820, 8192, 0, 4824, 8192, 0, 7684, 16809984, 0, 7684, 16809984, 0, 7688, 16809984, 0, 7688, 16809984, 0, 7700, 16809984, 0, 7700, 16809984, 0, 7704, 16809984, 0, 7704, 16809984, 0, 8644, 294912, 0, 8644, 294912, 0, 8648, 294912, 0, 8648, 294912, 0, 8660, 294912, 0, 8660, 294912, 0, 8664, 294912, 0, 8664, 294912, 0, 9600, 83886080, 8, 9600, 83886080, 8, 9600, 83886080, 8, 9616, 83886080, 8, 9616, 83886080, 8, 9616, 83886080, 8]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
