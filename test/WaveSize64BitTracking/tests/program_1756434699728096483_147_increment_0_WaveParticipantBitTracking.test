#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 49))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((25 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 32)) {
          if ((WaveGetLaneIndex() >= 60)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((35 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i0 == 1)) {
          continue;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 61))) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 62))) {
          result = (result + WaveActiveMax(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (56 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 44))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (67 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((83 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((92 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (97 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (101 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if ((WaveGetLaneIndex() < 30)) {
    if ((WaveGetLaneIndex() < 14)) {
      result = (result + WaveActiveMax(6));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (111 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() >= 49)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (118 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 396
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3584, 219, 2147483648, 3584, 219, 2147483648, 3584, 219, 2147483648, 3584, 219, 2147483648, 3584, 219, 2147483648, 3584, 219, 2147483648, 3584, 219, 2147483648, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5328, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5344, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5360, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5904, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5920, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 5936, 2317910016, 42608802, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 6208, 613566756, 1227133513, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0, 7104, 16383, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
