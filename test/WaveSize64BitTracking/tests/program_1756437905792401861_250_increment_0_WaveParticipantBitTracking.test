#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 17))) {
          if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((53 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if (((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 32))) {
              result = (result + WaveActiveSum(7));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((71 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 10))) {
            result = (result + WaveActiveMin(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((86 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((95 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (100 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (107 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (117 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 5))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((148 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((162 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 201
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6080, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6096, 572662306, 572662306, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6400, 1145324612, 1145324612, 6848, 559240, 0, 6848, 559240, 0, 6848, 559240, 0, 6848, 559240, 0, 6848, 559240, 0, 7488, 85, 0, 7488, 85, 0, 7488, 85, 0, 7488, 85, 0, 9472, 134217760, 131104, 9472, 134217760, 131104, 9472, 134217760, 131104, 9472, 134217760, 131104, 9488, 134217760, 131104, 9488, 134217760, 131104, 9488, 134217760, 131104, 9488, 134217760, 131104]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
