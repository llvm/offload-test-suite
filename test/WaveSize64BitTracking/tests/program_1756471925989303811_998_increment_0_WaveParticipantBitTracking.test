#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (28 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if ((WaveGetLaneIndex() >= 34)) {
            if ((WaveGetLaneIndex() >= 55)) {
              result = (result + WaveActiveMin(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (38 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((55 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((64 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 47))) {
            if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 38))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (82 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
              if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 53))) {
                result = (result + WaveActiveMin(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((101 << 6) | (i1 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((i1 == 1)) {
                continue;
              }
            }
          } else {
          if ((WaveGetLaneIndex() == 3)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (111 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
            if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 1))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((142 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 8))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((167 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 59))) {
        if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 61))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (204 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 63))) {
          if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 59))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (234 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((251 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i3 == 1)) {
              break;
            }
          }
          if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 53))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (275 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (284 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (289 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  uint counter4 = 0;
  while ((counter4 < 3)) {
    counter4 = (counter4 + 1);
    uint counter5 = 0;
    while ((counter5 < 3)) {
      counter5 = (counter5 + 1);
      if ((WaveGetLaneIndex() >= 52)) {
        result = (result + WaveActiveMax(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((310 << 6) | (counter4 << 4)) | (counter5 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 735
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 2432, 0, 612368384, 2432, 0, 612368384, 2432, 0, 612368384, 3520, 0, 68174084, 3520, 0, 68174084, 3520, 0, 68174084, 3520, 0, 68174084, 3520, 0, 68174084, 3536, 0, 68174084, 3536, 0, 68174084, 3536, 0, 68174084, 3536, 0, 68174084, 3536, 0, 68174084, 3552, 0, 68174084, 3552, 0, 68174084, 3552, 0, 68174084, 3552, 0, 68174084, 3552, 0, 68174084, 4096, 0, 545392672, 4096, 0, 545392672, 4096, 0, 545392672, 4096, 0, 545392672, 4096, 0, 545392672, 4112, 0, 545392672, 4112, 0, 545392672, 4112, 0, 545392672, 4112, 0, 545392672, 4112, 0, 545392672, 4128, 0, 545392672, 4128, 0, 545392672, 4128, 0, 545392672, 4128, 0, 545392672, 4128, 0, 545392672, 9088, 0, 1073741824, 9104, 0, 1073741824, 10688, 256, 16777216, 10688, 256, 16777216, 10704, 256, 16777216, 10704, 256, 16777216, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18176, 1363481681, 340870420, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 18496, 4294967295, 4294967295, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19860, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19864, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19868, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19876, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19880, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19884, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19892, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19896, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720, 19900, 0, 4293918720]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
