#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 28)) {
    if ((WaveGetLaneIndex() < 1)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 50))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((27 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() < 10)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((41 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 9)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((48 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter1 == 2)) {
          break;
        }
      }
    }
    if ((WaveGetLaneIndex() >= 58)) {
      result = (result + WaveActiveSum(10));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (58 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (71 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (80 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              uint counter2 = 0;
              while ((counter2 < 2)) {
                counter2 = (counter2 + 1);
                if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 62))) {
                  result = (result + WaveActiveMax(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((101 << 6) | (counter2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              uint counter3 = 0;
              while ((counter3 < 3)) {
                counter3 = (counter3 + 1);
                if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 57))) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((119 << 6) | (counter3 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (124 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 56))) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 46))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (142 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 57))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((161 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 27)) {
            if ((WaveGetLaneIndex() == 58)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((171 << 6) | (i4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 42)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((180 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 17)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((187 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 63))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((198 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i4 == 1)) {
          continue;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 528
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 1, 0, 1744, 63, 0, 1744, 63, 0, 1744, 63, 0, 1744, 63, 0, 1744, 63, 0, 1744, 63, 0, 1760, 63, 0, 1760, 63, 0, 1760, 63, 0, 1760, 63, 0, 1760, 63, 0, 1760, 63, 0, 1776, 63, 0, 1776, 63, 0, 1776, 63, 0, 1776, 63, 0, 1776, 63, 0, 1776, 63, 0, 2644, 1023, 0, 2644, 1023, 0, 2644, 1023, 0, 2644, 1023, 0, 2644, 1023, 0, 2644, 1023, 0, 2644, 1023, 0, 2644, 1023, 0, 2644, 1023, 0, 2644, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2648, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2660, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2664, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2676, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 2680, 1023, 0, 3092, 511, 0, 3092, 511, 0, 3092, 511, 0, 3092, 511, 0, 3092, 511, 0, 3092, 511, 0, 3092, 511, 0, 3092, 511, 0, 3092, 511, 0, 3096, 511, 0, 3096, 511, 0, 3096, 511, 0, 3096, 511, 0, 3096, 511, 0, 3096, 511, 0, 3096, 511, 0, 3096, 511, 0, 3096, 511, 0, 3108, 511, 0, 3108, 511, 0, 3108, 511, 0, 3108, 511, 0, 3108, 511, 0, 3108, 511, 0, 3108, 511, 0, 3108, 511, 0, 3108, 511, 0, 3112, 511, 0, 3112, 511, 0, 3112, 511, 0, 3112, 511, 0, 3112, 511, 0, 3112, 511, 0, 3112, 511, 0, 3112, 511, 0, 3112, 511, 0, 3124, 511, 0, 3124, 511, 0, 3124, 511, 0, 3124, 511, 0, 3124, 511, 0, 3124, 511, 0, 3124, 511, 0, 3124, 511, 0, 3124, 511, 0, 3128, 511, 0, 3128, 511, 0, 3128, 511, 0, 3128, 511, 0, 3128, 511, 0, 3128, 511, 0, 3128, 511, 0, 3128, 511, 0, 3128, 511, 0, 4544, 65, 0, 4544, 65, 0, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 5120, 272696336, 68174084, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 7936, 68174084, 1090785345, 9088, 10, 2852126720, 9088, 10, 2852126720, 9088, 10, 2852126720, 9088, 10, 2852126720, 9088, 10, 2852126720, 9088, 10, 2852126720, 10304, 10, 2852126720, 10304, 10, 2852126720, 10304, 10, 2852126720, 10304, 10, 2852126720, 10304, 10, 2852126720, 10304, 10, 2852126720, 10320, 10, 2852126720, 10320, 10, 2852126720, 10320, 10, 2852126720, 10320, 10, 2852126720, 10320, 10, 2852126720, 10320, 10, 2852126720, 12672, 0, 2147483648, 12688, 0, 2147483648]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
