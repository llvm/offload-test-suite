#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((19 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((30 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (39 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (44 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() < 11)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((61 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 54))) {
            result = (result + WaveActiveMax(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((80 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 43))) {
            if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 45))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((98 << 6) | (counter1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((107 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((116 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((counter1 == 2)) {
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (128 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() == 0)) {
    if ((((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 60))) {
      if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 56))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (161 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (175 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (184 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 40))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (203 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 10)) {
      result = (result + WaveActiveSum(10));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (210 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1227
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1216, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1232, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1248, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1920, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1936, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 1952, 1090785345, 272696336, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2496, 272696336, 68174084, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 2816, 613566756, 1227133513, 3920, 1365, 0, 3920, 1365, 0, 3920, 1365, 0, 3920, 1365, 0, 3920, 1365, 0, 3920, 1365, 0, 3936, 1365, 0, 3936, 1365, 0, 3936, 1365, 0, 3936, 1365, 0, 3936, 1365, 0, 3936, 1365, 0, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5136, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5140, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5144, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5152, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5156, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 5160, 1365, 1430257664, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6288, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6292, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6296, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6304, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6308, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6312, 85, 1431650304, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6864, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6868, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6872, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6880, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6884, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 6888, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7440, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7444, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7448, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7456, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7460, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365, 7464, 1431568384, 1365]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
