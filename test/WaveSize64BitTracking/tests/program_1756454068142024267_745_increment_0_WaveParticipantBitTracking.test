#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() >= 35)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((14 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 62))) {
            if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 53))) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((66 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() == 26) || (WaveGetLaneIndex() == 45))) {
            if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 56))) {
              result = (result + WaveActiveMin(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((88 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 55))) {
            if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 50))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((106 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 46))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((117 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((124 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
    if ((WaveGetLaneIndex() >= 48)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((131 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 486
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [7492, 4, 1140850688, 7492, 4, 1140850688, 7492, 4, 1140850688, 7496, 4, 1140850688, 7496, 4, 1140850688, 7496, 4, 1140850688, 7500, 4, 1140850688, 7500, 4, 1140850688, 7500, 4, 1140850688, 7508, 4, 1140850688, 7508, 4, 1140850688, 7508, 4, 1140850688, 7512, 4, 1140850688, 7512, 4, 1140850688, 7512, 4, 1140850688, 7516, 4, 1140850688, 7516, 4, 1140850688, 7516, 4, 1140850688, 7940, 559240, 0, 7940, 559240, 0, 7940, 559240, 0, 7940, 559240, 0, 7940, 559240, 0, 7944, 559240, 0, 7944, 559240, 0, 7944, 559240, 0, 7944, 559240, 0, 7944, 559240, 0, 7948, 559240, 0, 7948, 559240, 0, 7948, 559240, 0, 7948, 559240, 0, 7948, 559240, 0, 7956, 559240, 0, 7956, 559240, 0, 7956, 559240, 0, 7956, 559240, 0, 7956, 559240, 0, 7960, 559240, 0, 7960, 559240, 0, 7960, 559240, 0, 7960, 559240, 0, 7960, 559240, 0, 7964, 559240, 0, 7964, 559240, 0, 7964, 559240, 0, 7964, 559240, 0, 7964, 559240, 0, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8384, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 8400, 0, 4294901760, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 896, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 912, 0, 4294967288, 6788, 68, 1140850688, 6788, 68, 1140850688, 6788, 68, 1140850688, 6788, 68, 1140850688, 6792, 68, 1140850688, 6792, 68, 1140850688, 6792, 68, 1140850688, 6792, 68, 1140850688, 6796, 68, 1140850688, 6796, 68, 1140850688, 6796, 68, 1140850688, 6796, 68, 1140850688, 6804, 68, 1140850688, 6804, 68, 1140850688, 6804, 68, 1140850688, 6804, 68, 1140850688, 6808, 68, 1140850688, 6808, 68, 1140850688, 6808, 68, 1140850688, 6808, 68, 1140850688, 6812, 68, 1140850688, 6812, 68, 1140850688, 6812, 68, 1140850688, 6812, 68, 1140850688]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
