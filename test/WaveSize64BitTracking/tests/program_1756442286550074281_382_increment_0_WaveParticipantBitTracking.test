#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 20)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((24 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 45))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((43 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 34))) {
            if ((((WaveGetLaneIndex() == 31) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 45))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((77 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 7))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((96 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((i1 == 1)) {
            continue;
          }
        }
        if ((WaveGetLaneIndex() == 29)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((106 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (111 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (121 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (130 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (140 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (149 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (154 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 60))) {
          if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 45))) {
            result = (result + WaveActiveMin(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((180 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((190 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((199 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 54))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((210 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 43))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((225 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 57))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((236 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 62))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((247 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 447
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 2752, 18, 613564416, 2752, 18, 613564416, 2752, 18, 613564416, 2752, 18, 613564416, 2752, 18, 613564416, 2752, 18, 613564416, 2752, 18, 613564416, 2752, 18, 613564416, 2756, 18, 613564416, 2756, 18, 613564416, 2756, 18, 613564416, 2756, 18, 613564416, 2756, 18, 613564416, 2756, 18, 613564416, 2756, 18, 613564416, 2756, 18, 613564416, 2760, 18, 613564416, 2760, 18, 613564416, 2760, 18, 613564416, 2760, 18, 613564416, 2760, 18, 613564416, 2760, 18, 613564416, 2760, 18, 613564416, 2760, 18, 613564416, 2768, 18, 613564416, 2768, 18, 613564416, 2768, 18, 613564416, 2768, 18, 613564416, 2768, 18, 613564416, 2768, 18, 613564416, 2768, 18, 613564416, 2768, 18, 613564416, 2772, 18, 613564416, 2772, 18, 613564416, 2772, 18, 613564416, 2772, 18, 613564416, 2772, 18, 613564416, 2772, 18, 613564416, 2772, 18, 613564416, 2772, 18, 613564416, 2776, 18, 613564416, 2776, 18, 613564416, 2776, 18, 613564416, 2776, 18, 613564416, 2776, 18, 613564416, 2776, 18, 613564416, 2776, 18, 613564416, 2776, 18, 613564416, 2784, 18, 613564416, 2784, 18, 613564416, 2784, 18, 613564416, 2784, 18, 613564416, 2784, 18, 613564416, 2784, 18, 613564416, 2784, 18, 613564416, 2784, 18, 613564416, 2788, 18, 613564416, 2788, 18, 613564416, 2788, 18, 613564416, 2788, 18, 613564416, 2788, 18, 613564416, 2788, 18, 613564416, 2788, 18, 613564416, 2788, 18, 613564416, 2792, 18, 613564416, 2792, 18, 613564416, 2792, 18, 613564416, 2792, 18, 613564416, 2792, 18, 613564416, 2792, 18, 613564416, 2792, 18, 613564416, 2792, 18, 613564416, 6144, 0, 4, 6148, 0, 4, 6152, 0, 4, 6160, 0, 4, 6164, 0, 4, 6168, 0, 4, 6176, 0, 4, 6180, 0, 4, 6184, 0, 4, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7104, 613566756, 1227133513, 7744, 85, 0, 7744, 85, 0, 7744, 85, 0, 7744, 85, 0, 8960, 17, 0, 8960, 17, 0, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 9856, 1145324612, 1145324612, 11520, 2184, 2147483648, 11520, 2184, 2147483648, 11520, 2184, 2147483648, 11520, 2184, 2147483648, 11536, 2184, 2147483648, 11536, 2184, 2147483648, 11536, 2184, 2147483648, 11536, 2184, 2147483648, 13440, 2184, 2147483648, 13440, 2184, 2147483648, 13440, 2184, 2147483648, 13440, 2184, 2147483648, 13456, 2184, 2147483648, 13456, 2184, 2147483648, 13456, 2184, 2147483648, 13456, 2184, 2147483648, 14400, 0, 2048, 14416, 0, 2048, 15808, 8, 2147483648, 15808, 8, 2147483648, 15824, 8, 2147483648, 15824, 8, 2147483648]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
