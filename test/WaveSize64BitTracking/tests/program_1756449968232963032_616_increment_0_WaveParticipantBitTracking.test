#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((35 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 42))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((53 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (62 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (67 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 54))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((90 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 47))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((105 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 171
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2240, 0, 256, 2256, 0, 256, 3396, 1, 286330880, 3396, 1, 286330880, 3396, 1, 286330880, 3396, 1, 286330880, 3396, 1, 286330880, 3396, 1, 286330880, 3400, 1, 286330880, 3400, 1, 286330880, 3400, 1, 286330880, 3400, 1, 286330880, 3400, 1, 286330880, 3400, 1, 286330880, 3404, 1, 286330880, 3404, 1, 286330880, 3404, 1, 286330880, 3404, 1, 286330880, 3404, 1, 286330880, 3404, 1, 286330880, 3412, 1, 286330880, 3412, 1, 286330880, 3412, 1, 286330880, 3412, 1, 286330880, 3412, 1, 286330880, 3412, 1, 286330880, 3416, 1, 286330880, 3416, 1, 286330880, 3416, 1, 286330880, 3416, 1, 286330880, 3416, 1, 286330880, 3416, 1, 286330880, 3420, 1, 286330880, 3420, 1, 286330880, 3420, 1, 286330880, 3420, 1, 286330880, 3420, 1, 286330880, 3420, 1, 286330880, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 4288, 1145324612, 1145324612, 6720, 0, 32768, 6736, 0, 32768, 6752, 0, 32768]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
