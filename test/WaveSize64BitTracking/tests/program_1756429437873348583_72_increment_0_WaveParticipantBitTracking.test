#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() == 30) || (WaveGetLaneIndex() == 54))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (42 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 51))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (38 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 52))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (34 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (52 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((68 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((84 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((93 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((102 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((111 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 50)) || (WaveGetLaneIndex() == 52))) {
        if (((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 36))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (148 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
            if (((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 52))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((182 << 6) | (counter1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 10))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((201 << 6) | (counter1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        if ((((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 58)) || (WaveGetLaneIndex() == 39))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (224 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (234 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 25))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((261 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 45)) {
              if ((WaveGetLaneIndex() == 31)) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((271 << 6) | (i3 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() == 13)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((278 << 6) | (i3 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (288 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 4))) {
                if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 2))) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (318 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 36))) {
                  result = (result + WaveActiveMin(1));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (341 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (346 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (351 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 774
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2688, 1073741824, 4194304, 2688, 1073741824, 4194304, 2432, 2, 525568, 2432, 2, 525568, 2432, 2, 525568, 2432, 2, 525568, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 2176, 524285, 4289724416, 3328, 85, 0, 3328, 85, 0, 3328, 85, 0, 3328, 85, 0, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4368, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 4384, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5392, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 5408, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 16704, 33554432, 131072, 16704, 33554432, 131072, 16720, 33554432, 131072, 16720, 33554432, 131072, 16736, 33554432, 131072, 16736, 33554432, 131072, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513, 22464, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
