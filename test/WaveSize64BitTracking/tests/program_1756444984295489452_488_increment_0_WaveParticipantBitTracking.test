#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((22 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (36 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            uint counter1 = 0;
            while ((counter1 < 3)) {
              counter1 = (counter1 + 1);
              if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 43))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((58 << 6) | (counter1 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 48))) {
                result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((79 << 6) | (counter1 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (88 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (93 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (97 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
                if (((WaveGetLaneIndex() & 1) == 0)) {
                  result = (result + WaveActiveMax(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((120 << 6) | (i2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if (((WaveGetLaneIndex() & 1) == 1)) {
                  result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((131 << 6) | (i2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 53))) {
                if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 48))) {
                  result = (result + WaveActiveSum(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (149 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (154 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (163 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
            for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
              if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 49))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((194 << 6) | (i3 << 4)) | (i4 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if ((i3 == 2)) {
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (202 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (216 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (225 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (235 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (244 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (249 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (256 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 516
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1408, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1424, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 1440, 136348168, 2181570690, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 10432, 272696336, 68174084, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 12928, 613566756, 1227133513, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 13824, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 14400, 2863311530, 2863311530, 15040, 17, 0, 15040, 17, 0, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15616, 286331153, 286331153, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 16384, 838860, 0, 16384, 838860, 0, 16384, 838860, 0, 16384, 838860, 0, 16384, 838860, 0, 16384, 838860, 0, 16384, 838860, 0, 16384, 838860, 0, 16384, 838860, 0, 16384, 838860, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
