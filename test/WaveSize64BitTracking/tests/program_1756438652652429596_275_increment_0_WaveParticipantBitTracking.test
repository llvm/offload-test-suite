#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 47))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (64 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 0))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (58 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 52))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (52 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 45)) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (46 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 57)) {
    result = (result + WaveActiveMin(5));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (42 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((83 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 38)) {
          if ((WaveGetLaneIndex() == 40)) {
            result = (result + WaveActiveSum(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((93 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter0 == 2)) {
          break;
        }
      }
      break;
    }
  case 1: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 52))) {
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 56))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((121 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 33)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((128 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 330
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 4096, 63, 4294934528, 3712, 73728, 16, 3712, 73728, 16, 3712, 73728, 16, 3328, 4096, 0, 2944, 0, 8192, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5328, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 5344, 1431655765, 1431655765, 7760, 2, 2852126720, 7760, 2, 2852126720, 7760, 2, 2852126720, 7760, 2, 2852126720, 7760, 2, 2852126720, 7776, 2, 2852126720, 7776, 2, 2852126720, 7776, 2, 2852126720, 7776, 2, 2852126720, 7776, 2, 2852126720, 7792, 2, 2852126720, 7792, 2, 2852126720, 7792, 2, 2852126720, 7792, 2, 2852126720, 7792, 2, 2852126720, 8208, 0, 2, 8224, 0, 2, 8240, 0, 2]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
