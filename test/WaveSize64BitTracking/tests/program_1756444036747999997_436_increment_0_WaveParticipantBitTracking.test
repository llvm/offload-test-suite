#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 53))) {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 45))) {
            result = (result + WaveActiveMin(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((31 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (45 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (50 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (54 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if ((((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 59)) || (WaveGetLaneIndex() == 45))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (77 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (86 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  uint counter1 = 0;
  while ((counter1 < 2)) {
    counter1 = (counter1 + 1);
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((104 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((118 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 61))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((129 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((138 << 6) | (counter1 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (147 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (157 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 11)) {
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 62))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((187 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter3 = 0;
          while ((counter3 < 3)) {
            counter3 = (counter3 + 1);
            if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 0))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((217 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 44))) {
              result = (result + WaveActiveSum(8));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((232 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 54))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((253 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 2)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (263 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (268 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
    if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 56))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((297 << 6) | (i4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 14))) {
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 24))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((335 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((345 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((354 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 60))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((373 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 32))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((384 << 6) | (i4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 873
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3200, 8388608, 2097160, 3200, 8388608, 2097160, 3200, 8388608, 2097160, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 5504, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6672, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 6688, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7568, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 7584, 2854922922, 2861214370, 8272, 21, 1073741824, 8272, 21, 1073741824, 8272, 21, 1073741824, 8272, 21, 1073741824, 8288, 21, 1073741824, 8288, 21, 1073741824, 8288, 21, 1073741824, 8288, 21, 1073741824, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8848, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 8864, 1431655765, 1431655765, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 9408, 2854922922, 2861214370, 10048, 73, 0, 10048, 73, 0, 10048, 73, 0, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 17152, 613566756, 1227133513, 19008, 2147483664, 16785408, 19008, 2147483664, 16785408, 19008, 2147483664, 16785408, 19008, 2147483664, 16785408, 19024, 2147483664, 16785408, 19024, 2147483664, 16785408, 19024, 2147483664, 16785408, 19024, 2147483664, 16785408, 19040, 2147483664, 16785408, 19040, 2147483664, 16785408, 19040, 2147483664, 16785408, 19040, 2147483664, 16785408, 24576, 65536, 1, 24576, 65536, 1, 24592, 65536, 1, 24592, 65536, 1, 24608, 65536, 1, 24608, 65536, 1]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
