#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 16)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((27 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        } else {
        if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 0))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((42 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((61 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((70 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 51))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((93 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((102 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 1)) {
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (114 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (119 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 46))) {
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (154 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 28)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (163 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((179 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 1: {
    uint counter3 = 0;
    while ((counter3 < 2)) {
      counter3 = (counter3 + 1);
      if ((WaveGetLaneIndex() == 16)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((193 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter4 = 0;
      while ((counter4 < 2)) {
        counter4 = (counter4 + 1);
        if ((WaveGetLaneIndex() == 57)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((207 << 6) | (counter3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 57)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((214 << 6) | (counter3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter4 == 1)) {
          break;
        }
      }
      if ((counter3 == 1)) {
        break;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (224 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 54))) {
    if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 51))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (254 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 47))) {
      if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 42))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (272 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() >= 39)) {
        if ((WaveGetLaneIndex() < 24)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (282 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (292 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (301 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (306 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (313 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (317 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
      }
    }
    if ((((WaveGetLaneIndex() == 24) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 32))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (332 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 474
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2688, 1, 4194304, 2688, 1, 4194304, 2704, 1, 4194304, 2704, 1, 4194304, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3904, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3908, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3920, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 3924, 136348168, 2181570690, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4480, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4484, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4496, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 4500, 1090785345, 272696336, 5952, 262144, 532480, 5952, 262144, 532480, 5952, 262144, 532480, 5968, 262144, 532480, 5968, 262144, 532480, 5968, 262144, 532480, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6528, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 6544, 136348168, 2181570690, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7296, 272696336, 68174084, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 7616, 613566756, 1227133513, 10432, 268435456, 0, 13268, 0, 33554432, 13716, 0, 33554432, 17408, 2, 4194304, 17408, 2, 4194304, 19584, 0, 4194304, 21248, 0, 1]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
