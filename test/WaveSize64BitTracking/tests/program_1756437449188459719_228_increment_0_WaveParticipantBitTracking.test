#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 46))) {
        if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 61))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (27 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() == 51)) {
              if ((WaveGetLaneIndex() == 28)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (42 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() == 56)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (51 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (60 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (69 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (83 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (90 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (94 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
    }
  }
  case 2: {
    for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((111 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 42))) {
          if ((((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 45))) {
            result = (result + WaveActiveMax(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((145 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 49))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((164 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i1 == 1)) {
          continue;
        }
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 48))) {
          if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 52))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((199 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((209 << 6) | (counter2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((218 << 6) | (counter2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 33))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((229 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() < 9)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((236 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 10))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((262 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 52))) {
            result = (result + WaveActiveMax(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((281 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter3 == 1)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() < 6)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((291 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((counter2 == 1)) {
        break;
      }
    }
    break;
  }
  case 1: {
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 59))) {
          for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
            if ((WaveGetLaneIndex() == 50)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((319 << 6) | (i4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 51))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (330 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (339 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (344 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 3: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (354 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 35))) {
              if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 12))) {
                result = (result + WaveActiveMin(9));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (388 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
              if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 34)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 52))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((415 << 6) | (i5 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((WaveGetLaneIndex() == 30) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 33))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((430 << 6) | (i5 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (434 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 369
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1728, 27, 2684354560, 1728, 27, 2684354560, 1728, 27, 2684354560, 1728, 27, 2684354560, 1728, 27, 2684354560, 1728, 27, 2684354560, 3840, 17, 269549568, 3840, 17, 269549568, 3840, 17, 269549568, 3840, 17, 269549568, 3840, 17, 269549568, 5760, 8, 0, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7104, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7120, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 7136, 2863311530, 2863311530, 15120, 341, 0, 15120, 341, 0, 15120, 341, 0, 15120, 341, 0, 15120, 341, 0, 16788, 1024, 0, 18004, 65536, 1048576, 18004, 65536, 1048576, 18640, 21, 0, 18640, 21, 0, 18640, 21, 0, 22656, 8, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
