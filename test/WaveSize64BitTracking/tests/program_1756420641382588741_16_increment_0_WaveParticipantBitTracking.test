#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 58))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((21 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 18)) {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((34 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((43 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((48 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((52 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
        }
        if ((i0 == 2)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (64 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (69 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (76 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (80 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (90 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() >= 49)) {
            if ((WaveGetLaneIndex() >= 32)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (103 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
              if ((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 53))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((126 << 6) | (i1 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if ((WaveGetLaneIndex() < 2)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (133 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (142 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 4)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (152 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (161 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (166 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 3: {
              if ((WaveGetLaneIndex() < 20)) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (173 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
        }
        break;
      }
    case 1: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 46))) {
              if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 59))) {
                result = (result + WaveActiveSum(9));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (194 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 54))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (205 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if ((WaveGetLaneIndex() == 50)) {
              if ((WaveGetLaneIndex() == 27)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (215 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() == 52)) {
                result = (result + WaveActiveMin(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (222 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            uint counter2 = 0;
            while ((counter2 < 3)) {
              counter2 = (counter2 + 1);
              if ((WaveGetLaneIndex() < 7)) {
                result = (result + WaveActiveSum(5));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((236 << 6) | (counter2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((counter2 == 2)) {
                break;
              }
            }
            break;
          }
        }
        break;
      }
    case 2: {
        uint counter3 = 0;
        while ((counter3 < 3)) {
          counter3 = (counter3 + 1);
          if ((WaveGetLaneIndex() >= 42)) {
            if ((WaveGetLaneIndex() >= 36)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((256 << 6) | (counter3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() >= 47)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((263 << 6) | (counter3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((counter3 == 2)) {
            break;
          }
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (270 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (280 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (289 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if ((WaveGetLaneIndex() < 26)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((304 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 62)) {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveMax(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((314 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 47)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((321 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i4 == 1)) {
          continue;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 492
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1344, 4369, 268435456, 1344, 4369, 268435456, 1344, 4369, 268435456, 1344, 4369, 268435456, 1344, 4369, 268435456, 1360, 4369, 268435456, 1360, 4369, 268435456, 1360, 4369, 268435456, 1360, 4369, 268435456, 1360, 4369, 268435456, 1376, 4369, 268435456, 1376, 4369, 268435456, 1376, 4369, 268435456, 1376, 4369, 268435456, 1376, 4369, 268435456, 2176, 1, 0, 2192, 1, 0, 2208, 1, 0, 2752, 65552, 0, 2752, 65552, 0, 2768, 65552, 0, 2768, 65552, 0, 2784, 65552, 0, 2784, 65552, 0, 3072, 65808, 0, 3072, 65808, 0, 3072, 65808, 0, 3088, 65808, 0, 3088, 65808, 0, 3088, 65808, 0, 3104, 65808, 0, 3104, 65808, 0, 3104, 65808, 0, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4416, 1145324612, 1145324612, 4864, 838860, 0, 4864, 838860, 0, 4864, 838860, 0, 4864, 838860, 0, 4864, 838860, 0, 4864, 838860, 0, 4864, 838860, 0, 4864, 838860, 0, 4864, 838860, 0, 4864, 838860, 0, 5760, 85, 0, 5760, 85, 0, 5760, 85, 0, 5760, 85, 0, 6592, 0, 2454192128, 6592, 0, 2454192128, 6592, 0, 2454192128, 6592, 0, 2454192128, 6592, 0, 2454192128, 9088, 136348168, 8322, 9088, 136348168, 8322, 9088, 136348168, 8322, 9088, 136348168, 8322, 9088, 136348168, 8322, 9088, 136348168, 8322, 9088, 136348168, 8322, 9088, 136348168, 8322, 9728, 1, 0, 10624, 1074004032, 1024, 10624, 1074004032, 1024, 10624, 1074004032, 1024, 10624, 1074004032, 1024, 11072, 32776, 0, 11072, 32776, 0, 16400, 0, 1227132928, 16400, 0, 1227132928, 16400, 0, 1227132928, 16400, 0, 1227132928, 16400, 0, 1227132928, 16400, 0, 1227132928, 16400, 0, 1227132928, 16416, 0, 1227132928, 16416, 0, 1227132928, 16416, 0, 1227132928, 16416, 0, 1227132928, 16416, 0, 1227132928, 16416, 0, 1227132928, 16416, 0, 1227132928, 16848, 0, 1227128832, 16848, 0, 1227128832, 16848, 0, 1227128832, 16848, 0, 1227128832, 16848, 0, 1227128832, 16848, 0, 1227128832, 16864, 0, 1227128832, 16864, 0, 1227128832, 16864, 0, 1227128832, 16864, 0, 1227128832, 16864, 0, 1227128832, 16864, 0, 1227128832, 17920, 73, 0, 17920, 73, 0, 17920, 73, 0, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 18496, 272696336, 68174084, 19456, 9586980, 0, 19456, 9586980, 0, 19456, 9586980, 0, 19456, 9586980, 0, 19456, 9586980, 0, 19456, 9586980, 0, 19456, 9586980, 0, 19456, 9586980, 0, 19472, 9586980, 0, 19472, 9586980, 0, 19472, 9586980, 0, 19472, 9586980, 0, 19472, 9586980, 0, 19472, 9586980, 0, 19472, 9586980, 0, 19472, 9586980, 0, 19488, 9586980, 0, 19488, 9586980, 0, 19488, 9586980, 0, 19488, 9586980, 0, 19488, 9586980, 0, 19488, 9586980, 0, 19488, 9586980, 0, 19488, 9586980, 0, 20544, 0, 1227128832, 20544, 0, 1227128832, 20544, 0, 1227128832, 20544, 0, 1227128832, 20544, 0, 1227128832, 20544, 0, 1227128832, 20560, 0, 1227128832, 20560, 0, 1227128832, 20560, 0, 1227128832, 20560, 0, 1227128832, 20560, 0, 1227128832, 20560, 0, 1227128832, 20576, 0, 1227128832, 20576, 0, 1227128832, 20576, 0, 1227128832, 20576, 0, 1227128832, 20576, 0, 1227128832, 20576, 0, 1227128832]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
