#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 31))) {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 58))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (32 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
          if (((WaveGetLaneIndex() == 25) || (WaveGetLaneIndex() == 55))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((51 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
            if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 61))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((80 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 58))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((97 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 45))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (116 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (125 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() >= 43)) {
          if ((WaveGetLaneIndex() < 2)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((143 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter3 = 0;
          while ((counter3 < 2)) {
            counter3 = (counter3 + 1);
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((159 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((170 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() < 4)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((177 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((188 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 55))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((199 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 42))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((210 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (214 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 468
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [8000, 272696336, 68174084, 8000, 272696336, 68174084, 8000, 272696336, 68174084, 8000, 272696336, 68174084, 8000, 272696336, 68174084, 8000, 272696336, 68174084, 8000, 272696336, 68174084, 8000, 272696336, 68174084, 8000, 272696336, 68174084, 8000, 272696336, 68174084, 10180, 0, 1158959104, 10180, 0, 1158959104, 10180, 0, 1158959104, 10180, 0, 1158959104, 10180, 0, 1158959104, 10180, 0, 1158959104, 10180, 0, 1158959104, 10184, 0, 1158959104, 10184, 0, 1158959104, 10184, 0, 1158959104, 10184, 0, 1158959104, 10184, 0, 1158959104, 10184, 0, 1158959104, 10184, 0, 1158959104, 10196, 0, 1158959104, 10196, 0, 1158959104, 10196, 0, 1158959104, 10196, 0, 1158959104, 10196, 0, 1158959104, 10196, 0, 1158959104, 10196, 0, 1158959104, 10200, 0, 1158959104, 10200, 0, 1158959104, 10200, 0, 1158959104, 10200, 0, 1158959104, 10200, 0, 1158959104, 10200, 0, 1158959104, 10200, 0, 1158959104, 10884, 0, 1158959104, 10884, 0, 1158959104, 10884, 0, 1158959104, 10884, 0, 1158959104, 10884, 0, 1158959104, 10884, 0, 1158959104, 10884, 0, 1158959104, 10888, 0, 1158959104, 10888, 0, 1158959104, 10888, 0, 1158959104, 10888, 0, 1158959104, 10888, 0, 1158959104, 10888, 0, 1158959104, 10888, 0, 1158959104, 10900, 0, 1158959104, 10900, 0, 1158959104, 10900, 0, 1158959104, 10900, 0, 1158959104, 10900, 0, 1158959104, 10900, 0, 1158959104, 10900, 0, 1158959104, 10904, 0, 1158959104, 10904, 0, 1158959104, 10904, 0, 1158959104, 10904, 0, 1158959104, 10904, 0, 1158959104, 10904, 0, 1158959104, 10904, 0, 1158959104, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12032, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12048, 1797558, 0, 12736, 3510, 0, 12736, 3510, 0, 12736, 3510, 0, 12736, 3510, 0, 12736, 3510, 0, 12736, 3510, 0, 12736, 3510, 0, 12736, 3510, 0, 12752, 3510, 0, 12752, 3510, 0, 12752, 3510, 0, 12752, 3510, 0, 12752, 3510, 0, 12752, 3510, 0, 12752, 3510, 0, 12752, 3510, 0, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13440, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392, 13456, 11702, 1840699392]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
