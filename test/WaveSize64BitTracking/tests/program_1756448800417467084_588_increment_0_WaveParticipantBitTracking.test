#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 50)) {
        if ((WaveGetLaneIndex() >= 33)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (14 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 34)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (21 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 44)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (28 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((45 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((61 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((WaveGetLaneIndex() == 36)) {
        result = (result + WaveActiveMin(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (68 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if ((WaveGetLaneIndex() < 23)) {
      if ((WaveGetLaneIndex() < 22)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (78 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((100 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 55))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((111 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 25) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 51))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((126 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        continue;
      }
    }
    if ((WaveGetLaneIndex() >= 61)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (136 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 43))) {
    result = (result + WaveActiveMin(5));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (151 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if (((WaveGetLaneIndex() < 16) || (WaveGetLaneIndex() >= 60))) {
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (168 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (177 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 55))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (188 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 39))) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (199 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (204 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 456
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [896, 0, 2454192128, 896, 0, 2454192128, 896, 0, 2454192128, 896, 0, 2454192128, 896, 0, 2454192128, 1344, 0, 2454192128, 1344, 0, 2454192128, 1344, 0, 2454192128, 1344, 0, 2454192128, 1344, 0, 2454192128, 2880, 1090785345, 66576, 2880, 1090785345, 66576, 2880, 1090785345, 66576, 2880, 1090785345, 66576, 2880, 1090785345, 66576, 2880, 1090785345, 66576, 2880, 1090785345, 66576, 2880, 1090785345, 66576, 2880, 1090785345, 66576, 2896, 1090785345, 66576, 2896, 1090785345, 66576, 2896, 1090785345, 66576, 2896, 1090785345, 66576, 2896, 1090785345, 66576, 2896, 1090785345, 66576, 2896, 1090785345, 66576, 2896, 1090785345, 66576, 2896, 1090785345, 66576, 2912, 1090785345, 66576, 2912, 1090785345, 66576, 2912, 1090785345, 66576, 2912, 1090785345, 66576, 2912, 1090785345, 66576, 2912, 1090785345, 66576, 2912, 1090785345, 66576, 2912, 1090785345, 66576, 2912, 1090785345, 66576, 3908, 136348168, 8322, 3908, 136348168, 8322, 3908, 136348168, 8322, 3908, 136348168, 8322, 3908, 136348168, 8322, 3908, 136348168, 8322, 3908, 136348168, 8322, 3908, 136348168, 8322, 3912, 136348168, 8322, 3912, 136348168, 8322, 3912, 136348168, 8322, 3912, 136348168, 8322, 3912, 136348168, 8322, 3912, 136348168, 8322, 3912, 136348168, 8322, 3912, 136348168, 8322, 3916, 136348168, 8322, 3916, 136348168, 8322, 3916, 136348168, 8322, 3916, 136348168, 8322, 3916, 136348168, 8322, 3916, 136348168, 8322, 3916, 136348168, 8322, 3916, 136348168, 8322, 3924, 136348168, 8322, 3924, 136348168, 8322, 3924, 136348168, 8322, 3924, 136348168, 8322, 3924, 136348168, 8322, 3924, 136348168, 8322, 3924, 136348168, 8322, 3924, 136348168, 8322, 3928, 136348168, 8322, 3928, 136348168, 8322, 3928, 136348168, 8322, 3928, 136348168, 8322, 3928, 136348168, 8322, 3928, 136348168, 8322, 3928, 136348168, 8322, 3928, 136348168, 8322, 3932, 136348168, 8322, 3932, 136348168, 8322, 3932, 136348168, 8322, 3932, 136348168, 8322, 3932, 136348168, 8322, 3932, 136348168, 8322, 3932, 136348168, 8322, 3932, 136348168, 8322, 3940, 136348168, 8322, 3940, 136348168, 8322, 3940, 136348168, 8322, 3940, 136348168, 8322, 3940, 136348168, 8322, 3940, 136348168, 8322, 3940, 136348168, 8322, 3940, 136348168, 8322, 3944, 136348168, 8322, 3944, 136348168, 8322, 3944, 136348168, 8322, 3944, 136348168, 8322, 3944, 136348168, 8322, 3944, 136348168, 8322, 3944, 136348168, 8322, 3944, 136348168, 8322, 3948, 136348168, 8322, 3948, 136348168, 8322, 3948, 136348168, 8322, 3948, 136348168, 8322, 3948, 136348168, 8322, 3948, 136348168, 8322, 3948, 136348168, 8322, 3948, 136348168, 8322, 4352, 0, 16, 4992, 599186, 0, 4992, 599186, 0, 4992, 599186, 0, 4992, 599186, 0, 4992, 599186, 0, 4992, 599186, 0, 4992, 599186, 0, 6400, 4260880, 0, 6400, 4260880, 0, 6400, 4260880, 0, 6400, 4260880, 0, 6416, 4260880, 0, 6416, 4260880, 0, 6416, 4260880, 0, 6416, 4260880, 0, 6432, 4260880, 0, 6432, 4260880, 0, 6432, 4260880, 0, 6432, 4260880, 0, 9664, 0, 2048, 12032, 0, 536870912, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513, 13056, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
