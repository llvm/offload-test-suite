#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (19 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (28 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (33 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (38 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((58 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((69 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (78 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 55))) {
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 52))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((110 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
            if (((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 54))) {
              result = (result + WaveActiveMin(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((129 << 6) | (i1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((i1 == 1)) {
            continue;
          }
        }
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 59))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (151 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (155 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 60))) {
        if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 52))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (176 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 3)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 54))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((194 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 60))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((205 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 62))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (216 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (225 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 51))) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 63))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (243 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter4 = 0;
        while ((counter4 < 3)) {
          counter4 = (counter4 + 1);
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 56))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((271 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if (((WaveGetLaneIndex() == 20) || (WaveGetLaneIndex() == 54))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (282 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (292 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (301 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (306 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (310 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 56))) {
        result = (result + WaveActiveMax(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (325 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 480
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 1792, 272696336, 68174084, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 2432, 613566756, 1227133513, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3712, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 3728, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4416, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4432, 136348168, 2181570690, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 4992, 272696336, 68174084, 11264, 4681, 2415919104, 11264, 4681, 2415919104, 11264, 4681, 2415919104, 11264, 4681, 2415919104, 11264, 4681, 2415919104, 11264, 4681, 2415919104, 11264, 4681, 2415919104, 12432, 9, 2415919104, 12432, 9, 2415919104, 12432, 9, 2415919104, 12432, 9, 2415919104, 12448, 9, 2415919104, 12448, 9, 2415919104, 12448, 9, 2415919104, 12448, 9, 2415919104, 12464, 9, 2415919104, 12464, 9, 2415919104, 12464, 9, 2415919104, 12464, 9, 2415919104, 13136, 4681, 2415919104, 13136, 4681, 2415919104, 13136, 4681, 2415919104, 13136, 4681, 2415919104, 13136, 4681, 2415919104, 13136, 4681, 2415919104, 13136, 4681, 2415919104, 13152, 4681, 2415919104, 13152, 4681, 2415919104, 13152, 4681, 2415919104, 13152, 4681, 2415919104, 13152, 4681, 2415919104, 13152, 4681, 2415919104, 13152, 4681, 2415919104, 13168, 4681, 2415919104, 13168, 4681, 2415919104, 13168, 4681, 2415919104, 13168, 4681, 2415919104, 13168, 4681, 2415919104, 13168, 4681, 2415919104, 13168, 4681, 2415919104, 13824, 585, 2147483648, 13824, 585, 2147483648, 13824, 585, 2147483648, 13824, 585, 2147483648, 13824, 585, 2147483648, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 14400, 272696336, 68174084, 17360, 0, 16777216, 17376, 0, 16777216, 17392, 0, 16777216, 18048, 1048576, 0, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 19584, 613548032, 299593, 20800, 0, 1]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
