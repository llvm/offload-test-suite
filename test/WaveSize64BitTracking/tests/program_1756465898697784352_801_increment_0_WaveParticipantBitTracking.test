#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 49))) {
        if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 35))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (44 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 47)) {
          if ((WaveGetLaneIndex() == 18)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (56 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 62))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (75 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 3: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((92 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((109 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((120 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          break;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (127 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (145 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (154 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (159 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (168 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 43))) {
        if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 63))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (186 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 14))) {
          if (((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 51)) || (WaveGetLaneIndex() == 63))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (216 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((233 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((244 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (249 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 57))) {
        if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 61))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (275 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 48))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (288 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if ((WaveGetLaneIndex() >= 39)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((302 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 61))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((327 << 6) | (counter3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 1)) {
            continue;
          }
          if ((i4 == 2)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() >= 34)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((342 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter3 == 1)) {
          break;
        }
      }
      if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 34))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (360 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 876
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5888, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 5904, 1145324612, 1145324612, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6976, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6980, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6992, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 6996, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7680, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 7696, 2863311530, 2863311530, 9280, 1, 0, 9856, 268501008, 1048832, 9856, 268501008, 1048832, 9856, 268501008, 1048832, 9856, 268501008, 1048832, 9856, 268501008, 1048832, 10176, 1048832, 16781313, 10176, 1048832, 16781313, 10176, 1048832, 16781313, 10176, 1048832, 16781313, 10176, 1048832, 16781313, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 10752, 286331153, 286331153, 11904, 8738, 0, 11904, 8738, 0, 11904, 8738, 0, 11904, 8738, 0, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 15936, 1145324612, 1145324612, 19344, 0, 2290649216, 19344, 0, 2290649216, 19344, 0, 2290649216, 19344, 0, 2290649216, 19344, 0, 2290649216, 19344, 0, 2290649216, 19344, 0, 2290649216, 20944, 32768, 0, 20948, 32768, 0, 20952, 32768, 0, 21904, 0, 2290649224, 21904, 0, 2290649224, 21904, 0, 2290649224, 21904, 0, 2290649224, 21904, 0, 2290649224, 21904, 0, 2290649224, 21904, 0, 2290649224, 21904, 0, 2290649224, 23040, 32768, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
