#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 50))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((24 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 59))) {
            result = (result + WaveActiveMin(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((51 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 48))) {
            result = (result + WaveActiveMin(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((70 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 62))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((89 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (98 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (103 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (107 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (121 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (131 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (140 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (144 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (153 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (163 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() >= 48)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((178 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i2 == 2)) {
          break;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 324
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1552, 262144, 2, 1552, 262144, 2, 1568, 262144, 2, 1568, 262144, 2, 1584, 262144, 2, 1584, 262144, 2, 3280, 16777224, 0, 3280, 16777224, 0, 3284, 16777224, 0, 3284, 16777224, 0, 3288, 16777224, 0, 3288, 16777224, 0, 3296, 16777224, 0, 3296, 16777224, 0, 3300, 16777224, 0, 3300, 16777224, 0, 3304, 16777224, 0, 3304, 16777224, 0, 3312, 16777224, 0, 3312, 16777224, 0, 3316, 16777224, 0, 3316, 16777224, 0, 3320, 16777224, 0, 3320, 16777224, 0, 4496, 0, 66560, 4496, 0, 66560, 4500, 0, 66560, 4500, 0, 66560, 4504, 0, 66560, 4504, 0, 66560, 4512, 0, 66560, 4512, 0, 66560, 4516, 0, 66560, 4516, 0, 66560, 4520, 0, 66560, 4520, 0, 66560, 4528, 0, 66560, 4528, 0, 66560, 4532, 0, 66560, 4532, 0, 66560, 4536, 0, 66560, 4536, 0, 66560, 5712, 0, 8192, 5728, 0, 8192, 5744, 0, 8192, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6272, 272696336, 68174084, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 6592, 613566756, 1227133513, 8384, 85, 0, 8384, 85, 0, 8384, 85, 0, 8384, 85, 0, 10432, 85, 0, 10432, 85, 0, 10432, 85, 0, 10432, 85, 0, 11392, 0, 2863267840, 11392, 0, 2863267840, 11392, 0, 2863267840, 11392, 0, 2863267840, 11392, 0, 2863267840, 11392, 0, 2863267840, 11392, 0, 2863267840, 11392, 0, 2863267840, 11408, 0, 2863267840, 11408, 0, 2863267840, 11408, 0, 2863267840, 11408, 0, 2863267840, 11408, 0, 2863267840, 11408, 0, 2863267840, 11408, 0, 2863267840, 11408, 0, 2863267840, 11424, 0, 2863267840, 11424, 0, 2863267840, 11424, 0, 2863267840, 11424, 0, 2863267840, 11424, 0, 2863267840, 11424, 0, 2863267840, 11424, 0, 2863267840, 11424, 0, 2863267840]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
