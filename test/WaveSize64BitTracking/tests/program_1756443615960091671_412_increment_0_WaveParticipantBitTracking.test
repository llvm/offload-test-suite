#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 57))) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((25 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 42))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((44 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (53 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() >= 36)) {
          if ((WaveGetLaneIndex() >= 39)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((71 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 38)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((78 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((85 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 18) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 43))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((100 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (110 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (119 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 258
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1600, 0, 33554432, 1616, 0, 33554432, 1632, 0, 33554432, 2816, 134217728, 1024, 2816, 134217728, 1024, 2820, 134217728, 1024, 2820, 134217728, 1024, 2832, 134217728, 1024, 2832, 134217728, 1024, 2836, 134217728, 1024, 2836, 134217728, 1024, 2848, 134217728, 1024, 2848, 134217728, 1024, 2852, 134217728, 1024, 2852, 134217728, 1024, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 3392, 272696336, 68174084, 4544, 0, 1227133440, 4544, 0, 1227133440, 4544, 0, 1227133440, 4544, 0, 1227133440, 4544, 0, 1227133440, 4544, 0, 1227133440, 4544, 0, 1227133440, 4544, 0, 1227133440, 4560, 0, 1227133440, 4560, 0, 1227133440, 4560, 0, 1227133440, 4560, 0, 1227133440, 4560, 0, 1227133440, 4560, 0, 1227133440, 4560, 0, 1227133440, 4560, 0, 1227133440, 4576, 0, 1227133440, 4576, 0, 1227133440, 4576, 0, 1227133440, 4576, 0, 1227133440, 4576, 0, 1227133440, 4576, 0, 1227133440, 4576, 0, 1227133440, 4576, 0, 1227133440, 4992, 0, 1227133504, 4992, 0, 1227133504, 4992, 0, 1227133504, 4992, 0, 1227133504, 4992, 0, 1227133504, 4992, 0, 1227133504, 4992, 0, 1227133504, 4992, 0, 1227133504, 4992, 0, 1227133504, 5008, 0, 1227133504, 5008, 0, 1227133504, 5008, 0, 1227133504, 5008, 0, 1227133504, 5008, 0, 1227133504, 5008, 0, 1227133504, 5008, 0, 1227133504, 5008, 0, 1227133504, 5008, 0, 1227133504, 5024, 0, 1227133504, 5024, 0, 1227133504, 5024, 0, 1227133504, 5024, 0, 1227133504, 5024, 0, 1227133504, 5024, 0, 1227133504, 5024, 0, 1227133504, 5024, 0, 1227133504, 5024, 0, 1227133504, 5440, 256, 0, 5456, 256, 0, 5472, 256, 0, 6400, 8388608, 0, 6416, 8388608, 0, 6432, 8388608, 0, 7040, 85, 0, 7040, 85, 0, 7040, 85, 0, 7040, 85, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
