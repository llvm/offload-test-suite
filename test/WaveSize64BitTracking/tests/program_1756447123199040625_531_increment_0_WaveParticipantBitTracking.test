#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 35)) {
    if ((WaveGetLaneIndex() == 41)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() < 19)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((25 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() == 31) || (WaveGetLaneIndex() == 55))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((43 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 63)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((52 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 44)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (59 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((WaveGetLaneIndex() == 14)) {
    if ((WaveGetLaneIndex() == 21)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (69 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 39)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (76 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (85 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (96 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 189
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 5440, 1431639381, 1431655765, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530, 6144, 2863311530, 2863311530]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
