#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (30 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() < 6)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((49 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 21)) {
        if ((WaveGetLaneIndex() == 25)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((59 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 2)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((66 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() < 25)) {
        result = (result + WaveActiveMin(10));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((73 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() >= 57)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((82 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 5))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((122 << 6) | (counter1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 8))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((137 << 6) | (counter1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter2 == 1)) {
            break;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (149 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (154 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 351
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1920, 559240, 0, 1920, 559240, 0, 1920, 559240, 0, 1920, 559240, 0, 1920, 559240, 0, 3152, 42, 0, 3152, 42, 0, 3152, 42, 0, 3168, 42, 0, 3168, 42, 0, 3168, 42, 0, 3184, 42, 0, 3184, 42, 0, 3184, 42, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4688, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4704, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 4720, 9087658, 0, 5264, 0, 2852126720, 5264, 0, 2852126720, 5264, 0, 2852126720, 5264, 0, 2852126720, 5280, 0, 2852126720, 5280, 0, 2852126720, 5280, 0, 2852126720, 5280, 0, 2852126720, 5296, 0, 2852126720, 5296, 0, 2852126720, 5296, 0, 2852126720, 5296, 0, 2852126720, 7828, 262144, 73728, 7828, 262144, 73728, 7828, 262144, 73728, 7844, 262144, 73728, 7844, 262144, 73728, 7844, 262144, 73728, 7860, 262144, 73728, 7860, 262144, 73728, 7860, 262144, 73728, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9536, 272696336, 68174084, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513, 9856, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
