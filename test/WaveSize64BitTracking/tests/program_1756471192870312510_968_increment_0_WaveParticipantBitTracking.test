#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((30 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 41))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((52 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((61 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter0 == 1)) {
          break;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (68 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() < 4)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((87 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 0))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((117 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 63))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((132 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 43)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((139 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (148 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 270
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 1936, 1431655765, 1431655765, 5584, 5, 0, 5584, 5, 0, 5600, 5, 0, 5600, 5, 0, 5616, 5, 0, 5616, 5, 0, 7508, 5, 0, 7508, 5, 0, 7512, 5, 0, 7512, 5, 0, 7524, 5, 0, 7524, 5, 0, 7528, 5, 0, 7528, 5, 0, 7540, 5, 0, 7540, 5, 0, 7544, 5, 0, 7544, 5, 0, 8468, 0, 16, 8472, 0, 16, 8484, 0, 16, 8488, 0, 16, 8500, 0, 16, 8504, 0, 16, 8912, 0, 1431654400, 8912, 0, 1431654400, 8912, 0, 1431654400, 8912, 0, 1431654400, 8912, 0, 1431654400, 8912, 0, 1431654400, 8912, 0, 1431654400, 8912, 0, 1431654400, 8912, 0, 1431654400, 8912, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8928, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400, 8944, 0, 1431654400]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
