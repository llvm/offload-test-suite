#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 20)) {
    if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 61))) {
      if (((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 33))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (24 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 52)) {
        if ((WaveGetLaneIndex() == 59)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (34 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 12)) {
          if ((WaveGetLaneIndex() == 3)) {
            result = (result + WaveActiveMax(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (44 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 6)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (51 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 63)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (58 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 52))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (79 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 24)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (86 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() == 2)) {
    result = (result + WaveActiveMax(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (93 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (103 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 4)) {
          result = (result + WaveActiveSum(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((118 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((136 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 30)) {
            if ((WaveGetLaneIndex() == 52)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((148 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((155 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((164 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i0 == 1)) {
        break;
      }
    }
    break;
  }
  case 2: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
              if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 42))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((192 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (201 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
              if ((WaveGetLaneIndex() == 51)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((216 << 6) | (i3 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (225 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 55))) {
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 45))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (243 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 58))) {
            if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 49))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (263 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 345
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5952, 4, 0, 6592, 73, 0, 6592, 73, 0, 6592, 73, 0, 7552, 16, 0, 7568, 16, 0, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8708, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8712, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8724, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 8728, 2181570690, 545392672, 9924, 146, 0, 9924, 146, 0, 9924, 146, 0, 9928, 146, 0, 9928, 146, 0, 9928, 146, 0, 9940, 146, 0, 9940, 146, 0, 9940, 146, 0, 9944, 146, 0, 9944, 146, 0, 9944, 146, 0, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10500, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10504, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10516, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 10520, 2181570690, 545392672, 15552, 36, 1224736768, 15552, 36, 1224736768, 15552, 36, 1224736768, 15552, 36, 1224736768, 15552, 36, 1224736768, 16832, 36, 1207959552, 16832, 36, 1207959552, 16832, 36, 1207959552, 16832, 36, 1207959552]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
