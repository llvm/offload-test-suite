#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 9)) {
            if ((WaveGetLaneIndex() == 33)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (15 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 40)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (22 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (31 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 55))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((50 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (59 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if ((WaveGetLaneIndex() >= 39)) {
        if ((WaveGetLaneIndex() >= 54)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (71 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 48))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((89 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 50))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((102 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (109 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((128 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 33)) {
          if ((WaveGetLaneIndex() >= 35)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((140 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 25)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((147 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 49))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((162 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((171 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (180 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    uint counter3 = 0;
    while ((counter3 < 3)) {
      counter3 = (counter3 + 1);
      if ((((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 13))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((210 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((224 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 59)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((231 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 30))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((252 << 6) | (counter3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter3 == 2)) {
      break;
    }
  }
  break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 477
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1984, 268501008, 1048832, 1984, 268501008, 1048832, 1984, 268501008, 1048832, 1984, 268501008, 1048832, 1984, 268501008, 1048832, 3200, 0, 16777216, 3216, 0, 16777216, 4544, 0, 1145044992, 4544, 0, 1145044992, 4544, 0, 1145044992, 5712, 0, 1145307136, 5712, 0, 1145307136, 5712, 0, 1145307136, 5712, 0, 1145307136, 5728, 0, 1145307136, 5728, 0, 1145307136, 5728, 0, 1145307136, 5728, 0, 1145307136, 6544, 0, 1145307136, 6544, 0, 1145307136, 6544, 0, 1145307136, 6544, 0, 1145307136, 6560, 0, 1145307136, 6560, 0, 1145307136, 6560, 0, 1145307136, 6560, 0, 1145307136, 6976, 559240, 0, 6976, 559240, 0, 6976, 559240, 0, 6976, 559240, 0, 6976, 559240, 0, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8208, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8224, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8240, 136348168, 2181570690, 8976, 0, 2454267024, 8976, 0, 2454267024, 8976, 0, 2454267024, 8976, 0, 2454267024, 8976, 0, 2454267024, 8976, 0, 2454267024, 8976, 0, 2454267024, 8976, 0, 2454267024, 8976, 0, 2454267024, 8976, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 8992, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 9008, 0, 2454267024, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10960, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10976, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 10992, 136348168, 2181570690, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 11520, 272696336, 68174084, 13456, 536870912, 0, 13472, 536870912, 0, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14352, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168, 14368, 545392672, 136348168]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
