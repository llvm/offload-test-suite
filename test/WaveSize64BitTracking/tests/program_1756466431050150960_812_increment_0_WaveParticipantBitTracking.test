#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 1)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (24 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (20 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 8)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (16 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 62))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((50 << 6) | (i0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((60 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((69 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((74 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 60))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((85 << 6) | (i0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter1 == 1)) {
        break;
      }
    }
    if ((i0 == 2)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 630
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1536, 2, 0, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1280, 1431655765, 1431655765, 1024, 168, 0, 1024, 168, 0, 1024, 168, 0, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3204, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3220, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3236, 8191, 3221225472, 3844, 73, 0, 3844, 73, 0, 3844, 73, 0, 3860, 73, 0, 3860, 73, 0, 3860, 73, 0, 3876, 73, 0, 3876, 73, 0, 3876, 73, 0, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4420, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4436, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4452, 272696336, 68174084, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4740, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4756, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 4772, 613566756, 1227133513, 5444, 31, 4026531840, 5444, 31, 4026531840, 5444, 31, 4026531840, 5444, 31, 4026531840, 5444, 31, 4026531840, 5444, 31, 4026531840, 5444, 31, 4026531840, 5444, 31, 4026531840, 5444, 31, 4026531840, 5460, 31, 4026531840, 5460, 31, 4026531840, 5460, 31, 4026531840, 5460, 31, 4026531840, 5460, 31, 4026531840, 5460, 31, 4026531840, 5460, 31, 4026531840, 5460, 31, 4026531840, 5460, 31, 4026531840, 5476, 31, 4026531840, 5476, 31, 4026531840, 5476, 31, 4026531840, 5476, 31, 4026531840, 5476, 31, 4026531840, 5476, 31, 4026531840, 5476, 31, 4026531840, 5476, 31, 4026531840, 5476, 31, 4026531840]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
