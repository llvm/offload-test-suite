#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 40))) {
        if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 48))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (31 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() >= 57)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((48 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if ((WaveGetLaneIndex() == 12)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (55 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 49))) {
          result = (result + WaveActiveSum(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((73 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 42)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (80 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (97 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((113 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
  case 1: {
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if (((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 59))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((139 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 10)) {
          if ((WaveGetLaneIndex() == 9)) {
            result = (result + WaveActiveMax(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((149 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 3)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((156 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 59))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((175 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter3 == 1)) {
          break;
        }
      }
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter4 = 0;
          while ((counter4 < 2)) {
            counter4 = (counter4 + 1);
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((199 << 6) | (counter4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((208 << 6) | (counter4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (217 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (222 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 468
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1984, 512, 0, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4688, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4704, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 4720, 174250, 2863267840, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7248, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 7264, 1090785345, 272696336, 8912, 4198400, 32, 8912, 4198400, 32, 8912, 4198400, 32, 11216, 134218752, 32, 11216, 134218752, 32, 11216, 134218752, 32, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12752, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 12768, 1090785345, 272696336, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13328, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13344, 136348168, 2181570690, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 13888, 272696336, 68174084, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513, 14208, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
