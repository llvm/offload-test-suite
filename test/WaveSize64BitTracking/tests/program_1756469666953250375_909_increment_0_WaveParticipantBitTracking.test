#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (32 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 2)) {
          counter0 = (counter0 + 1);
          if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 45))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((58 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (62 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (72 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (81 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (86 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 40))) {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 48))) {
              if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 13))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (130 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 27))) {
                result = (result + WaveActiveMax(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (145 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 61))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (166 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 61))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((188 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 55))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((209 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
            if ((WaveGetLaneIndex() >= 49)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((224 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (228 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 39)) || (WaveGetLaneIndex() == 62))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (243 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 43))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (258 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 243
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 1152, 272696336, 68174084, 4608, 17, 0, 4608, 17, 0, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5184, 286331153, 286331153, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 5504, 2004318071, 2004318071, 16512, 128, 2048, 16512, 128, 2048]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
