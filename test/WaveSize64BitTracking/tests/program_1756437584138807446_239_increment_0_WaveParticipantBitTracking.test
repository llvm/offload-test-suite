#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((21 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((38 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((47 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 4)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((61 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 3)) {
          if ((WaveGetLaneIndex() < 30)) {
            result = (result + WaveActiveMax(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((71 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() >= 49)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((80 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (85 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    uint counter3 = 0;
    while ((counter3 < 3)) {
      counter3 = (counter3 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((101 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 22))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((131 << 6) | (counter3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter4 == 2)) {
          break;
        }
      }
    }
    break;
  }
  }
  if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 50))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (166 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 56))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (162 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 49))) {
    if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 61))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (184 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1059
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1344, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1360, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 1376, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2432, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2436, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2440, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2448, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2452, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2456, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2464, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2468, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 2472, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3008, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3024, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 3040, 286331153, 286331153, 4560, 2, 0, 4576, 2, 0, 4592, 2, 0, 5136, 0, 572653568, 5136, 0, 572653568, 5136, 0, 572653568, 5136, 0, 572653568, 5152, 0, 572653568, 5152, 0, 572653568, 5152, 0, 572653568, 5152, 0, 572653568, 5168, 0, 572653568, 5168, 0, 572653568, 5168, 0, 572653568, 5168, 0, 572653568, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 5440, 1145324612, 1145324612, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6480, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6496, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 6512, 2290649224, 2290649224, 10624, 1048704, 266240, 10624, 1048704, 266240, 10624, 1048704, 266240, 10624, 1048704, 266240, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 10368, 15, 4278190080, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384, 11776, 32767, 3758096384]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
