#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (12 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              uint counter0 = 0;
              while ((counter0 < 3)) {
                counter0 = (counter0 + 1);
                if ((WaveGetLaneIndex() == 54)) {
                  result = (result + WaveActiveMax(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((29 << 6) | (counter0 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((counter0 == 2)) {
                  break;
                }
              }
              break;
            }
          case 1: {
              uint counter1 = 0;
              while ((counter1 < 3)) {
                counter1 = (counter1 + 1);
                if ((WaveGetLaneIndex() == 19)) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((46 << 6) | (counter1 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((WaveGetLaneIndex() == 16)) {
                  result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((55 << 6) | (counter1 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (60 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 46))) {
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 47))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (80 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 61))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (91 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (95 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (104 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (109 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (116 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (120 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (130 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (140 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter2 = 0;
          while ((counter2 < 2)) {
            counter2 = (counter2 + 1);
            if ((WaveGetLaneIndex() < 3)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((154 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            uint counter3 = 0;
            while ((counter3 < 2)) {
              counter3 = (counter3 + 1);
              if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 56))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((172 << 6) | (counter2 << 4)) | (counter3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 49))) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((183 << 6) | (counter2 << 4)) | (counter3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (188 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (193 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (197 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 336
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 1, 0, 3536, 65536, 0, 3552, 65536, 0, 3568, 65536, 0, 5120, 0, 16777216, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 6976, 1145324612, 1145324612, 7424, 559240, 0, 7424, 559240, 0, 7424, 559240, 0, 7424, 559240, 0, 7424, 559240, 0, 8320, 73, 0, 8320, 73, 0, 8320, 73, 0, 9872, 2, 0, 9888, 2, 0, 11028, 9362, 603979776, 11028, 9362, 603979776, 11028, 9362, 603979776, 11028, 9362, 603979776, 11028, 9362, 603979776, 11028, 9362, 603979776, 11028, 9362, 603979776, 11032, 9362, 603979776, 11032, 9362, 603979776, 11032, 9362, 603979776, 11032, 9362, 603979776, 11032, 9362, 603979776, 11032, 9362, 603979776, 11032, 9362, 603979776, 11044, 9362, 603979776, 11044, 9362, 603979776, 11044, 9362, 603979776, 11044, 9362, 603979776, 11044, 9362, 603979776, 11044, 9362, 603979776, 11044, 9362, 603979776, 11048, 9362, 603979776, 11048, 9362, 603979776, 11048, 9362, 603979776, 11048, 9362, 603979776, 11048, 9362, 603979776, 11048, 9362, 603979776, 11048, 9362, 603979776, 11732, 146, 613548032, 11732, 146, 613548032, 11732, 146, 613548032, 11732, 146, 613548032, 11732, 146, 613548032, 11732, 146, 613548032, 11732, 146, 613548032, 11732, 146, 613548032, 11736, 146, 613548032, 11736, 146, 613548032, 11736, 146, 613548032, 11736, 146, 613548032, 11736, 146, 613548032, 11736, 146, 613548032, 11736, 146, 613548032, 11736, 146, 613548032, 11748, 146, 613548032, 11748, 146, 613548032, 11748, 146, 613548032, 11748, 146, 613548032, 11748, 146, 613548032, 11748, 146, 613548032, 11748, 146, 613548032, 11748, 146, 613548032, 11752, 146, 613548032, 11752, 146, 613548032, 11752, 146, 613548032, 11752, 146, 613548032, 11752, 146, 613548032, 11752, 146, 613548032, 11752, 146, 613548032, 11752, 146, 613548032, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513, 12352, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
