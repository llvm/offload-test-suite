#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 31))) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      if ((WaveGetLaneIndex() == 1)) {
        if ((WaveGetLaneIndex() == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (33 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 17)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (40 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (49 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  uint counter0 = 0;
  while ((counter0 < 2)) {
    counter0 = (counter0 + 1);
    if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 1))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((77 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 46))) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if ((WaveGetLaneIndex() >= 37)) {
          if ((WaveGetLaneIndex() < 14)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((101 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 43)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((108 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((117 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 59))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((128 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 52))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((143 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 240
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4944, 2, 2097168, 4944, 2, 2097168, 4944, 2, 2097168, 4960, 2, 2097168, 4960, 2, 2097168, 4960, 2, 2097168, 6928, 0, 1431650304, 6928, 0, 1431650304, 6928, 0, 1431650304, 6928, 0, 1431650304, 6928, 0, 1431650304, 6928, 0, 1431650304, 6928, 0, 1431650304, 6928, 0, 1431650304, 6928, 0, 1431650304, 6944, 0, 1431650304, 6944, 0, 1431650304, 6944, 0, 1431650304, 6944, 0, 1431650304, 6944, 0, 1431650304, 6944, 0, 1431650304, 6944, 0, 1431650304, 6944, 0, 1431650304, 6944, 0, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7504, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 7520, 349525, 1431650304, 8208, 1, 4160749568, 8208, 1, 4160749568, 8208, 1, 4160749568, 8208, 1, 4160749568, 8208, 1, 4160749568, 8208, 1, 4160749568, 8224, 1, 4160749568, 8224, 1, 4160749568, 8224, 1, 4160749568, 8224, 1, 4160749568, 8224, 1, 4160749568, 8224, 1, 4160749568, 9168, 2, 1052672, 9168, 2, 1052672, 9168, 2, 1052672, 9184, 2, 1052672, 9184, 2, 1052672, 9184, 2, 1052672]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
