#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 63))) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((27 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 1))) {
          if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 4))) {
            result = (result + WaveActiveMin(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((61 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((70 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 58))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((83 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (88 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (92 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (102 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (111 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (115 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter1 = 0;
          while ((counter1 < 3)) {
            counter1 = (counter1 + 1);
            if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 56))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((147 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
              if ((WaveGetLaneIndex() < 10)) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((162 << 6) | (counter1 << 4)) | (i2 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() == 24) || (WaveGetLaneIndex() == 35))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((173 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter1 == 2)) {
              break;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (185 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if ((WaveGetLaneIndex() == 47)) {
            uint counter3 = 0;
            while ((counter3 < 2)) {
              counter3 = (counter3 + 1);
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((206 << 6) | (counter3 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((215 << 6) | (counter3 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((counter3 == 1)) {
                break;
              }
            }
          } else {
          if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 43))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (229 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 31) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 32))) {
            if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 53))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (257 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 63))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (268 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (272 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (281 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (286 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 339
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1744, 1170, 0, 1744, 1170, 0, 1744, 1170, 0, 1744, 1170, 0, 1760, 1170, 0, 1760, 1170, 0, 1760, 1170, 0, 1760, 1170, 0, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4496, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 4512, 2181570688, 545392672, 5328, 18, 603979776, 5328, 18, 603979776, 5328, 18, 603979776, 5328, 18, 603979776, 5344, 18, 603979776, 5344, 18, 603979776, 5344, 18, 603979776, 5344, 18, 603979776, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 5632, 613566756, 1227133513, 6528, 85, 0, 6528, 85, 0, 6528, 85, 0, 6528, 85, 0, 10384, 585, 0, 10384, 585, 0, 10384, 585, 0, 10384, 585, 0, 10388, 585, 0, 10388, 585, 0, 10388, 585, 0, 10388, 585, 0, 10400, 585, 0, 10400, 585, 0, 10400, 585, 0, 10400, 585, 0, 10404, 585, 0, 10404, 585, 0, 10404, 585, 0, 10404, 585, 0, 11088, 16777216, 0, 11104, 16777216, 0, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 17984, 272696336, 68174084, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513, 18304, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
