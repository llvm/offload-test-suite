#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() >= 58)) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((17 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 48)) || (WaveGetLaneIndex() == 62))) {
          if ((((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 38)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 3))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((59 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((70 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (79 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (83 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 186
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 0, 1409286144, 1088, 0, 1409286144, 1088, 0, 1409286144, 1104, 0, 1409286144, 1104, 0, 1409286144, 1104, 0, 1409286144, 3776, 0, 1073741824, 3792, 0, 1073741824, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4480, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021, 4496, 1364546897, 357832021]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
