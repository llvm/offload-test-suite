#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (27 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 63)) {
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() == 32)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((48 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (57 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (62 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (69 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 36))) {
        if ((((WaveGetLaneIndex() == 21) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 46))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (98 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() >= 37)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((112 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 19) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 24))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (131 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 60))) {
          if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 44))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((157 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 59))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((168 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (173 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 441
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1152, 1363481681, 340870420, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 1472, 4294967295, 4294967295, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 3968, 1145324612, 1145324612, 4416, 559240, 0, 4416, 559240, 0, 4416, 559240, 0, 4416, 559240, 0, 4416, 559240, 0, 8384, 0, 16, 10048, 146, 536870912, 10048, 146, 536870912, 10048, 146, 536870912, 10048, 146, 536870912, 10064, 146, 536870912, 10064, 146, 536870912, 10064, 146, 536870912, 10064, 146, 536870912, 10752, 146, 536870912, 10752, 146, 536870912, 10752, 146, 536870912, 10752, 146, 536870912, 10768, 146, 536870912, 10768, 146, 536870912, 10768, 146, 536870912, 10768, 146, 536870912, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513, 11072, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
