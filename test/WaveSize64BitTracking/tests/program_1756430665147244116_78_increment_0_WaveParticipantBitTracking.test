#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 46))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((27 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 13) || (WaveGetLaneIndex() >= 47))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((38 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 22)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((45 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (55 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (64 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          uint counter2 = 0;
          while ((counter2 < 2)) {
            counter2 = (counter2 + 1);
            if (((WaveGetLaneIndex() < 21) || (WaveGetLaneIndex() >= 44))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((82 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter2 == 1)) {
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 2: {
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if ((((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 22))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((116 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter4 = 0;
        while ((counter4 < 2)) {
          counter4 = (counter4 + 1);
          if ((((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 24))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((146 << 6) | (i3 << 4)) | (counter4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 51))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((165 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
        if ((WaveGetLaneIndex() >= 49)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((180 << 6) | (i5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter6 = 0;
        while ((counter6 < 2)) {
          counter6 = (counter6 + 1);
          if ((WaveGetLaneIndex() == 24)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((194 << 6) | (i5 << 4)) | (counter6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 42)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((201 << 6) | (i5 << 4)) | (counter6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter6 == 1)) {
            break;
          }
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (208 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (218 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (227 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (231 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 56))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (262 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 45)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (256 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 12)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (252 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 480
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1748, 4369, 286326784, 1748, 4369, 286326784, 1748, 4369, 286326784, 1748, 4369, 286326784, 1748, 4369, 286326784, 1748, 4369, 286326784, 1748, 4369, 286326784, 1748, 4369, 286326784, 1752, 4369, 286326784, 1752, 4369, 286326784, 1752, 4369, 286326784, 1752, 4369, 286326784, 1752, 4369, 286326784, 1752, 4369, 286326784, 1752, 4369, 286326784, 1752, 4369, 286326784, 1756, 4369, 286326784, 1756, 4369, 286326784, 1756, 4369, 286326784, 1756, 4369, 286326784, 1756, 4369, 286326784, 1756, 4369, 286326784, 1756, 4369, 286326784, 1756, 4369, 286326784, 1764, 4369, 286326784, 1764, 4369, 286326784, 1764, 4369, 286326784, 1764, 4369, 286326784, 1764, 4369, 286326784, 1764, 4369, 286326784, 1764, 4369, 286326784, 1764, 4369, 286326784, 1768, 4369, 286326784, 1768, 4369, 286326784, 1768, 4369, 286326784, 1768, 4369, 286326784, 1768, 4369, 286326784, 1768, 4369, 286326784, 1768, 4369, 286326784, 1768, 4369, 286326784, 1772, 4369, 286326784, 1772, 4369, 286326784, 1772, 4369, 286326784, 1772, 4369, 286326784, 1772, 4369, 286326784, 1772, 4369, 286326784, 1772, 4369, 286326784, 1772, 4369, 286326784, 2452, 4369, 286326784, 2452, 4369, 286326784, 2452, 4369, 286326784, 2452, 4369, 286326784, 2452, 4369, 286326784, 2452, 4369, 286326784, 2452, 4369, 286326784, 2452, 4369, 286326784, 2456, 4369, 286326784, 2456, 4369, 286326784, 2456, 4369, 286326784, 2456, 4369, 286326784, 2456, 4369, 286326784, 2456, 4369, 286326784, 2456, 4369, 286326784, 2456, 4369, 286326784, 2460, 4369, 286326784, 2460, 4369, 286326784, 2460, 4369, 286326784, 2460, 4369, 286326784, 2460, 4369, 286326784, 2460, 4369, 286326784, 2460, 4369, 286326784, 2460, 4369, 286326784, 2468, 4369, 286326784, 2468, 4369, 286326784, 2468, 4369, 286326784, 2468, 4369, 286326784, 2468, 4369, 286326784, 2468, 4369, 286326784, 2468, 4369, 286326784, 2468, 4369, 286326784, 2472, 4369, 286326784, 2472, 4369, 286326784, 2472, 4369, 286326784, 2472, 4369, 286326784, 2472, 4369, 286326784, 2472, 4369, 286326784, 2472, 4369, 286326784, 2472, 4369, 286326784, 2476, 4369, 286326784, 2476, 4369, 286326784, 2476, 4369, 286326784, 2476, 4369, 286326784, 2476, 4369, 286326784, 2476, 4369, 286326784, 2476, 4369, 286326784, 2476, 4369, 286326784, 5264, 131104, 2097152, 5264, 131104, 2097152, 5264, 131104, 2097152, 7424, 4194304, 1073741824, 7424, 4194304, 1073741824, 7440, 4194304, 1073741824, 7440, 4194304, 1073741824, 7456, 4194304, 1073741824, 7456, 4194304, 1073741824, 9348, 1073758208, 16384, 9348, 1073758208, 16384, 9348, 1073758208, 16384, 9352, 1073758208, 16384, 9352, 1073758208, 16384, 9352, 1073758208, 16384, 9364, 1073758208, 16384, 9364, 1073758208, 16384, 9364, 1073758208, 16384, 9368, 1073758208, 16384, 9368, 1073758208, 16384, 9368, 1073758208, 16384, 9380, 1073758208, 16384, 9380, 1073758208, 16384, 9380, 1073758208, 16384, 9384, 1073758208, 16384, 9384, 1073758208, 16384, 9384, 1073758208, 16384, 10560, 16384, 0, 10576, 16384, 0, 10592, 16384, 0, 11520, 0, 2290614272, 11520, 0, 2290614272, 11520, 0, 2290614272, 11520, 0, 2290614272, 11536, 0, 2290614272, 11536, 0, 2290614272, 11536, 0, 2290614272, 11536, 0, 2290614272, 13952, 85, 0, 13952, 85, 0, 13952, 85, 0, 13952, 85, 0, 16768, 1024, 16781312, 16768, 1024, 16781312, 16768, 1024, 16781312, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16384, 0, 4278181888, 16128, 4096, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
