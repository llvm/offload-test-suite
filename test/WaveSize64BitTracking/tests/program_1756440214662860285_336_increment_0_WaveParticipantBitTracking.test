#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 60)) {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (22 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (31 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if ((WaveGetLaneIndex() >= 47)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (38 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((54 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((70 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((79 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((88 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (93 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (100 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (104 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (114 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (123 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (128 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((147 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 3)) {
          counter3 = (counter3 + 1);
          if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 30))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((169 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (178 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if ((WaveGetLaneIndex() < 20)) {
        if ((WaveGetLaneIndex() >= 62)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (188 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (198 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (207 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (212 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (219 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
      } else {
      if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 32)) || (WaveGetLaneIndex() == 61)) || (WaveGetLaneIndex() == 35))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (240 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if (((WaveGetLaneIndex() < 20) || (WaveGetLaneIndex() >= 48))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((259 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 42))) {
        result = (result + WaveActiveMin(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (282 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 3: {
    for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
      if ((WaveGetLaneIndex() == 2)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((297 << 6) | (i5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i6 = 0; (i6 < 3); i6 = (i6 + 1)) {
        if ((WaveGetLaneIndex() < 2)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((312 << 6) | (i5 << 4)) | (i6 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 45)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((319 << 6) | (i5 << 4)) | (i6 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i6 == 1)) {
          continue;
        }
        if ((i6 == 2)) {
          break;
        }
      }
      if ((WaveGetLaneIndex() == 22)) {
        result = (result + WaveActiveMin(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((332 << 6) | (i5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i5 == 1)) {
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1434
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2432, 0, 268435456, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3472, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3488, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 3504, 572662306, 572662306, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4500, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4504, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4516, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4520, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4532, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 4536, 286331153, 286331153, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5076, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5080, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5092, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5096, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5108, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5112, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5648, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5664, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5680, 572662306, 572662306, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 5952, 1145324612, 1145324612, 6400, 559240, 0, 6400, 559240, 0, 6400, 559240, 0, 6400, 559240, 0, 6400, 559240, 0, 7296, 73, 0, 7296, 73, 0, 7296, 73, 0, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 7872, 1363481681, 340870420, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 8192, 4294967295, 4294967295, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9424, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 9440, 286331153, 286331153, 13568, 279620, 0, 13568, 279620, 0, 13568, 279620, 0, 13568, 279620, 0, 13568, 279620, 0, 16576, 0, 1145307136, 16576, 0, 1145307136, 16576, 0, 1145307136, 16576, 0, 1145307136, 16592, 0, 1145307136, 16592, 0, 1145307136, 16592, 0, 1145307136, 16592, 0, 1145307136, 16608, 0, 1145307136, 16608, 0, 1145307136, 16608, 0, 1145307136, 16608, 0, 1145307136, 18048, 0, 1024, 20416, 0, 2290647040, 20416, 0, 2290647040, 20416, 0, 2290647040, 20416, 0, 2290647040, 20416, 0, 2290647040, 20420, 0, 2290647040, 20420, 0, 2290647040, 20420, 0, 2290647040, 20420, 0, 2290647040, 20420, 0, 2290647040, 20424, 0, 2290647040, 20424, 0, 2290647040, 20424, 0, 2290647040, 20424, 0, 2290647040, 20424, 0, 2290647040, 20432, 0, 2290647040, 20432, 0, 2290647040, 20432, 0, 2290647040, 20432, 0, 2290647040, 20432, 0, 2290647040, 20436, 0, 2290647040, 20436, 0, 2290647040, 20436, 0, 2290647040, 20436, 0, 2290647040, 20436, 0, 2290647040, 20440, 0, 2290647040, 20440, 0, 2290647040, 20440, 0, 2290647040, 20440, 0, 2290647040, 20440, 0, 2290647040]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
