#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (30 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (34 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 18) || (WaveGetLaneIndex() >= 63))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((56 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 57))) {
          if (((WaveGetLaneIndex() < 12) || (WaveGetLaneIndex() >= 49))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((74 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
            if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 51))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((97 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 43)) || (WaveGetLaneIndex() == 57))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((116 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i1 == 1)) {
              break;
            }
          }
        } else {
        if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 45))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((134 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 53))) {
          if (((WaveGetLaneIndex() == 29) || (WaveGetLaneIndex() == 34))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((160 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 29) || (WaveGetLaneIndex() == 39))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((173 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((i0 == 2)) {
        break;
      }
    }
    break;
  }
  case 1: {
    for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
      if ((WaveGetLaneIndex() == 58)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((191 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if ((WaveGetLaneIndex() == 28)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((212 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((WaveGetLaneIndex() == 31)) {
        result = (result + WaveActiveMin(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((219 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        continue;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (227 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (234 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 219
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1472, 1145324612, 1145324612, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 1920, 838860, 0, 3584, 69905, 0, 3584, 69905, 0, 3584, 69905, 0, 3584, 69905, 0, 3584, 69905, 0, 3600, 69905, 0, 3600, 69905, 0, 3600, 69905, 0, 3600, 69905, 0, 3600, 69905, 0, 3616, 69905, 0, 3616, 69905, 0, 3616, 69905, 0, 3616, 69905, 0, 3616, 69905, 0, 4736, 17, 268435456, 4736, 17, 268435456, 4736, 17, 268435456, 4752, 17, 268435456, 4752, 17, 268435456, 4752, 17, 268435456, 4768, 17, 268435456, 4768, 17, 268435456, 4768, 17, 268435456, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14528, 1145324612, 1145324612, 14976, 559240, 0, 14976, 559240, 0, 14976, 559240, 0, 14976, 559240, 0, 14976, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
