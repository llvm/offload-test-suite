#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 52))) {
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 42))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (23 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((WaveGetLaneIndex() == 28) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 45))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (38 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (57 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (66 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 4))) {
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 60)) || (WaveGetLaneIndex() == 18))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (92 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 44)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 46))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (115 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (124 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (129 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((WaveGetLaneIndex() == 27) || (WaveGetLaneIndex() == 36))) {
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (149 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if ((WaveGetLaneIndex() >= 62)) {
              if ((WaveGetLaneIndex() >= 54)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (159 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if ((WaveGetLaneIndex() >= 46)) {
              result = (result + WaveActiveMin(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (166 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() < 12)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (173 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (178 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (185 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 51))) {
        result = (result + WaveActiveMin(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (204 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() < 17)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((218 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() == 35)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((234 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 32)) {
          if ((WaveGetLaneIndex() >= 59)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((244 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 52)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((253 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 50)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((260 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter1 == 2)) {
          break;
        }
      }
      if ((counter0 == 2)) {
        break;
      }
    }
    break;
  }
  case 2: {
    if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 41)) || (WaveGetLaneIndex() == 9))) {
      if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 63)) || (WaveGetLaneIndex() == 51))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (302 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 46))) {
        if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 57))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (322 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if ((((WaveGetLaneIndex() == 25) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((345 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            continue;
          }
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (352 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 378
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1472, 9, 2453667840, 1472, 9, 2453667840, 1472, 9, 2453667840, 1472, 9, 2453667840, 1472, 9, 2453667840, 1472, 9, 2453667840, 2432, 0, 8192, 3648, 134217792, 0, 3648, 134217792, 0, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 7936, 1363481681, 340870420, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 8256, 4294967295, 4294967295, 13968, 74898, 0, 13968, 74898, 0, 13968, 74898, 0, 13968, 74898, 0, 13968, 74898, 0, 13968, 74898, 0, 13984, 74898, 0, 13984, 74898, 0, 13984, 74898, 0, 13984, 74898, 0, 13984, 74898, 0, 13984, 74898, 0, 15636, 0, 536870912, 15640, 0, 536870912, 15652, 0, 536870912, 15656, 0, 536870912, 16212, 0, 613416960, 16212, 0, 613416960, 16212, 0, 613416960, 16212, 0, 613416960, 16216, 0, 613416960, 16216, 0, 613416960, 16216, 0, 613416960, 16216, 0, 613416960, 16228, 0, 613416960, 16228, 0, 613416960, 16228, 0, 613416960, 16228, 0, 613416960, 16232, 0, 613416960, 16232, 0, 613416960, 16232, 0, 613416960, 16232, 0, 613416960]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
