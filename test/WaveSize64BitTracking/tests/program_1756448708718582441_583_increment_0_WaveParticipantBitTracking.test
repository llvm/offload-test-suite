#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 60))) {
    if ((((WaveGetLaneIndex() == 23) || (WaveGetLaneIndex() == 37)) || (WaveGetLaneIndex() == 19))) {
      result = (result + WaveActiveSum(9));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (25 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if ((((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 42)) || (WaveGetLaneIndex() == 62)) || (WaveGetLaneIndex() == 43))) {
        if ((((WaveGetLaneIndex() == 16) || (WaveGetLaneIndex() == 52)) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((66 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 61)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((75 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((WaveGetLaneIndex() < 11) || (WaveGetLaneIndex() >= 59))) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveMax(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (96 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (106 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (115 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (120 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 43))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (133 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 58))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((152 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 45)) || (WaveGetLaneIndex() == 59))) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((178 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 49)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((197 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 36))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((208 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (213 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 141
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [6144, 1, 2415919104, 6144, 1, 2415919104, 6144, 1, 2415919104, 6784, 73, 0, 6784, 73, 0, 6784, 73, 0, 8512, 585, 2415919104, 8512, 585, 2415919104, 8512, 585, 2415919104, 8512, 585, 2415919104, 8512, 585, 2415919104, 8512, 585, 2415919104, 9728, 0, 67108864, 9744, 0, 67108864, 11396, 1024, 0, 11400, 1024, 0, 11412, 1024, 0, 11416, 1024, 0, 12612, 4194304, 131072, 12612, 4194304, 131072, 12616, 4194304, 131072, 12616, 4194304, 131072, 12628, 4194304, 131072, 12628, 4194304, 131072, 12632, 4194304, 131072, 12632, 4194304, 131072, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513, 13632, 613566756, 1227133513]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
