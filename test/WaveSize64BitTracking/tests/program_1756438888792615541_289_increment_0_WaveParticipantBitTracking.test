#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 54))) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (25 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 17) || (WaveGetLaneIndex() >= 51))) {
          result = (result + WaveActiveSum(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (36 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (45 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (49 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  uint counter0 = 0;
  while ((counter0 < 2)) {
    counter0 = (counter0 + 1);
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 53))) {
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 44))) {
          result = (result + WaveActiveMax(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((81 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((91 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((100 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((105 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((109 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 50))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((122 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if (((WaveGetLaneIndex() < 19) || (WaveGetLaneIndex() >= 59))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((133 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter0 == 1)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 426
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 2304, 21845, 1430257664, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5204, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5208, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5212, 1, 4292870144, 5844, 9, 0, 5844, 9, 0, 5848, 9, 0, 5848, 9, 0, 5852, 9, 0, 5852, 9, 0, 6420, 0, 67108864, 6424, 0, 67108864, 6428, 0, 67108864, 6740, 4, 1226833920, 6740, 4, 1226833920, 6740, 4, 1226833920, 6740, 4, 1226833920, 6740, 4, 1226833920, 6744, 4, 1226833920, 6744, 4, 1226833920, 6744, 4, 1226833920, 6744, 4, 1226833920, 6744, 4, 1226833920, 6748, 4, 1226833920, 6748, 4, 1226833920, 6748, 4, 1226833920, 6748, 4, 1226833920, 6748, 4, 1226833920, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7828, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7832, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 7836, 15, 4292870144, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 524272, 0, 8528, 15, 4160749568, 8528, 15, 4160749568, 8528, 15, 4160749568, 8528, 15, 4160749568, 8528, 15, 4160749568, 8528, 15, 4160749568, 8528, 15, 4160749568, 8528, 15, 4160749568, 8528, 15, 4160749568]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
