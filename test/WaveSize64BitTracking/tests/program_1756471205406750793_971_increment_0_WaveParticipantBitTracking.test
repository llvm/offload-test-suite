#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 55)) || (WaveGetLaneIndex() == 6))) {
    if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 36)) || (WaveGetLaneIndex() == 53)) || (WaveGetLaneIndex() == 51))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (33 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 46)) || (WaveGetLaneIndex() == 57))) {
      if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 44))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (63 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 47)) || (WaveGetLaneIndex() == 57)) || (WaveGetLaneIndex() == 7))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((93 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() >= 47)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((107 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 52)) {
            result = (result + WaveActiveMax(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((114 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((134 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 54)) || (WaveGetLaneIndex() == 35))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((161 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 17) || (WaveGetLaneIndex() == 33)) || (WaveGetLaneIndex() == 56)) || (WaveGetLaneIndex() == 7))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((180 << 6) | (i2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i3 == 1)) {
            break;
          }
        }
      }
    }
  case 1: {
      if ((WaveGetLaneIndex() < 26)) {
        if ((WaveGetLaneIndex() >= 35)) {
          result = (result + WaveActiveSum(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (193 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() < 15) || (WaveGetLaneIndex() >= 52))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((214 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 14) || (WaveGetLaneIndex() >= 43))) {
            result = (result + WaveActiveMax(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((225 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 1)) {
            continue;
          }
          if ((i4 == 1)) {
            break;
          }
        }
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (236 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 414
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8576, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 8592, 136348168, 2181570690, 10304, 1, 4194304, 10304, 1, 4194304, 10308, 1, 4194304, 10308, 1, 4194304, 10320, 1, 4194304, 10320, 1, 4194304, 10324, 1, 4194304, 10324, 1, 4194304, 11520, 0, 2, 11524, 0, 2, 11536, 0, 2, 11540, 0, 2, 13696, 14043, 0, 13696, 14043, 0, 13696, 14043, 0, 13696, 14043, 0, 13696, 14043, 0, 13696, 14043, 0, 13696, 14043, 0, 13696, 14043, 0, 13696, 14043, 0, 13696, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 13712, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14400, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 14416, 14043, 0, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295, 15104, 4294967295, 4294967295]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
