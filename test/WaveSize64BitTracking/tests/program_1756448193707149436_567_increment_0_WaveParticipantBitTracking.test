#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 58))) {
    if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 48))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (19 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 40)) || (WaveGetLaneIndex() == 54))) {
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (40 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter0 = 0;
          while ((counter0 < 3)) {
            counter0 = (counter0 + 1);
            if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 58))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((58 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (63 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (70 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (74 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() == 29) || (WaveGetLaneIndex() == 51))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (87 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 58))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (98 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 35)) || (WaveGetLaneIndex() == 54))) {
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if ((WaveGetLaneIndex() < 31)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((128 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() >= 47)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((143 << 6) | (i1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 52))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (154 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (170 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 61))) {
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 52))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (188 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (198 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (207 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (211 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 53))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (224 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 255
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 1216, 511, 4227858432, 2560, 16, 0, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 495, 4227858432, 6272, 16, 0, 8192, 526336, 0, 8192, 526336, 0, 8208, 526336, 0, 8208, 526336, 0, 9152, 0, 4194304, 9156, 0, 4194304, 9160, 0, 4194304, 9168, 0, 4194304, 9172, 0, 4194304, 9176, 0, 4194304, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 10880, 2863311530, 2863311530, 12032, 170, 2684354560, 12032, 170, 2684354560, 12032, 170, 2684354560, 12032, 170, 2684354560, 12032, 170, 2684354560, 12032, 170, 2684354560, 14336, 170, 2684354560, 14336, 170, 2684354560, 14336, 170, 2684354560, 14336, 170, 2684354560, 14336, 170, 2684354560, 14336, 170, 2684354560]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
