#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 10))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((28 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((42 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 14))) {
            result = (result + WaveActiveMin(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((53 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() >= 11)) {
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 4))) {
          uint counter2 = 0;
          while ((counter2 < 3)) {
            counter2 = (counter2 + 1);
            if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 10))) {
              result = (result + WaveActiveMin(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((93 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 9))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((114 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter2 == 2)) {
              break;
            }
          }
        }
      } else {
      if (((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11))) {
        if (((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (137 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 6)) {
          if ((WaveGetLaneIndex() == 8)) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (147 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (166 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 11)) {
        result = (result + WaveActiveSum(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (173 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 13))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((204 << 6) | (counter3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 1)) {
            continue;
          }
        }
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 0))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((222 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
        if ((WaveGetLaneIndex() >= 13)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((237 << 6) | (i5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter6 = 0;
        while ((counter6 < 2)) {
          counter6 = (counter6 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((253 << 6) | (i5 << 4)) | (counter6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i5 == 1)) {
          continue;
        }
      }
      break;
    }
  case 2: {
      for (uint i7 = 0; (i7 < 2); i7 = (i7 + 1)) {
        if ((WaveGetLaneIndex() == 9)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((271 << 6) | (i7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter8 = 0;
        while ((counter8 < 2)) {
          counter8 = (counter8 + 1);
          if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 13))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((297 << 6) | (i7 << 4)) | (counter8 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 11)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((304 << 6) | (i7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 14))) {
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 13))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (324 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter9 = 0;
        while ((counter9 < 3)) {
          counter9 = (counter9 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((340 << 6) | (counter9 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 15))) {
          result = (result + WaveActiveMax(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (351 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 840
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1808, 21509, 0, 1808, 21509, 0, 1808, 21509, 0, 1808, 21509, 0, 1808, 21509, 0, 1812, 21509, 0, 1812, 21509, 0, 1812, 21509, 0, 1812, 21509, 0, 1812, 21509, 0, 1824, 21509, 0, 1824, 21509, 0, 1824, 21509, 0, 1824, 21509, 0, 1824, 21509, 0, 1828, 21509, 0, 1828, 21509, 0, 1828, 21509, 0, 1828, 21509, 0, 1828, 21509, 0, 1840, 21509, 0, 1840, 21509, 0, 1840, 21509, 0, 1840, 21509, 0, 1840, 21509, 0, 1844, 21509, 0, 1844, 21509, 0, 1844, 21509, 0, 1844, 21509, 0, 1844, 21509, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 3408, 16385, 0, 3408, 16385, 0, 3412, 16385, 0, 3412, 16385, 0, 3424, 16385, 0, 3424, 16385, 0, 3428, 16385, 0, 3428, 16385, 0, 3440, 16385, 0, 3440, 16385, 0, 3444, 16385, 0, 3444, 16385, 0, 13072, 17, 0, 13072, 17, 0, 13076, 17, 0, 13076, 17, 0, 13080, 17, 0, 13080, 17, 0, 13088, 17, 0, 13088, 17, 0, 13092, 17, 0, 13092, 17, 0, 13096, 17, 0, 13096, 17, 0, 13104, 17, 0, 13104, 17, 0, 13108, 17, 0, 13108, 17, 0, 13112, 17, 0, 13112, 17, 0, 14224, 1, 0, 14240, 1, 0, 14256, 1, 0, 15168, 8192, 0, 15184, 8192, 0, 15200, 8192, 0, 16196, 8738, 0, 16196, 8738, 0, 16196, 8738, 0, 16196, 8738, 0, 16200, 8738, 0, 16200, 8738, 0, 16200, 8738, 0, 16200, 8738, 0, 16212, 8738, 0, 16212, 8738, 0, 16212, 8738, 0, 16212, 8738, 0, 16216, 8738, 0, 16216, 8738, 0, 16216, 8738, 0, 16216, 8738, 0, 16228, 8738, 0, 16228, 8738, 0, 16228, 8738, 0, 16228, 8738, 0, 16232, 8738, 0, 16232, 8738, 0, 16232, 8738, 0, 16232, 8738, 0, 20736, 32768, 0, 22464, 32768, 0, 1808, 21509, 0, 1808, 21509, 0, 1808, 21509, 0, 1808, 21509, 0, 1808, 21509, 0, 1812, 21509, 0, 1812, 21509, 0, 1812, 21509, 0, 1812, 21509, 0, 1812, 21509, 0, 1824, 21509, 0, 1824, 21509, 0, 1824, 21509, 0, 1824, 21509, 0, 1824, 21509, 0, 1828, 21509, 0, 1828, 21509, 0, 1828, 21509, 0, 1828, 21509, 0, 1828, 21509, 0, 1840, 21509, 0, 1840, 21509, 0, 1840, 21509, 0, 1840, 21509, 0, 1840, 21509, 0, 1844, 21509, 0, 1844, 21509, 0, 1844, 21509, 0, 1844, 21509, 0, 1844, 21509, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2704, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2708, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2720, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2724, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2736, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 2740, 21845, 0, 3408, 16385, 0, 3408, 16385, 0, 3412, 16385, 0, 3412, 16385, 0, 3424, 16385, 0, 3424, 16385, 0, 3428, 16385, 0, 3428, 16385, 0, 3440, 16385, 0, 3440, 16385, 0, 3444, 16385, 0, 3444, 16385, 0, 13072, 17, 0, 13072, 17, 0, 13076, 17, 0, 13076, 17, 0, 13080, 17, 0, 13080, 17, 0, 13088, 17, 0, 13088, 17, 0, 13092, 17, 0, 13092, 17, 0, 13096, 17, 0, 13096, 17, 0, 13104, 17, 0, 13104, 17, 0, 13108, 17, 0, 13108, 17, 0, 13112, 17, 0, 13112, 17, 0, 14224, 1, 0, 14240, 1, 0, 14256, 1, 0, 15168, 8192, 0, 15184, 8192, 0, 15200, 8192, 0, 16196, 8738, 0, 16196, 8738, 0, 16196, 8738, 0, 16196, 8738, 0, 16200, 8738, 0, 16200, 8738, 0, 16200, 8738, 0, 16200, 8738, 0, 16212, 8738, 0, 16212, 8738, 0, 16212, 8738, 0, 16212, 8738, 0, 16216, 8738, 0, 16216, 8738, 0, 16216, 8738, 0, 16216, 8738, 0, 16228, 8738, 0, 16228, 8738, 0, 16228, 8738, 0, 16228, 8738, 0, 16232, 8738, 0, 16232, 8738, 0, 16232, 8738, 0, 16232, 8738, 0, 20736, 32768, 0, 22464, 32768, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
