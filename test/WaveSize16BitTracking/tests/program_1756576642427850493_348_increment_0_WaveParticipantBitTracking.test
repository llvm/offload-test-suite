#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() == 15)) {
        if ((WaveGetLaneIndex() == 10)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (14 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (24 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (33 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if ((WaveGetLaneIndex() == 3)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (40 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 15))) {
            if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 0))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (69 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (78 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
            if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 0))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((109 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  }
  for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 13))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((128 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter2 = 0;
    while ((counter2 < 3)) {
      counter2 = (counter2 + 1);
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 14))) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 14))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((153 << 6) | (i1 << 4)) | (counter2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 14)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((160 << 6) | (i1 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 6)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((167 << 6) | (i1 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 10))) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((178 << 6) | (i1 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 372
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [6976, 2048, 0, 6992, 2048, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 9796, 49153, 0, 9796, 49153, 0, 9796, 49153, 0, 9800, 49153, 0, 9800, 49153, 0, 9800, 49153, 0, 9804, 49153, 0, 9804, 49153, 0, 9804, 49153, 0, 9812, 49153, 0, 9812, 49153, 0, 9812, 49153, 0, 9816, 49153, 0, 9816, 49153, 0, 9816, 49153, 0, 9820, 49153, 0, 9820, 49153, 0, 9820, 49153, 0, 10692, 64, 0, 10696, 64, 0, 10700, 64, 0, 10708, 64, 0, 10712, 64, 0, 10716, 64, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 6976, 2048, 0, 6992, 2048, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8192, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 8208, 57359, 0, 9796, 49153, 0, 9796, 49153, 0, 9796, 49153, 0, 9800, 49153, 0, 9800, 49153, 0, 9800, 49153, 0, 9804, 49153, 0, 9804, 49153, 0, 9804, 49153, 0, 9812, 49153, 0, 9812, 49153, 0, 9812, 49153, 0, 9816, 49153, 0, 9816, 49153, 0, 9816, 49153, 0, 9820, 49153, 0, 9820, 49153, 0, 9820, 49153, 0, 10692, 64, 0, 10696, 64, 0, 10700, 64, 0, 10708, 64, 0, 10712, 64, 0, 10716, 64, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11392, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0, 11408, 64543, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
