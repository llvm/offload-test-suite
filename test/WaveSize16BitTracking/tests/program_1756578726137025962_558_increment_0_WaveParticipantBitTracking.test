#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 7))) {
    if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 12))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (35 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if ((WaveGetLaneIndex() == 13)) {
        if ((WaveGetLaneIndex() == 4)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((53 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 15))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((72 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() >= 15)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((89 << 6) | (i0 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 3)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((96 << 6) | (i0 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((105 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 5))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((124 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i0 == 1)) {
      break;
    }
  }
  } else {
  for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 10))) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((146 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 0)) {
      if ((WaveGetLaneIndex() == 6)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((156 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 7)) {
        result = (result + WaveActiveSum(10));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((163 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 10))) {
      result = (result + WaveActiveSum(1));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((174 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i3 == 1)) {
      break;
    }
  }
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 13))) {
    result = (result + WaveActiveSum(8));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (188 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 324
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2240, 2, 0, 6144, 2, 0, 6148, 2, 0, 6152, 2, 0, 6160, 2, 0, 6164, 2, 0, 6168, 2, 0, 6720, 256, 0, 6736, 256, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 2240, 2, 0, 6144, 2, 0, 6148, 2, 0, 6152, 2, 0, 6160, 2, 0, 6164, 2, 0, 6168, 2, 0, 6720, 256, 0, 6736, 256, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9344, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 9360, 64525, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11136, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 11152, 64541, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0, 12032, 57373, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
