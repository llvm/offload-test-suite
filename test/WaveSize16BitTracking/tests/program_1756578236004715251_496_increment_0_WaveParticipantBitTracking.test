#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 11))) {
        result = (result + WaveActiveMax(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((26 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 1)) {
        if ((WaveGetLaneIndex() == 2)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((36 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
          if ((WaveGetLaneIndex() < 5)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((((51 << 6) | (i0 << 4)) | (i1 << 2)) | i2);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 13)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((((58 << 6) | (i0 << 4)) | (i1 << 2)) | i2);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            continue;
          }
        }
        if ((WaveGetLaneIndex() == 13)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((68 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((87 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i1 == 2)) {
        break;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 288
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1664, 2080, 0, 1664, 2080, 0, 1668, 2080, 0, 1668, 2080, 0, 1672, 2080, 0, 1672, 2080, 0, 1680, 2080, 0, 1680, 2080, 0, 1684, 2080, 0, 1684, 2080, 0, 1688, 2080, 0, 1688, 2080, 0, 3264, 2, 0, 3265, 2, 0, 3268, 2, 0, 3269, 2, 0, 3272, 2, 0, 3273, 2, 0, 3280, 2, 0, 3281, 2, 0, 3284, 2, 0, 3285, 2, 0, 3288, 2, 0, 3289, 2, 0, 5568, 18456, 0, 5568, 18456, 0, 5568, 18456, 0, 5568, 18456, 0, 5572, 18456, 0, 5572, 18456, 0, 5572, 18456, 0, 5572, 18456, 0, 5576, 18456, 0, 5576, 18456, 0, 5576, 18456, 0, 5576, 18456, 0, 5584, 18456, 0, 5584, 18456, 0, 5584, 18456, 0, 5584, 18456, 0, 5588, 18456, 0, 5588, 18456, 0, 5588, 18456, 0, 5588, 18456, 0, 5592, 18456, 0, 5592, 18456, 0, 5592, 18456, 0, 5592, 18456, 0, 1664, 2080, 0, 1664, 2080, 0, 1668, 2080, 0, 1668, 2080, 0, 1672, 2080, 0, 1672, 2080, 0, 1680, 2080, 0, 1680, 2080, 0, 1684, 2080, 0, 1684, 2080, 0, 1688, 2080, 0, 1688, 2080, 0, 3264, 2, 0, 3265, 2, 0, 3268, 2, 0, 3269, 2, 0, 3272, 2, 0, 3273, 2, 0, 3280, 2, 0, 3281, 2, 0, 3284, 2, 0, 3285, 2, 0, 3288, 2, 0, 3289, 2, 0, 5568, 18456, 0, 5568, 18456, 0, 5568, 18456, 0, 5568, 18456, 0, 5572, 18456, 0, 5572, 18456, 0, 5572, 18456, 0, 5572, 18456, 0, 5576, 18456, 0, 5576, 18456, 0, 5576, 18456, 0, 5576, 18456, 0, 5584, 18456, 0, 5584, 18456, 0, 5584, 18456, 0, 5584, 18456, 0, 5588, 18456, 0, 5588, 18456, 0, 5588, 18456, 0, 5588, 18456, 0, 5592, 18456, 0, 5592, 18456, 0, 5592, 18456, 0, 5592, 18456, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
