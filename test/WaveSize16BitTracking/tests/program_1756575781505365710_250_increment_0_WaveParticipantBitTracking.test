#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() >= 8)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((16 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 8)) {
          if ((WaveGetLaneIndex() >= 15)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((28 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveMax(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((47 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 5))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((70 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 10)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((79 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 1: {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (93 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((110 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((119 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 13))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (130 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 10))) {
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 13))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (148 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (153 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 300
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1040, 37376, 0, 1040, 37376, 0, 1040, 37376, 0, 1056, 37376, 0, 1056, 37376, 0, 1056, 37376, 0, 1072, 37376, 0, 1072, 37376, 0, 1072, 37376, 0, 1808, 32768, 0, 1824, 32768, 0, 1840, 32768, 0, 5072, 36864, 0, 5072, 36864, 0, 5088, 36864, 0, 5088, 36864, 0, 5104, 36864, 0, 5104, 36864, 0, 7040, 5201, 0, 7040, 5201, 0, 7040, 5201, 0, 7040, 5201, 0, 7040, 5201, 0, 7056, 5201, 0, 7056, 5201, 0, 7056, 5201, 0, 7056, 5201, 0, 7056, 5201, 0, 8320, 40962, 0, 8320, 40962, 0, 8320, 40962, 0, 9472, 40962, 0, 9472, 40962, 0, 9472, 40962, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 1040, 37376, 0, 1040, 37376, 0, 1040, 37376, 0, 1056, 37376, 0, 1056, 37376, 0, 1056, 37376, 0, 1072, 37376, 0, 1072, 37376, 0, 1072, 37376, 0, 1808, 32768, 0, 1824, 32768, 0, 1840, 32768, 0, 5072, 36864, 0, 5072, 36864, 0, 5088, 36864, 0, 5088, 36864, 0, 5104, 36864, 0, 5104, 36864, 0, 7040, 5201, 0, 7040, 5201, 0, 7040, 5201, 0, 7040, 5201, 0, 7040, 5201, 0, 7056, 5201, 0, 7056, 5201, 0, 7056, 5201, 0, 7056, 5201, 0, 7056, 5201, 0, 8320, 40962, 0, 8320, 40962, 0, 8320, 40962, 0, 9472, 40962, 0, 9472, 40962, 0, 9472, 40962, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0, 9792, 65535, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
