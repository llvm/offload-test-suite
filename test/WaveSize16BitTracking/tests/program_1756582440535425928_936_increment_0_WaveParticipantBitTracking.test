#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 11))) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 15))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (29 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            uint counter0 = 0;
            while ((counter0 < 2)) {
              counter0 = (counter0 + 1);
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveMax(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((48 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((57 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (66 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 11))) {
              if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 10))) {
                result = (result + WaveActiveMin(8));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (84 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (95 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (104 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (108 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 11))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (119 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (124 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (134 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() >= 12)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((148 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 11))) {
            result = (result + WaveActiveMin(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((166 << 6) | (counter1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 14)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((173 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 486
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1856, 32771, 0, 1856, 32771, 0, 1856, 32771, 0, 3088, 4097, 0, 3088, 4097, 0, 3104, 4097, 0, 3104, 4097, 0, 3664, 4097, 0, 3664, 4097, 0, 3680, 4097, 0, 3680, 4097, 0, 4224, 16, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 8576, 85, 0, 8576, 85, 0, 8576, 85, 0, 8576, 85, 0, 9488, 40960, 0, 9488, 40960, 0, 9504, 40960, 0, 9504, 40960, 0, 9520, 40960, 0, 9520, 40960, 0, 10644, 43018, 0, 10644, 43018, 0, 10644, 43018, 0, 10644, 43018, 0, 10644, 43018, 0, 10648, 43018, 0, 10648, 43018, 0, 10648, 43018, 0, 10648, 43018, 0, 10648, 43018, 0, 10660, 43018, 0, 10660, 43018, 0, 10660, 43018, 0, 10660, 43018, 0, 10660, 43018, 0, 10664, 43018, 0, 10664, 43018, 0, 10664, 43018, 0, 10664, 43018, 0, 10664, 43018, 0, 10676, 43018, 0, 10676, 43018, 0, 10676, 43018, 0, 10676, 43018, 0, 10676, 43018, 0, 10680, 43018, 0, 10680, 43018, 0, 10680, 43018, 0, 10680, 43018, 0, 10680, 43018, 0, 11088, 32768, 0, 11104, 32768, 0, 11120, 32768, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 1856, 32771, 0, 1856, 32771, 0, 1856, 32771, 0, 3088, 4097, 0, 3088, 4097, 0, 3104, 4097, 0, 3104, 4097, 0, 3664, 4097, 0, 3664, 4097, 0, 3680, 4097, 0, 3680, 4097, 0, 4224, 16, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7616, 45083, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 7936, 65535, 0, 8576, 85, 0, 8576, 85, 0, 8576, 85, 0, 8576, 85, 0, 9488, 40960, 0, 9488, 40960, 0, 9504, 40960, 0, 9504, 40960, 0, 9520, 40960, 0, 9520, 40960, 0, 10644, 43018, 0, 10644, 43018, 0, 10644, 43018, 0, 10644, 43018, 0, 10644, 43018, 0, 10648, 43018, 0, 10648, 43018, 0, 10648, 43018, 0, 10648, 43018, 0, 10648, 43018, 0, 10660, 43018, 0, 10660, 43018, 0, 10660, 43018, 0, 10660, 43018, 0, 10660, 43018, 0, 10664, 43018, 0, 10664, 43018, 0, 10664, 43018, 0, 10664, 43018, 0, 10664, 43018, 0, 10676, 43018, 0, 10676, 43018, 0, 10676, 43018, 0, 10676, 43018, 0, 10676, 43018, 0, 10680, 43018, 0, 10680, 43018, 0, 10680, 43018, 0, 10680, 43018, 0, 10680, 43018, 0, 11088, 32768, 0, 11104, 32768, 0, 11120, 32768, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
