#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((25 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((34 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter0 == 1)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (46 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 12))) {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 15))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (67 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 11))) {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 15))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (85 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 10))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (98 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if ((WaveGetLaneIndex() == 3)) {
        result = (result + WaveActiveMax(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (105 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() >= 14)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((121 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 14)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (128 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (137 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (142 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (149 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  uint counter3 = 0;
  while ((counter3 < 2)) {
    counter3 = (counter3 + 1);
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 11))) {
      result = (result + WaveActiveSum(5));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((167 << 6) | (counter3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 10))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((178 << 6) | (counter3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 420
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 4288, 1, 0, 5440, 1, 0, 6272, 4097, 0, 6272, 4097, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2196, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 2200, 21845, 0, 4288, 1, 0, 5440, 1, 0, 6272, 4097, 0, 6272, 4097, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9088, 26214, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 9536, 61166, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10704, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 10720, 63491, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11408, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0, 11424, 64515, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
