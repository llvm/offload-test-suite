#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 12))) {
        if ((WaveGetLaneIndex() < 2)) {
          if ((WaveGetLaneIndex() < 4)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (29 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 14))) {
            if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 2))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (63 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() < 4)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (70 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 11))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (83 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 15))) {
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 11))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (103 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 10))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((121 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (130 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (135 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() < 1)) {
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 14))) {
          if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 15))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((171 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 13))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((188 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((199 << 6) | (i1 << 4)) | (counter2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 11))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((216 << 6) | (i1 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() < 4)) {
      result = (result + WaveActiveMin(5));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((223 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i1 == 1)) {
      break;
    }
  }
  if ((WaveGetLaneIndex() >= 13)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (233 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((250 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 13))) {
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 10))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((268 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((277 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i3 == 2)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 516
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5312, 32769, 0, 5312, 32769, 0, 6592, 32769, 0, 6592, 32769, 0, 7760, 32777, 0, 7760, 32777, 0, 7760, 32777, 0, 7776, 32777, 0, 7776, 32777, 0, 7776, 32777, 0, 7792, 32777, 0, 7792, 32777, 0, 7792, 32777, 0, 8320, 1040, 0, 8320, 1040, 0, 8640, 18724, 0, 8640, 18724, 0, 8640, 18724, 0, 8640, 18724, 0, 8640, 18724, 0, 12740, 1, 0, 12744, 1, 0, 12756, 1, 0, 12760, 1, 0, 14272, 1, 0, 14288, 1, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 17152, 57345, 0, 17152, 57345, 0, 17152, 57345, 0, 17152, 57345, 0, 17168, 57345, 0, 17168, 57345, 0, 17168, 57345, 0, 17168, 57345, 0, 17184, 57345, 0, 17184, 57345, 0, 17184, 57345, 0, 17184, 57345, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 5312, 32769, 0, 5312, 32769, 0, 6592, 32769, 0, 6592, 32769, 0, 7760, 32777, 0, 7760, 32777, 0, 7760, 32777, 0, 7776, 32777, 0, 7776, 32777, 0, 7776, 32777, 0, 7792, 32777, 0, 7792, 32777, 0, 7792, 32777, 0, 8320, 1040, 0, 8320, 1040, 0, 8640, 18724, 0, 8640, 18724, 0, 8640, 18724, 0, 8640, 18724, 0, 8640, 18724, 0, 12740, 1, 0, 12744, 1, 0, 12756, 1, 0, 12760, 1, 0, 14272, 1, 0, 14288, 1, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16000, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16016, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 16032, 43690, 0, 17152, 57345, 0, 17152, 57345, 0, 17152, 57345, 0, 17152, 57345, 0, 17168, 57345, 0, 17168, 57345, 0, 17168, 57345, 0, 17168, 57345, 0, 17184, 57345, 0, 17184, 57345, 0, 17184, 57345, 0, 17184, 57345, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17728, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17744, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0, 17760, 21845, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
