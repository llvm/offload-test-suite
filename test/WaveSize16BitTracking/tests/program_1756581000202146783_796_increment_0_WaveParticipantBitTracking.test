#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() == 3)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((27 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 10))) {
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 11))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((45 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 12))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((56 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 2)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((63 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 15))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((74 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
            if ((WaveGetLaneIndex() < 1)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((99 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i2 == 1)) {
              continue;
            }
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (111 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 14))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((129 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if ((WaveGetLaneIndex() == 14)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((146 << 6) | (counter3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 7)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((153 << 6) | (counter3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 12))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((164 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 12))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (187 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    uint counter5 = 0;
    while ((counter5 < 2)) {
      counter5 = (counter5 + 1);
      if ((WaveGetLaneIndex() < 2)) {
        result = (result + WaveActiveMax(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((201 << 6) | (counter5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 7)) {
        result = (result + WaveActiveMax(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((208 << 6) | (counter5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 3: {
    uint counter6 = 0;
    while ((counter6 < 3)) {
      counter6 = (counter6 + 1);
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((224 << 6) | (counter6 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (228 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  uint counter7 = 0;
  while ((counter7 < 2)) {
    counter7 = (counter7 + 1);
    for (uint i8 = 0; (i8 < 3); i8 = (i8 + 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((254 << 6) | (counter7 << 4)) | (i8 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((273 << 6) | (counter7 << 4)) | (i8 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((284 << 6) | (counter7 << 4)) | (i8 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i8 == 1)) {
        continue;
      }
      if ((i8 == 2)) {
        break;
      }
    }
    if ((WaveGetLaneIndex() == 14)) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((297 << 6) | (counter7 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 744
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2880, 4097, 0, 2880, 4097, 0, 2884, 4097, 0, 2884, 4097, 0, 2896, 4097, 0, 2896, 4097, 0, 2900, 4097, 0, 2900, 4097, 0, 3584, 4097, 0, 3584, 4097, 0, 3588, 4097, 0, 3588, 4097, 0, 3600, 4097, 0, 3600, 4097, 0, 3604, 4097, 0, 3604, 4097, 0, 4736, 1, 0, 4752, 1, 0, 7104, 8738, 0, 7104, 8738, 0, 7104, 8738, 0, 7104, 8738, 0, 13328, 68, 0, 13328, 68, 0, 13344, 68, 0, 13344, 68, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 19024, 16384, 0, 19040, 16384, 0, 2880, 4097, 0, 2880, 4097, 0, 2884, 4097, 0, 2884, 4097, 0, 2896, 4097, 0, 2896, 4097, 0, 2900, 4097, 0, 2900, 4097, 0, 3584, 4097, 0, 3584, 4097, 0, 3588, 4097, 0, 3588, 4097, 0, 3600, 4097, 0, 3600, 4097, 0, 3604, 4097, 0, 3604, 4097, 0, 4736, 1, 0, 4752, 1, 0, 7104, 8738, 0, 7104, 8738, 0, 7104, 8738, 0, 7104, 8738, 0, 13328, 68, 0, 13328, 68, 0, 13344, 68, 0, 13344, 68, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16272, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16276, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16280, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16288, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16292, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 16296, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18192, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18196, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18200, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18208, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18212, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 18216, 43690, 0, 19024, 16384, 0, 19040, 16384, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
