#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((29 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 7)) {
          if ((WaveGetLaneIndex() == 3)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((39 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((48 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((59 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 2)) {
        break;
      }
    }
    break;
  }
  case 1: {
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if ((WaveGetLaneIndex() == 0)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((78 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 15))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((96 << 6) | (counter1 << 4)) | (counter2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 15)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((103 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 2: {
    for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 15))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((130 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 10))) {
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((156 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 10))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((171 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 1)) {
      if ((WaveGetLaneIndex() >= 15)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (181 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (191 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (200 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (204 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  uint counter4 = 0;
  while ((counter4 < 3)) {
    counter4 = (counter4 + 1);
    if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 10))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((236 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 7)) {
      if ((WaveGetLaneIndex() < 4)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((246 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((256 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((265 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if ((WaveGetLaneIndex() < 3)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((274 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 13))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((285 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter5 = 0;
    while ((counter5 < 2)) {
      counter5 = (counter5 + 1);
      if ((WaveGetLaneIndex() == 14)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((299 << 6) | (counter4 << 4)) | (counter5 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter5 == 1)) {
        break;
      }
    }
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 15))) {
      result = (result + WaveActiveMin(5));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((313 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 15))) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((328 << 6) | (counter4 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 576
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [6164, 2, 0, 6168, 2, 0, 6172, 2, 0, 6180, 2, 0, 6184, 2, 0, 6188, 2, 0, 8320, 8192, 0, 8336, 8192, 0, 8352, 8192, 0, 10944, 1024, 0, 10960, 1024, 0, 10976, 1024, 0, 15120, 5698, 0, 15120, 5698, 0, 15120, 5698, 0, 15120, 5698, 0, 15120, 5698, 0, 15136, 5698, 0, 15136, 5698, 0, 15136, 5698, 0, 15136, 5698, 0, 15136, 5698, 0, 15152, 5698, 0, 15152, 5698, 0, 15152, 5698, 0, 15152, 5698, 0, 15152, 5698, 0, 15760, 15, 0, 15760, 15, 0, 15760, 15, 0, 15760, 15, 0, 15776, 15, 0, 15776, 15, 0, 15776, 15, 0, 15776, 15, 0, 15792, 15, 0, 15792, 15, 0, 15792, 15, 0, 15792, 15, 0, 16400, 85, 0, 16400, 85, 0, 16400, 85, 0, 16400, 85, 0, 16416, 85, 0, 16416, 85, 0, 16416, 85, 0, 16416, 85, 0, 16432, 85, 0, 16432, 85, 0, 16432, 85, 0, 16432, 85, 0, 16976, 85, 0, 16976, 85, 0, 16976, 85, 0, 16976, 85, 0, 16992, 85, 0, 16992, 85, 0, 16992, 85, 0, 16992, 85, 0, 17008, 85, 0, 17008, 85, 0, 17008, 85, 0, 17008, 85, 0, 17552, 7, 0, 17552, 7, 0, 17552, 7, 0, 17568, 7, 0, 17568, 7, 0, 17568, 7, 0, 17584, 7, 0, 17584, 7, 0, 17584, 7, 0, 18256, 57344, 0, 18256, 57344, 0, 18256, 57344, 0, 18272, 57344, 0, 18272, 57344, 0, 18272, 57344, 0, 18288, 57344, 0, 18288, 57344, 0, 18288, 57344, 0, 19156, 16384, 0, 19172, 16384, 0, 19188, 16384, 0, 20048, 32768, 0, 20064, 32768, 0, 20080, 32768, 0, 21008, 36992, 0, 21008, 36992, 0, 21008, 36992, 0, 21024, 36992, 0, 21024, 36992, 0, 21024, 36992, 0, 21040, 36992, 0, 21040, 36992, 0, 21040, 36992, 0, 6164, 2, 0, 6168, 2, 0, 6172, 2, 0, 6180, 2, 0, 6184, 2, 0, 6188, 2, 0, 8320, 8192, 0, 8336, 8192, 0, 8352, 8192, 0, 10944, 1024, 0, 10960, 1024, 0, 10976, 1024, 0, 15120, 5698, 0, 15120, 5698, 0, 15120, 5698, 0, 15120, 5698, 0, 15120, 5698, 0, 15136, 5698, 0, 15136, 5698, 0, 15136, 5698, 0, 15136, 5698, 0, 15136, 5698, 0, 15152, 5698, 0, 15152, 5698, 0, 15152, 5698, 0, 15152, 5698, 0, 15152, 5698, 0, 15760, 15, 0, 15760, 15, 0, 15760, 15, 0, 15760, 15, 0, 15776, 15, 0, 15776, 15, 0, 15776, 15, 0, 15776, 15, 0, 15792, 15, 0, 15792, 15, 0, 15792, 15, 0, 15792, 15, 0, 16400, 85, 0, 16400, 85, 0, 16400, 85, 0, 16400, 85, 0, 16416, 85, 0, 16416, 85, 0, 16416, 85, 0, 16416, 85, 0, 16432, 85, 0, 16432, 85, 0, 16432, 85, 0, 16432, 85, 0, 16976, 85, 0, 16976, 85, 0, 16976, 85, 0, 16976, 85, 0, 16992, 85, 0, 16992, 85, 0, 16992, 85, 0, 16992, 85, 0, 17008, 85, 0, 17008, 85, 0, 17008, 85, 0, 17008, 85, 0, 17552, 7, 0, 17552, 7, 0, 17552, 7, 0, 17568, 7, 0, 17568, 7, 0, 17568, 7, 0, 17584, 7, 0, 17584, 7, 0, 17584, 7, 0, 18256, 57344, 0, 18256, 57344, 0, 18256, 57344, 0, 18272, 57344, 0, 18272, 57344, 0, 18272, 57344, 0, 18288, 57344, 0, 18288, 57344, 0, 18288, 57344, 0, 19156, 16384, 0, 19172, 16384, 0, 19188, 16384, 0, 20048, 32768, 0, 20064, 32768, 0, 20080, 32768, 0, 21008, 36992, 0, 21008, 36992, 0, 21008, 36992, 0, 21024, 36992, 0, 21024, 36992, 0, 21024, 36992, 0, 21040, 36992, 0, 21040, 36992, 0, 21040, 36992, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
