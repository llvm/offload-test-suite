#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 15))) {
    if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 3))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (37 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((58 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((67 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (76 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 3))) {
      result = (result + WaveActiveMax(5));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (91 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 10))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (104 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 11))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((125 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 12))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((158 << 6) | (i1 << 4)) | (i2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        continue;
      }
    }
  }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() == 7)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((181 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 0))) {
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 15))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((211 << 6) | (i3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((221 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((230 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 15))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((241 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 3)) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((248 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 372
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2368, 16384, 0, 4304, 33408, 0, 4304, 33408, 0, 4304, 33408, 0, 4320, 33408, 0, 4320, 33408, 0, 4320, 33408, 0, 4864, 33408, 0, 4864, 33408, 0, 4864, 33408, 0, 6656, 15363, 0, 6656, 15363, 0, 6656, 15363, 0, 6656, 15363, 0, 6656, 15363, 0, 6656, 15363, 0, 8000, 14339, 0, 8000, 14339, 0, 8000, 14339, 0, 8000, 14339, 0, 8000, 14339, 0, 8016, 14339, 0, 8016, 14339, 0, 8016, 14339, 0, 8016, 14339, 0, 8016, 14339, 0, 10112, 6216, 0, 10112, 6216, 0, 10112, 6216, 0, 10112, 6216, 0, 10116, 6216, 0, 10116, 6216, 0, 10116, 6216, 0, 10116, 6216, 0, 10120, 6216, 0, 10120, 6216, 0, 10120, 6216, 0, 10120, 6216, 0, 10128, 6216, 0, 10128, 6216, 0, 10128, 6216, 0, 10128, 6216, 0, 10132, 6216, 0, 10132, 6216, 0, 10132, 6216, 0, 10132, 6216, 0, 10136, 6216, 0, 10136, 6216, 0, 10136, 6216, 0, 10136, 6216, 0, 13504, 1, 0, 13508, 1, 0, 13512, 1, 0, 13520, 1, 0, 13524, 1, 0, 13528, 1, 0, 14144, 84, 0, 14144, 84, 0, 14144, 84, 0, 14160, 84, 0, 14160, 84, 0, 14160, 84, 0, 2368, 16384, 0, 4304, 33408, 0, 4304, 33408, 0, 4304, 33408, 0, 4320, 33408, 0, 4320, 33408, 0, 4320, 33408, 0, 4864, 33408, 0, 4864, 33408, 0, 4864, 33408, 0, 6656, 15363, 0, 6656, 15363, 0, 6656, 15363, 0, 6656, 15363, 0, 6656, 15363, 0, 6656, 15363, 0, 8000, 14339, 0, 8000, 14339, 0, 8000, 14339, 0, 8000, 14339, 0, 8000, 14339, 0, 8016, 14339, 0, 8016, 14339, 0, 8016, 14339, 0, 8016, 14339, 0, 8016, 14339, 0, 10112, 6216, 0, 10112, 6216, 0, 10112, 6216, 0, 10112, 6216, 0, 10116, 6216, 0, 10116, 6216, 0, 10116, 6216, 0, 10116, 6216, 0, 10120, 6216, 0, 10120, 6216, 0, 10120, 6216, 0, 10120, 6216, 0, 10128, 6216, 0, 10128, 6216, 0, 10128, 6216, 0, 10128, 6216, 0, 10132, 6216, 0, 10132, 6216, 0, 10132, 6216, 0, 10132, 6216, 0, 10136, 6216, 0, 10136, 6216, 0, 10136, 6216, 0, 10136, 6216, 0, 13504, 1, 0, 13508, 1, 0, 13512, 1, 0, 13520, 1, 0, 13524, 1, 0, 13528, 1, 0, 14144, 84, 0, 14144, 84, 0, 14144, 84, 0, 14160, 84, 0, 14160, 84, 0, 14160, 84, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
