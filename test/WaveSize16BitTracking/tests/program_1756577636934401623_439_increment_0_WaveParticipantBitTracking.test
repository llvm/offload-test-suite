#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 7))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (58 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 7)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (54 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 15)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (50 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 15))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (46 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 12))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (40 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if ((WaveGetLaneIndex() < 3)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((80 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if ((WaveGetLaneIndex() < 4)) {
          if ((WaveGetLaneIndex() < 2)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((95 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveMax(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((102 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((WaveGetLaneIndex() < 1)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((109 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 426
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3712, 16513, 0, 3712, 16513, 0, 3712, 16513, 0, 3200, 32768, 0, 2944, 8, 0, 2560, 12290, 0, 2560, 12290, 0, 2560, 12290, 0, 5136, 7, 0, 5136, 7, 0, 5136, 7, 0, 5140, 7, 0, 5140, 7, 0, 5140, 7, 0, 5144, 7, 0, 5144, 7, 0, 5144, 7, 0, 5152, 7, 0, 5152, 7, 0, 5152, 7, 0, 5156, 7, 0, 5156, 7, 0, 5156, 7, 0, 5160, 7, 0, 5160, 7, 0, 5160, 7, 0, 5168, 7, 0, 5168, 7, 0, 5168, 7, 0, 5172, 7, 0, 5172, 7, 0, 5172, 7, 0, 5176, 7, 0, 5176, 7, 0, 5176, 7, 0, 6096, 2, 0, 6100, 2, 0, 6104, 2, 0, 6112, 2, 0, 6116, 2, 0, 6120, 2, 0, 6128, 2, 0, 6132, 2, 0, 6136, 2, 0, 6544, 10, 0, 6544, 10, 0, 6548, 10, 0, 6548, 10, 0, 6552, 10, 0, 6552, 10, 0, 6560, 10, 0, 6560, 10, 0, 6564, 10, 0, 6564, 10, 0, 6568, 10, 0, 6568, 10, 0, 6576, 10, 0, 6576, 10, 0, 6580, 10, 0, 6580, 10, 0, 6584, 10, 0, 6584, 10, 0, 6992, 1, 0, 6996, 1, 0, 7000, 1, 0, 7008, 1, 0, 7012, 1, 0, 7016, 1, 0, 7024, 1, 0, 7028, 1, 0, 7032, 1, 0, 3712, 16513, 0, 3712, 16513, 0, 3712, 16513, 0, 3200, 32768, 0, 2944, 8, 0, 2560, 12290, 0, 2560, 12290, 0, 2560, 12290, 0, 5136, 7, 0, 5136, 7, 0, 5136, 7, 0, 5140, 7, 0, 5140, 7, 0, 5140, 7, 0, 5144, 7, 0, 5144, 7, 0, 5144, 7, 0, 5152, 7, 0, 5152, 7, 0, 5152, 7, 0, 5156, 7, 0, 5156, 7, 0, 5156, 7, 0, 5160, 7, 0, 5160, 7, 0, 5160, 7, 0, 5168, 7, 0, 5168, 7, 0, 5168, 7, 0, 5172, 7, 0, 5172, 7, 0, 5172, 7, 0, 5176, 7, 0, 5176, 7, 0, 5176, 7, 0, 6096, 2, 0, 6100, 2, 0, 6104, 2, 0, 6112, 2, 0, 6116, 2, 0, 6120, 2, 0, 6128, 2, 0, 6132, 2, 0, 6136, 2, 0, 6544, 10, 0, 6544, 10, 0, 6548, 10, 0, 6548, 10, 0, 6552, 10, 0, 6552, 10, 0, 6560, 10, 0, 6560, 10, 0, 6564, 10, 0, 6564, 10, 0, 6568, 10, 0, 6568, 10, 0, 6576, 10, 0, 6576, 10, 0, 6580, 10, 0, 6580, 10, 0, 6584, 10, 0, 6584, 10, 0, 6992, 1, 0, 6996, 1, 0, 7000, 1, 0, 7008, 1, 0, 7012, 1, 0, 7016, 1, 0, 7024, 1, 0, 7028, 1, 0, 7032, 1, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
