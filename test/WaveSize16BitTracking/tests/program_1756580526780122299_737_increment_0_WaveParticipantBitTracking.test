#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 12))) {
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 12))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 15))) {
      result = (result + WaveActiveMin(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (28 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (38 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((65 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((79 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 9)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((86 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (91 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 276
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 61443, 0, 1088, 61443, 0, 1088, 61443, 0, 1088, 61443, 0, 1088, 61443, 0, 1088, 61443, 0, 1792, 32771, 0, 1792, 32771, 0, 1792, 32771, 0, 2432, 73, 0, 2432, 73, 0, 2432, 73, 0, 4160, 8193, 0, 4160, 8193, 0, 4176, 8193, 0, 4176, 8193, 0, 4192, 8193, 0, 4192, 8193, 0, 5060, 1, 0, 5064, 1, 0, 5076, 1, 0, 5080, 1, 0, 5092, 1, 0, 5096, 1, 0, 5508, 512, 0, 5512, 512, 0, 5524, 512, 0, 5528, 512, 0, 5540, 512, 0, 5544, 512, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 1088, 61443, 0, 1088, 61443, 0, 1088, 61443, 0, 1088, 61443, 0, 1088, 61443, 0, 1088, 61443, 0, 1792, 32771, 0, 1792, 32771, 0, 1792, 32771, 0, 2432, 73, 0, 2432, 73, 0, 2432, 73, 0, 4160, 8193, 0, 4160, 8193, 0, 4176, 8193, 0, 4176, 8193, 0, 4192, 8193, 0, 4192, 8193, 0, 5060, 1, 0, 5064, 1, 0, 5076, 1, 0, 5080, 1, 0, 5092, 1, 0, 5096, 1, 0, 5508, 512, 0, 5512, 512, 0, 5524, 512, 0, 5528, 512, 0, 5540, 512, 0, 5544, 512, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0, 5824, 65535, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
