#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 14))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((20 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12))) {
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((50 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveSum(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((65 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 2))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((84 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 10))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((99 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (108 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (113 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 11))) {
        if ((WaveGetLaneIndex() == 8)) {
          if ((WaveGetLaneIndex() == 4)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (141 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 6)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (148 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 4))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (165 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (174 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 10))) {
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 14))) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (192 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() < 4)) {
            result = (result + WaveActiveMax(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((206 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (210 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 10))) {
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 1))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (247 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 14))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((266 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter3 = 0;
          while ((counter3 < 3)) {
            counter3 = (counter3 + 1);
            if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 12))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((288 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((i2 == 1)) {
            break;
          }
        }
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 4))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (314 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((338 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((355 << 6) | (i4 << 4)) | (i5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((366 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (370 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 588
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1296, 32769, 0, 1296, 32769, 0, 1312, 32769, 0, 1312, 32769, 0, 6352, 8, 0, 6368, 8, 0, 6912, 1040, 0, 6912, 1040, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 11136, 1040, 0, 11136, 1040, 0, 12288, 16384, 0, 13200, 4, 0, 13216, 4, 0, 13232, 4, 0, 15808, 1024, 0, 17024, 1, 0, 17040, 1, 0, 18436, 4096, 0, 18440, 4096, 0, 18444, 4096, 0, 18452, 4096, 0, 18456, 4096, 0, 18460, 4096, 0, 20096, 1, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 1296, 32769, 0, 1296, 32769, 0, 1312, 32769, 0, 1312, 32769, 0, 6352, 8, 0, 6368, 8, 0, 6912, 1040, 0, 6912, 1040, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 7232, 28086, 0, 11136, 1040, 0, 11136, 1040, 0, 12288, 16384, 0, 13200, 4, 0, 13216, 4, 0, 13232, 4, 0, 15808, 1024, 0, 17024, 1, 0, 17040, 1, 0, 18436, 4096, 0, 18440, 4096, 0, 18444, 4096, 0, 18452, 4096, 0, 18456, 4096, 0, 18460, 4096, 0, 20096, 1, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21632, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 21648, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22720, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22724, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22728, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22736, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22740, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0, 22744, 43690, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
