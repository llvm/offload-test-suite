#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() == 14)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((37 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 8))) {
          if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 9))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((71 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((91 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 10)) {
          if ((WaveGetLaneIndex() == 0)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((103 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 13))) {
          result = (result + WaveActiveMin(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((114 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 13))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((125 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  case 1: {
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if ((WaveGetLaneIndex() >= 11)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((140 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 5)) {
        if ((WaveGetLaneIndex() == 7)) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((150 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 4)) {
          result = (result + WaveActiveMax(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((157 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 1)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((166 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 2)) {
        break;
      }
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (174 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 14))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (212 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 12))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (206 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 450
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1152, 4369, 0, 1152, 4369, 0, 1152, 4369, 0, 1152, 4369, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 2384, 16384, 0, 2400, 16384, 0, 2416, 16384, 0, 4560, 512, 0, 4576, 512, 0, 4592, 512, 0, 5824, 4161, 0, 5824, 4161, 0, 5824, 4161, 0, 5840, 4161, 0, 5840, 4161, 0, 5840, 4161, 0, 7296, 32769, 0, 7296, 32769, 0, 7312, 32769, 0, 7312, 32769, 0, 8000, 32769, 0, 8000, 32769, 0, 8016, 32769, 0, 8016, 32769, 0, 8960, 45056, 0, 8960, 45056, 0, 8960, 45056, 0, 8976, 45056, 0, 8976, 45056, 0, 8976, 45056, 0, 8992, 45056, 0, 8992, 45056, 0, 8992, 45056, 0, 10624, 1, 0, 10640, 1, 0, 10656, 1, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 13568, 16680, 0, 13568, 16680, 0, 13568, 16680, 0, 13568, 16680, 0, 13184, 45059, 0, 13184, 45059, 0, 13184, 45059, 0, 13184, 45059, 0, 13184, 45059, 0, 576, 17, 0, 576, 17, 0, 1152, 4369, 0, 1152, 4369, 0, 1152, 4369, 0, 1152, 4369, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 1472, 30583, 0, 2384, 16384, 0, 2400, 16384, 0, 2416, 16384, 0, 4560, 512, 0, 4576, 512, 0, 4592, 512, 0, 5824, 4161, 0, 5824, 4161, 0, 5824, 4161, 0, 5840, 4161, 0, 5840, 4161, 0, 5840, 4161, 0, 7296, 32769, 0, 7296, 32769, 0, 7312, 32769, 0, 7312, 32769, 0, 8000, 32769, 0, 8000, 32769, 0, 8016, 32769, 0, 8016, 32769, 0, 8960, 45056, 0, 8960, 45056, 0, 8960, 45056, 0, 8976, 45056, 0, 8976, 45056, 0, 8976, 45056, 0, 8992, 45056, 0, 8992, 45056, 0, 8992, 45056, 0, 10624, 1, 0, 10640, 1, 0, 10656, 1, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 11136, 65535, 0, 13568, 16680, 0, 13568, 16680, 0, 13568, 16680, 0, 13568, 16680, 0, 13184, 45059, 0, 13184, 45059, 0, 13184, 45059, 0, 13184, 45059, 0, 13184, 45059, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
