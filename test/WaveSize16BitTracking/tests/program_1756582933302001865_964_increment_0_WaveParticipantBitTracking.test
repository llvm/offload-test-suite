#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 3)) {
    if ((WaveGetLaneIndex() < 3)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 10))) {
          if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 11))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (38 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (53 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (62 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    if ((WaveGetLaneIndex() < 2)) {
      result = (result + WaveActiveMax(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (69 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 14))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((91 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 13))) {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() < 7)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((117 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 2)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((126 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 1)) {
          break;
        }
      }
    } else {
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((151 << 6) | (counter0 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((160 << 6) | (counter0 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i2 == 1)) {
        continue;
      }
      if ((i2 == 2)) {
        break;
      }
    }
    if ((WaveGetLaneIndex() == 3)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((173 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
    if (((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 12))) {
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 12))) {
        result = (result + WaveActiveMax(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((207 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((224 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((241 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((250 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((254 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((263 << 6) | (i3 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if ((i3 == 1)) {
    continue;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 414
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 7, 0, 576, 7, 0, 576, 7, 0, 3392, 1, 0, 4416, 3, 0, 4416, 3, 0, 5840, 16904, 0, 5840, 16904, 0, 5840, 16904, 0, 5856, 16904, 0, 5856, 16904, 0, 5856, 16904, 0, 5872, 16904, 0, 5872, 16904, 0, 5872, 16904, 0, 7504, 2, 0, 7508, 2, 0, 7520, 2, 0, 7524, 2, 0, 7536, 2, 0, 7540, 2, 0, 8080, 2, 0, 8084, 2, 0, 8096, 2, 0, 8100, 2, 0, 8112, 2, 0, 8116, 2, 0, 11088, 8, 0, 11104, 8, 0, 11120, 8, 0, 13248, 4096, 0, 13264, 4096, 0, 13280, 4096, 0, 14336, 4100, 0, 14336, 4100, 0, 14352, 4100, 0, 14352, 4100, 0, 14368, 4100, 0, 14368, 4100, 0, 16000, 4100, 0, 16000, 4100, 0, 16016, 4100, 0, 16016, 4100, 0, 16032, 4100, 0, 16032, 4100, 0, 16832, 17745, 0, 16832, 17745, 0, 16832, 17745, 0, 16832, 17745, 0, 16832, 17745, 0, 16832, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16832, 4100, 0, 16832, 4100, 0, 16848, 4100, 0, 16848, 4100, 0, 16864, 4100, 0, 16864, 4100, 0, 576, 7, 0, 576, 7, 0, 576, 7, 0, 3392, 1, 0, 4416, 3, 0, 4416, 3, 0, 5840, 16904, 0, 5840, 16904, 0, 5840, 16904, 0, 5856, 16904, 0, 5856, 16904, 0, 5856, 16904, 0, 5872, 16904, 0, 5872, 16904, 0, 5872, 16904, 0, 7504, 2, 0, 7508, 2, 0, 7520, 2, 0, 7524, 2, 0, 7536, 2, 0, 7540, 2, 0, 8080, 2, 0, 8084, 2, 0, 8096, 2, 0, 8100, 2, 0, 8112, 2, 0, 8116, 2, 0, 11088, 8, 0, 11104, 8, 0, 11120, 8, 0, 13248, 4096, 0, 13264, 4096, 0, 13280, 4096, 0, 14336, 4100, 0, 14336, 4100, 0, 14352, 4100, 0, 14352, 4100, 0, 14368, 4100, 0, 14368, 4100, 0, 16000, 4100, 0, 16000, 4100, 0, 16016, 4100, 0, 16016, 4100, 0, 16032, 4100, 0, 16032, 4100, 0, 16832, 17745, 0, 16832, 17745, 0, 16832, 17745, 0, 16832, 17745, 0, 16832, 17745, 0, 16832, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16848, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16864, 17745, 0, 16832, 4100, 0, 16832, 4100, 0, 16848, 4100, 0, 16848, 4100, 0, 16864, 4100, 0, 16864, 4100, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
