#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 7))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((27 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 15))) {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 14))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((47 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 13))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((58 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 10))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((73 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (85 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if ((WaveGetLaneIndex() < 1)) {
    if ((WaveGetLaneIndex() < 8)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (95 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 13))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((125 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 11))) {
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 13))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((143 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 3)) {
          counter2 = (counter2 + 1);
          if ((WaveGetLaneIndex() >= 15)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((159 << 6) | (counter1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter2 == 2)) {
            break;
          }
        }
      }
      if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 10))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((187 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter1 == 1)) {
        break;
      }
    }
    if ((WaveGetLaneIndex() >= 13)) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (197 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 5))) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (216 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
    if ((WaveGetLaneIndex() == 14)) {
      result = (result + WaveActiveSum(1));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((231 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((245 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((261 << 6) | (i3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((270 << 6) | (i3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if ((WaveGetLaneIndex() == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((277 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i3 == 1)) {
      continue;
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 636
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [13824, 1316, 0, 13824, 1316, 0, 13824, 1316, 0, 13824, 1316, 0, 14784, 16384, 0, 14800, 16384, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17728, 2, 0, 17744, 2, 0, 3008, 1, 0, 3024, 1, 0, 3712, 1, 0, 3728, 1, 0, 4672, 1088, 0, 4672, 1088, 0, 4688, 1088, 0, 4688, 1088, 0, 6080, 1, 0, 9168, 1, 0, 1728, 320, 0, 1728, 320, 0, 1744, 320, 0, 1744, 320, 0, 13824, 1316, 0, 13824, 1316, 0, 13824, 1316, 0, 13824, 1316, 0, 14784, 16384, 0, 14800, 16384, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16708, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16712, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16716, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16724, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16728, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 16732, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17284, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17288, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17292, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17300, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17304, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17308, 21844, 0, 17728, 2, 0, 17744, 2, 0, 3008, 1, 0, 3024, 1, 0, 3712, 1, 0, 3728, 1, 0, 4672, 1088, 0, 4672, 1088, 0, 4688, 1088, 0, 4688, 1088, 0, 6080, 1, 0, 9168, 1, 0, 1728, 320, 0, 1728, 320, 0, 1744, 320, 0, 1744, 320, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
