#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((26 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 10))) {
          if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 13))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((56 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((65 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (70 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 13))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((104 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((121 << 6) | (i1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((130 << 6) | (i1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 6))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((149 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 1)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() < 7)) {
        for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((172 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if ((WaveGetLaneIndex() < 4)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((186 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 2)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((193 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 6))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (216 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (221 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 612
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1664, 41610, 0, 1664, 41610, 0, 1664, 41610, 0, 1664, 41610, 0, 1664, 41610, 0, 1664, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 3584, 1088, 0, 3584, 1088, 0, 3600, 1088, 0, 3600, 1088, 0, 3616, 1088, 0, 3616, 1088, 0, 4160, 41610, 0, 4160, 41610, 0, 4160, 41610, 0, 4160, 41610, 0, 4160, 41610, 0, 4160, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4480, 18724, 0, 4480, 18724, 0, 4480, 18724, 0, 4480, 18724, 0, 4480, 18724, 0, 6656, 4096, 0, 6672, 4096, 0, 7744, 4161, 0, 7744, 4161, 0, 7744, 4161, 0, 7748, 4161, 0, 7748, 4161, 0, 7748, 4161, 0, 7752, 4161, 0, 7752, 4161, 0, 7752, 4161, 0, 7760, 4161, 0, 7760, 4161, 0, 7760, 4161, 0, 7764, 4161, 0, 7764, 4161, 0, 7764, 4161, 0, 7768, 4161, 0, 7768, 4161, 0, 7768, 4161, 0, 8320, 4161, 0, 8320, 4161, 0, 8320, 4161, 0, 8324, 4161, 0, 8324, 4161, 0, 8324, 4161, 0, 8328, 4161, 0, 8328, 4161, 0, 8328, 4161, 0, 8336, 4161, 0, 8336, 4161, 0, 8336, 4161, 0, 8340, 4161, 0, 8340, 4161, 0, 8340, 4161, 0, 8344, 4161, 0, 8344, 4161, 0, 8344, 4161, 0, 9536, 64, 0, 9552, 64, 0, 11008, 16, 0, 11024, 16, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 1664, 41610, 0, 1664, 41610, 0, 1664, 41610, 0, 1664, 41610, 0, 1664, 41610, 0, 1664, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1680, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 1696, 41610, 0, 3584, 1088, 0, 3584, 1088, 0, 3600, 1088, 0, 3600, 1088, 0, 3616, 1088, 0, 3616, 1088, 0, 4160, 41610, 0, 4160, 41610, 0, 4160, 41610, 0, 4160, 41610, 0, 4160, 41610, 0, 4160, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4176, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4192, 41610, 0, 4480, 18724, 0, 4480, 18724, 0, 4480, 18724, 0, 4480, 18724, 0, 4480, 18724, 0, 6656, 4096, 0, 6672, 4096, 0, 7744, 4161, 0, 7744, 4161, 0, 7744, 4161, 0, 7748, 4161, 0, 7748, 4161, 0, 7748, 4161, 0, 7752, 4161, 0, 7752, 4161, 0, 7752, 4161, 0, 7760, 4161, 0, 7760, 4161, 0, 7760, 4161, 0, 7764, 4161, 0, 7764, 4161, 0, 7764, 4161, 0, 7768, 4161, 0, 7768, 4161, 0, 7768, 4161, 0, 8320, 4161, 0, 8320, 4161, 0, 8320, 4161, 0, 8324, 4161, 0, 8324, 4161, 0, 8324, 4161, 0, 8328, 4161, 0, 8328, 4161, 0, 8328, 4161, 0, 8336, 4161, 0, 8336, 4161, 0, 8336, 4161, 0, 8340, 4161, 0, 8340, 4161, 0, 8340, 4161, 0, 8344, 4161, 0, 8344, 4161, 0, 8344, 4161, 0, 9536, 64, 0, 9552, 64, 0, 11008, 16, 0, 11024, 16, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0, 14144, 28086, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
