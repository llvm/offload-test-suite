#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() < 8)) {
          if ((WaveGetLaneIndex() < 2)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((27 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 0))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((50 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 1))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((75 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (80 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 14))) {
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((116 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i1 == 1)) {
        break;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (123 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  uint counter2 = 0;
  while ((counter2 < 2)) {
    counter2 = (counter2 + 1);
    if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 8))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((149 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() >= 9)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((164 << 6) | (counter2 << 4)) | (i3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() >= 15)) {
        if ((WaveGetLaneIndex() >= 10)) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((174 << 6) | (counter2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 3)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((181 << 6) | (counter2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i3 == 1)) {
        continue;
      }
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((214 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 12)) {
          if ((WaveGetLaneIndex() < 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((224 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
  case 1: {
      for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 14))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((245 << 6) | (i5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter6 = 0;
        while ((counter6 < 2)) {
          counter6 = (counter6 + 1);
          if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 3))) {
            result = (result + WaveActiveMin(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((267 << 6) | (i5 << 4)) | (counter6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter6 == 1)) {
            break;
          }
        }
      }
      break;
    }
  case 2: {
      uint counter7 = 0;
      while ((counter7 < 3)) {
        counter7 = (counter7 + 1);
        for (uint i8 = 0; (i8 < 3); i8 = (i8 + 1)) {
          if ((WaveGetLaneIndex() < 7)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((292 << 6) | (counter7 << 4)) | (i8 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i8 == 1)) {
            continue;
          }
          if ((i8 == 2)) {
            break;
          }
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (305 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 552
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1728, 2, 0, 1744, 2, 0, 5120, 17476, 0, 5120, 17476, 0, 5120, 17476, 0, 5120, 17476, 0, 9552, 4400, 0, 9552, 4400, 0, 9552, 4400, 0, 9552, 4400, 0, 9568, 4400, 0, 9568, 4400, 0, 9568, 4400, 0, 9568, 4400, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 11152, 32768, 0, 11156, 32768, 0, 11160, 32768, 0, 11168, 32768, 0, 11172, 32768, 0, 11176, 32768, 0, 15680, 3, 0, 15680, 3, 0, 15696, 3, 0, 15696, 3, 0, 15712, 3, 0, 15712, 3, 0, 18704, 68, 0, 18704, 68, 0, 18708, 68, 0, 18708, 68, 0, 18712, 68, 0, 18712, 68, 0, 18720, 68, 0, 18720, 68, 0, 18724, 68, 0, 18724, 68, 0, 18728, 68, 0, 18728, 68, 0, 18736, 68, 0, 18736, 68, 0, 18740, 68, 0, 18740, 68, 0, 18744, 68, 0, 18744, 68, 0, 19520, 34952, 0, 19520, 34952, 0, 19520, 34952, 0, 19520, 34952, 0, 576, 17, 0, 576, 17, 0, 1728, 2, 0, 1744, 2, 0, 5120, 17476, 0, 5120, 17476, 0, 5120, 17476, 0, 5120, 17476, 0, 9552, 4400, 0, 9552, 4400, 0, 9552, 4400, 0, 9552, 4400, 0, 9568, 4400, 0, 9568, 4400, 0, 9568, 4400, 0, 9568, 4400, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10512, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10516, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10520, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10528, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10532, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 10536, 65024, 0, 11152, 32768, 0, 11156, 32768, 0, 11160, 32768, 0, 11168, 32768, 0, 11172, 32768, 0, 11176, 32768, 0, 15680, 3, 0, 15680, 3, 0, 15696, 3, 0, 15696, 3, 0, 15712, 3, 0, 15712, 3, 0, 18704, 68, 0, 18704, 68, 0, 18708, 68, 0, 18708, 68, 0, 18712, 68, 0, 18712, 68, 0, 18720, 68, 0, 18720, 68, 0, 18724, 68, 0, 18724, 68, 0, 18728, 68, 0, 18728, 68, 0, 18736, 68, 0, 18736, 68, 0, 18740, 68, 0, 18740, 68, 0, 18744, 68, 0, 18744, 68, 0, 19520, 34952, 0, 19520, 34952, 0, 19520, 34952, 0, 19520, 34952, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
