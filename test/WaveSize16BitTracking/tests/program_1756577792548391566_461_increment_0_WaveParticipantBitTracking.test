#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if ((WaveGetLaneIndex() == 15)) {
        if ((WaveGetLaneIndex() == 12)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (30 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (40 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (49 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (54 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if ((WaveGetLaneIndex() == 7)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (61 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (68 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (72 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 11))) {
          if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((101 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 15))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((120 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 4))) {
          result = (result + WaveActiveMin(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((135 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 12))) {
          result = (result + WaveActiveMin(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((153 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 12))) {
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 13))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((171 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 15))) {
            result = (result + WaveActiveMin(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((182 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((193 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((208 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 11))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((221 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (231 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        uint counter3 = 0;
        while ((counter3 < 3)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((255 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((264 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((273 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (277 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 954
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 4352, 34952, 0, 4352, 34952, 0, 4352, 34952, 0, 4352, 34952, 0, 8640, 273, 0, 8640, 273, 0, 8640, 273, 0, 8656, 273, 0, 8656, 273, 0, 8656, 273, 0, 8672, 273, 0, 8672, 273, 0, 8672, 273, 0, 9808, 40962, 0, 9808, 40962, 0, 9808, 40962, 0, 9824, 40962, 0, 9824, 40962, 0, 9824, 40962, 0, 10960, 40960, 0, 10960, 40960, 0, 10976, 40960, 0, 10976, 40960, 0, 11664, 32778, 0, 11664, 32778, 0, 11664, 32778, 0, 11680, 32778, 0, 11680, 32778, 0, 11680, 32778, 0, 12368, 32, 0, 12384, 32, 0, 14160, 43018, 0, 14160, 43018, 0, 14160, 43018, 0, 14160, 43018, 0, 14160, 43018, 0, 14176, 43018, 0, 14176, 43018, 0, 14176, 43018, 0, 14176, 43018, 0, 14176, 43018, 0, 14784, 85, 0, 14784, 85, 0, 14784, 85, 0, 14784, 85, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 576, 17, 0, 576, 17, 0, 4352, 34952, 0, 4352, 34952, 0, 4352, 34952, 0, 4352, 34952, 0, 8640, 273, 0, 8640, 273, 0, 8640, 273, 0, 8656, 273, 0, 8656, 273, 0, 8656, 273, 0, 8672, 273, 0, 8672, 273, 0, 8672, 273, 0, 9808, 40962, 0, 9808, 40962, 0, 9808, 40962, 0, 9824, 40962, 0, 9824, 40962, 0, 9824, 40962, 0, 10960, 40960, 0, 10960, 40960, 0, 10976, 40960, 0, 10976, 40960, 0, 11664, 32778, 0, 11664, 32778, 0, 11664, 32778, 0, 11680, 32778, 0, 11680, 32778, 0, 11680, 32778, 0, 12368, 32, 0, 12384, 32, 0, 14160, 43018, 0, 14160, 43018, 0, 14160, 43018, 0, 14160, 43018, 0, 14160, 43018, 0, 14176, 43018, 0, 14176, 43018, 0, 14176, 43018, 0, 14176, 43018, 0, 14176, 43018, 0, 14784, 85, 0, 14784, 85, 0, 14784, 85, 0, 14784, 85, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16324, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16328, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16332, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16340, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16344, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16348, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16900, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16904, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16908, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16916, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16920, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 16924, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17472, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0, 17488, 43690, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
