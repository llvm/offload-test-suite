#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (13 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (23 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (33 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (42 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (47 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (52 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (56 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (65 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 12))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (82 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((101 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 11))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((122 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 13))) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 10))) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((140 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((149 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((160 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 13))) {
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 11))) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (178 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (188 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    case 1: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
              if ((WaveGetLaneIndex() >= 13)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((206 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 13))) {
              if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 11))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (224 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            if ((WaveGetLaneIndex() == 15)) {
              if ((WaveGetLaneIndex() == 9)) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (234 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() == 4)) {
                result = (result + WaveActiveSum(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (241 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    case 2: {
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 6))) {
            result = (result + WaveActiveSum(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((272 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 1)) {
            if ((WaveGetLaneIndex() < 2)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((284 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((293 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((302 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 11))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((325 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (332 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (336 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 12))) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (347 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax(10));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (356 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((373 << 6) | (i4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter5 = 0;
    while ((counter5 < 2)) {
      counter5 = (counter5 + 1);
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 10))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((391 << 6) | (i4 << 4)) | (counter5 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 0))) {
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 1))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((423 << 6) | (i4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 13))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((434 << 6) | (i4 << 4)) | (counter5 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (443 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 708
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 1472, 8, 0, 3328, 2080, 0, 3328, 2080, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 5248, 4112, 0, 5248, 4112, 0, 8960, 16389, 0, 8960, 16389, 0, 8960, 16389, 0, 8964, 16389, 0, 8964, 16389, 0, 8964, 16389, 0, 8976, 16389, 0, 8976, 16389, 0, 8976, 16389, 0, 8980, 16389, 0, 8980, 16389, 0, 8980, 16389, 0, 9536, 5440, 0, 9536, 5440, 0, 9536, 5440, 0, 9536, 5440, 0, 9540, 5440, 0, 9540, 5440, 0, 9540, 5440, 0, 9540, 5440, 0, 9552, 5440, 0, 9552, 5440, 0, 9552, 5440, 0, 9552, 5440, 0, 9556, 5440, 0, 9556, 5440, 0, 9556, 5440, 0, 9556, 5440, 0, 11392, 57345, 0, 11392, 57345, 0, 11392, 57345, 0, 11392, 57345, 0, 12032, 1, 0, 14336, 8192, 0, 17408, 16384, 0, 17424, 16384, 0, 17440, 16384, 0, 19328, 16384, 0, 19344, 16384, 0, 19360, 16384, 0, 21248, 32768, 0, 22208, 57345, 0, 22208, 57345, 0, 22208, 57345, 0, 22208, 57345, 0, 22784, 5460, 0, 22784, 5460, 0, 22784, 5460, 0, 22784, 5460, 0, 22784, 5460, 0, 22784, 5460, 0, 23872, 2730, 0, 23872, 2730, 0, 23872, 2730, 0, 23872, 2730, 0, 23872, 2730, 0, 23872, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 25028, 7182, 0, 25028, 7182, 0, 25028, 7182, 0, 25028, 7182, 0, 25028, 7182, 0, 25028, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 27076, 4, 0, 27080, 4, 0, 27092, 4, 0, 27096, 4, 0, 28352, 2730, 0, 28352, 2730, 0, 28352, 2730, 0, 28352, 2730, 0, 28352, 2730, 0, 28352, 2730, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 1472, 8, 0, 3328, 2080, 0, 3328, 2080, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 4160, 43690, 0, 5248, 4112, 0, 5248, 4112, 0, 8960, 16389, 0, 8960, 16389, 0, 8960, 16389, 0, 8964, 16389, 0, 8964, 16389, 0, 8964, 16389, 0, 8976, 16389, 0, 8976, 16389, 0, 8976, 16389, 0, 8980, 16389, 0, 8980, 16389, 0, 8980, 16389, 0, 9536, 5440, 0, 9536, 5440, 0, 9536, 5440, 0, 9536, 5440, 0, 9540, 5440, 0, 9540, 5440, 0, 9540, 5440, 0, 9540, 5440, 0, 9552, 5440, 0, 9552, 5440, 0, 9552, 5440, 0, 9552, 5440, 0, 9556, 5440, 0, 9556, 5440, 0, 9556, 5440, 0, 9556, 5440, 0, 11392, 57345, 0, 11392, 57345, 0, 11392, 57345, 0, 11392, 57345, 0, 12032, 1, 0, 14336, 8192, 0, 17408, 16384, 0, 17424, 16384, 0, 17440, 16384, 0, 19328, 16384, 0, 19344, 16384, 0, 19360, 16384, 0, 21248, 32768, 0, 22208, 57345, 0, 22208, 57345, 0, 22208, 57345, 0, 22208, 57345, 0, 22784, 5460, 0, 22784, 5460, 0, 22784, 5460, 0, 22784, 5460, 0, 22784, 5460, 0, 22784, 5460, 0, 23872, 2730, 0, 23872, 2730, 0, 23872, 2730, 0, 23872, 2730, 0, 23872, 2730, 0, 23872, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 23888, 2730, 0, 25028, 7182, 0, 25028, 7182, 0, 25028, 7182, 0, 25028, 7182, 0, 25028, 7182, 0, 25028, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25032, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25044, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 25048, 7182, 0, 27076, 4, 0, 27080, 4, 0, 27092, 4, 0, 27096, 4, 0, 28352, 2730, 0, 28352, 2730, 0, 28352, 2730, 0, 28352, 2730, 0, 28352, 2730, 0, 28352, 2730, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
