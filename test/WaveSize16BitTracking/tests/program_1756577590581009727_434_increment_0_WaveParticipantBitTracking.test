#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 13))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((34 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 14))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((55 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 4)) {
            if ((WaveGetLaneIndex() < 5)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((65 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 2))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((86 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((i0 == 2)) {
        break;
      }
    }
    break;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (103 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 6)) {
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (116 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 1: {
          if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 10))) {
            if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 15))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (146 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 13))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (157 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (161 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if ((WaveGetLaneIndex() < 4)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (168 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 360
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 2176, 8322, 0, 2176, 8322, 0, 2176, 8322, 0, 2192, 8322, 0, 2192, 8322, 0, 2192, 8322, 0, 2208, 8322, 0, 2208, 8322, 0, 2208, 8322, 0, 3520, 32778, 0, 3520, 32778, 0, 3520, 32778, 0, 3524, 32778, 0, 3524, 32778, 0, 3524, 32778, 0, 3536, 32778, 0, 3536, 32778, 0, 3536, 32778, 0, 3540, 32778, 0, 3540, 32778, 0, 3540, 32778, 0, 3552, 32778, 0, 3552, 32778, 0, 3552, 32778, 0, 3556, 32778, 0, 3556, 32778, 0, 3556, 32778, 0, 4160, 10, 0, 4160, 10, 0, 4164, 10, 0, 4164, 10, 0, 4176, 10, 0, 4176, 10, 0, 4180, 10, 0, 4180, 10, 0, 4192, 10, 0, 4192, 10, 0, 4196, 10, 0, 4196, 10, 0, 5504, 8704, 0, 5504, 8704, 0, 5508, 8704, 0, 5508, 8704, 0, 5520, 8704, 0, 5520, 8704, 0, 5524, 8704, 0, 5524, 8704, 0, 5536, 8704, 0, 5536, 8704, 0, 5540, 8704, 0, 5540, 8704, 0, 7424, 21, 0, 7424, 21, 0, 7424, 21, 0, 10752, 5, 0, 10752, 5, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 2176, 8322, 0, 2176, 8322, 0, 2176, 8322, 0, 2192, 8322, 0, 2192, 8322, 0, 2192, 8322, 0, 2208, 8322, 0, 2208, 8322, 0, 2208, 8322, 0, 3520, 32778, 0, 3520, 32778, 0, 3520, 32778, 0, 3524, 32778, 0, 3524, 32778, 0, 3524, 32778, 0, 3536, 32778, 0, 3536, 32778, 0, 3536, 32778, 0, 3540, 32778, 0, 3540, 32778, 0, 3540, 32778, 0, 3552, 32778, 0, 3552, 32778, 0, 3552, 32778, 0, 3556, 32778, 0, 3556, 32778, 0, 3556, 32778, 0, 4160, 10, 0, 4160, 10, 0, 4164, 10, 0, 4164, 10, 0, 4176, 10, 0, 4176, 10, 0, 4180, 10, 0, 4180, 10, 0, 4192, 10, 0, 4192, 10, 0, 4196, 10, 0, 4196, 10, 0, 5504, 8704, 0, 5504, 8704, 0, 5508, 8704, 0, 5508, 8704, 0, 5520, 8704, 0, 5520, 8704, 0, 5524, 8704, 0, 5524, 8704, 0, 5536, 8704, 0, 5536, 8704, 0, 5540, 8704, 0, 5540, 8704, 0, 7424, 21, 0, 7424, 21, 0, 7424, 21, 0, 10752, 5, 0, 10752, 5, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
