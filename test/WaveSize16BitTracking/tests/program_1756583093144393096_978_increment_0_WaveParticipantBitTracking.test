#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 2)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (31 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 14)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (27 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (23 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 15)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (19 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((53 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((70 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((79 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 10))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((90 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 13)) {
      if ((WaveGetLaneIndex() == 15)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((100 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 9)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((109 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if ((WaveGetLaneIndex() < 7)) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((116 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 564
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1984, 3, 0, 1984, 3, 0, 1728, 49152, 0, 1728, 49152, 0, 1472, 10920, 0, 1472, 10920, 0, 1472, 10920, 0, 1472, 10920, 0, 1472, 10920, 0, 1472, 10920, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5760, 43018, 0, 5760, 43018, 0, 5760, 43018, 0, 5760, 43018, 0, 5760, 43018, 0, 5776, 43018, 0, 5776, 43018, 0, 5776, 43018, 0, 5776, 43018, 0, 5776, 43018, 0, 5792, 43018, 0, 5792, 43018, 0, 5792, 43018, 0, 5792, 43018, 0, 5792, 43018, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 1984, 3, 0, 1984, 3, 0, 1728, 49152, 0, 1728, 49152, 0, 1472, 10920, 0, 1472, 10920, 0, 1472, 10920, 0, 1472, 10920, 0, 1472, 10920, 0, 1472, 10920, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3392, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3408, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 3424, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5056, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5072, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5088, 21845, 0, 5760, 43018, 0, 5760, 43018, 0, 5760, 43018, 0, 5760, 43018, 0, 5760, 43018, 0, 5776, 43018, 0, 5776, 43018, 0, 5776, 43018, 0, 5776, 43018, 0, 5776, 43018, 0, 5792, 43018, 0, 5792, 43018, 0, 5792, 43018, 0, 5792, 43018, 0, 5792, 43018, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7424, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7440, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0, 7456, 127, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
