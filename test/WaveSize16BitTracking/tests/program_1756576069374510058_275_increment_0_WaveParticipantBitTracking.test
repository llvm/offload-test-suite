#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() < 1)) {
      if ((WaveGetLaneIndex() >= 14)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((17 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if ((WaveGetLaneIndex() >= 11)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((((40 << 6) | (i0 << 4)) | (i1 << 2)) | i2);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 1)) {
            result = (result + WaveActiveSum(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((((47 << 6) | (i0 << 4)) | (i1 << 2)) | i2);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            continue;
          }
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 15))) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((61 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 2)) {
          break;
        }
      }
      if ((WaveGetLaneIndex() < 1)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((73 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 13))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((84 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 252
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3008, 1, 0, 3009, 1, 0, 3010, 1, 0, 3012, 1, 0, 3013, 1, 0, 3014, 1, 0, 3016, 1, 0, 3017, 1, 0, 3018, 1, 0, 3024, 1, 0, 3025, 1, 0, 3026, 1, 0, 3028, 1, 0, 3029, 1, 0, 3030, 1, 0, 3032, 1, 0, 3033, 1, 0, 3034, 1, 0, 3904, 1, 0, 3908, 1, 0, 3912, 1, 0, 3920, 1, 0, 3924, 1, 0, 3928, 1, 0, 4672, 1, 0, 4688, 1, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 3008, 1, 0, 3009, 1, 0, 3010, 1, 0, 3012, 1, 0, 3013, 1, 0, 3014, 1, 0, 3016, 1, 0, 3017, 1, 0, 3018, 1, 0, 3024, 1, 0, 3025, 1, 0, 3026, 1, 0, 3028, 1, 0, 3029, 1, 0, 3030, 1, 0, 3032, 1, 0, 3033, 1, 0, 3034, 1, 0, 3904, 1, 0, 3908, 1, 0, 3912, 1, 0, 3920, 1, 0, 3924, 1, 0, 3928, 1, 0, 4672, 1, 0, 4688, 1, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5376, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0, 5392, 57375, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
