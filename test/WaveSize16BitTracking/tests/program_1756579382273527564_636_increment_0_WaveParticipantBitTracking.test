#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (13 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if ((WaveGetLaneIndex() < 3)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((28 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 4)) {
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((48 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 11)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((55 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 14)) {
        result = (result + WaveActiveMax(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((62 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (71 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (81 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 13))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((108 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i2 == 1)) {
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (116 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((136 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 10))) {
            if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 13))) {
              result = (result + WaveActiveMax(6));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((162 << 6) | (i3 << 4)) | (i4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 10))) {
            result = (result + WaveActiveMin(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((177 << 6) | (i3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((186 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i3 == 1)) {
          continue;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (198 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
        if ((WaveGetLaneIndex() == 9)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((215 << 6) | (i5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter6 = 0;
        while ((counter6 < 2)) {
          counter6 = (counter6 + 1);
          switch ((WaveGetLaneIndex() % 4)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((232 << 6) | (i5 << 4)) | (counter6 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((241 << 6) | (i5 << 4)) | (counter6 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((246 << 6) | (i5 << 4)) | (counter6 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 3: {
              if ((WaveGetLaneIndex() < 20)) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((253 << 6) | (i5 << 4)) | (counter6 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((262 << 6) | (i5 << 4)) | (counter6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 9)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((271 << 6) | (i5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 3: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() >= 9)) {
            for (uint i7 = 0; (i7 < 2); i7 = (i7 + 1)) {
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((296 << 6) | (i7 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveMax(6));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((305 << 6) | (i7 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((i7 == 1)) {
                break;
              }
            }
            if ((WaveGetLaneIndex() >= 8)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (315 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          for (uint i8 = 0; (i8 < 3); i8 = (i8 + 1)) {
            for (uint i9 = 0; (i9 < 2); i9 = (i9 + 1)) {
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((342 << 6) | (i8 << 4)) | (i9 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 10))) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((353 << 6) | (i8 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (358 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 528
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 1792, 5, 0, 1792, 5, 0, 1808, 5, 0, 1808, 5, 0, 3072, 5, 0, 3072, 5, 0, 3076, 5, 0, 3076, 5, 0, 3088, 5, 0, 3088, 5, 0, 3092, 5, 0, 3092, 5, 0, 3968, 16384, 0, 3984, 16384, 0, 5184, 73, 0, 5184, 73, 0, 5184, 73, 0, 6912, 8264, 0, 6912, 8264, 0, 6912, 8264, 0, 6928, 8264, 0, 6928, 8264, 0, 6928, 8264, 0, 7424, 18724, 0, 7424, 18724, 0, 7424, 18724, 0, 7424, 18724, 0, 7424, 18724, 0, 8704, 4369, 0, 8704, 4369, 0, 8704, 4369, 0, 8704, 4369, 0, 8720, 4369, 0, 8720, 4369, 0, 8720, 4369, 0, 8720, 4369, 0, 8736, 4369, 0, 8736, 4369, 0, 8736, 4369, 0, 8736, 4369, 0, 10368, 1, 0, 10372, 1, 0, 10376, 1, 0, 10384, 1, 0, 10388, 1, 0, 10392, 1, 0, 10400, 1, 0, 10404, 1, 0, 10408, 1, 0, 15748, 17476, 0, 15748, 17476, 0, 15748, 17476, 0, 15748, 17476, 0, 15752, 17476, 0, 15752, 17476, 0, 15752, 17476, 0, 15752, 17476, 0, 15764, 17476, 0, 15764, 17476, 0, 15764, 17476, 0, 15764, 17476, 0, 15768, 17476, 0, 15768, 17476, 0, 15768, 17476, 0, 15768, 17476, 0, 18944, 32768, 0, 18960, 32768, 0, 20160, 32768, 0, 21888, 1024, 0, 21892, 1024, 0, 21904, 1024, 0, 21908, 1024, 0, 21920, 1024, 0, 21924, 1024, 0, 22592, 1024, 0, 22608, 1024, 0, 22624, 1024, 0, 22912, 18436, 0, 22912, 18436, 0, 22912, 18436, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 1792, 5, 0, 1792, 5, 0, 1808, 5, 0, 1808, 5, 0, 3072, 5, 0, 3072, 5, 0, 3076, 5, 0, 3076, 5, 0, 3088, 5, 0, 3088, 5, 0, 3092, 5, 0, 3092, 5, 0, 3968, 16384, 0, 3984, 16384, 0, 5184, 73, 0, 5184, 73, 0, 5184, 73, 0, 6912, 8264, 0, 6912, 8264, 0, 6912, 8264, 0, 6928, 8264, 0, 6928, 8264, 0, 6928, 8264, 0, 7424, 18724, 0, 7424, 18724, 0, 7424, 18724, 0, 7424, 18724, 0, 7424, 18724, 0, 8704, 4369, 0, 8704, 4369, 0, 8704, 4369, 0, 8704, 4369, 0, 8720, 4369, 0, 8720, 4369, 0, 8720, 4369, 0, 8720, 4369, 0, 8736, 4369, 0, 8736, 4369, 0, 8736, 4369, 0, 8736, 4369, 0, 10368, 1, 0, 10372, 1, 0, 10376, 1, 0, 10384, 1, 0, 10388, 1, 0, 10392, 1, 0, 10400, 1, 0, 10404, 1, 0, 10408, 1, 0, 15748, 17476, 0, 15748, 17476, 0, 15748, 17476, 0, 15748, 17476, 0, 15752, 17476, 0, 15752, 17476, 0, 15752, 17476, 0, 15752, 17476, 0, 15764, 17476, 0, 15764, 17476, 0, 15764, 17476, 0, 15764, 17476, 0, 15768, 17476, 0, 15768, 17476, 0, 15768, 17476, 0, 15768, 17476, 0, 18944, 32768, 0, 18960, 32768, 0, 20160, 32768, 0, 21888, 1024, 0, 21892, 1024, 0, 21904, 1024, 0, 21908, 1024, 0, 21920, 1024, 0, 21924, 1024, 0, 22592, 1024, 0, 22608, 1024, 0, 22624, 1024, 0, 22912, 18436, 0, 22912, 18436, 0, 22912, 18436, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
