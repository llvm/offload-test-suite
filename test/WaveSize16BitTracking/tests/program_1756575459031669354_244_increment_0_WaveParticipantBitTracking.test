#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (30 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (34 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 15))) {
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (51 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    case 1: {
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((79 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 0))) {
              result = (result + WaveActiveMax(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((109 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((counter0 == 2)) {
            break;
          }
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (116 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 13))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (131 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
    if ((WaveGetLaneIndex() == 12)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((146 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 7)) {
      if ((WaveGetLaneIndex() < 2)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((158 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 10))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((176 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    if ((WaveGetLaneIndex() >= 9)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((183 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((193 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((202 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((207 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    if ((WaveGetLaneIndex() >= 8)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((214 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  if ((WaveGetLaneIndex() >= 9)) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (221 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 612
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1472, 17476, 0, 1472, 17476, 0, 1472, 17476, 0, 1472, 17476, 0, 1920, 34952, 0, 1920, 34952, 0, 1920, 34952, 0, 1920, 34952, 0, 5072, 8, 0, 5088, 8, 0, 9344, 4096, 0, 9360, 4096, 0, 9376, 4096, 0, 10112, 3, 0, 10112, 3, 0, 10128, 3, 0, 10128, 3, 0, 10144, 3, 0, 10144, 3, 0, 11268, 23, 0, 11268, 23, 0, 11268, 23, 0, 11268, 23, 0, 11272, 23, 0, 11272, 23, 0, 11272, 23, 0, 11272, 23, 0, 11284, 23, 0, 11284, 23, 0, 11284, 23, 0, 11284, 23, 0, 11288, 23, 0, 11288, 23, 0, 11288, 23, 0, 11288, 23, 0, 11300, 23, 0, 11300, 23, 0, 11300, 23, 0, 11300, 23, 0, 11304, 23, 0, 11304, 23, 0, 11304, 23, 0, 11304, 23, 0, 11712, 32256, 0, 11712, 32256, 0, 11712, 32256, 0, 11712, 32256, 0, 11712, 32256, 0, 11712, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 12928, 1024, 0, 12944, 1024, 0, 12960, 1024, 0, 13248, 18688, 0, 13248, 18688, 0, 13248, 18688, 0, 13264, 18688, 0, 13264, 18688, 0, 13264, 18688, 0, 13280, 18688, 0, 13280, 18688, 0, 13280, 18688, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 14144, 32256, 0, 14144, 32256, 0, 14144, 32256, 0, 14144, 32256, 0, 14144, 32256, 0, 14144, 32256, 0, 576, 17, 0, 576, 17, 0, 1472, 17476, 0, 1472, 17476, 0, 1472, 17476, 0, 1472, 17476, 0, 1920, 34952, 0, 1920, 34952, 0, 1920, 34952, 0, 1920, 34952, 0, 5072, 8, 0, 5088, 8, 0, 9344, 4096, 0, 9360, 4096, 0, 9376, 4096, 0, 10112, 3, 0, 10112, 3, 0, 10128, 3, 0, 10128, 3, 0, 10144, 3, 0, 10144, 3, 0, 11268, 23, 0, 11268, 23, 0, 11268, 23, 0, 11268, 23, 0, 11272, 23, 0, 11272, 23, 0, 11272, 23, 0, 11272, 23, 0, 11284, 23, 0, 11284, 23, 0, 11284, 23, 0, 11284, 23, 0, 11288, 23, 0, 11288, 23, 0, 11288, 23, 0, 11288, 23, 0, 11300, 23, 0, 11300, 23, 0, 11300, 23, 0, 11300, 23, 0, 11304, 23, 0, 11304, 23, 0, 11304, 23, 0, 11304, 23, 0, 11712, 32256, 0, 11712, 32256, 0, 11712, 32256, 0, 11712, 32256, 0, 11712, 32256, 0, 11712, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11728, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 11744, 32256, 0, 12928, 1024, 0, 12944, 1024, 0, 12960, 1024, 0, 13248, 18688, 0, 13248, 18688, 0, 13248, 18688, 0, 13264, 18688, 0, 13264, 18688, 0, 13264, 18688, 0, 13280, 18688, 0, 13280, 18688, 0, 13280, 18688, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13696, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13712, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 13728, 32512, 0, 14144, 32256, 0, 14144, 32256, 0, 14144, 32256, 0, 14144, 32256, 0, 14144, 32256, 0, 14144, 32256, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
