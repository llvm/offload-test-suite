#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    if ((WaveGetLaneIndex() == 3)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((13 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 9))) {
      if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 5))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((47 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((63 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 8)) {
          if ((WaveGetLaneIndex() >= 15)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((73 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 14)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((80 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    } else {
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 15))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((91 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter2 = 0;
    while ((counter2 < 3)) {
      counter2 = (counter2 + 1);
      if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 12))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((109 << 6) | (counter0 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 2))) {
          result = (result + WaveActiveMax(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((((139 << 6) | (counter0 << 4)) | (counter2 << 2)) | counter3);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((154 << 6) | (counter0 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if ((WaveGetLaneIndex() == 9)) {
    result = (result + WaveActiveMax(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((161 << 6) | (counter0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if ((counter0 == 2)) {
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 396
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [848, 8, 0, 864, 8, 0, 3024, 8704, 0, 3024, 8704, 0, 3040, 8704, 0, 3040, 8704, 0, 4052, 8704, 0, 4052, 8704, 0, 4056, 8704, 0, 4056, 8704, 0, 4060, 8704, 0, 4060, 8704, 0, 4068, 8704, 0, 4068, 8704, 0, 4072, 8704, 0, 4072, 8704, 0, 4076, 8704, 0, 4076, 8704, 0, 5840, 32770, 0, 5840, 32770, 0, 5856, 32770, 0, 5856, 32770, 0, 6996, 4104, 0, 6996, 4104, 0, 7000, 4104, 0, 7000, 4104, 0, 7004, 4104, 0, 7004, 4104, 0, 7012, 4104, 0, 7012, 4104, 0, 7016, 4104, 0, 7016, 4104, 0, 7020, 4104, 0, 7020, 4104, 0, 8917, 36, 0, 8917, 36, 0, 8918, 36, 0, 8918, 36, 0, 8921, 36, 0, 8921, 36, 0, 8922, 36, 0, 8922, 36, 0, 8925, 36, 0, 8925, 36, 0, 8926, 36, 0, 8926, 36, 0, 8933, 36, 0, 8933, 36, 0, 8934, 36, 0, 8934, 36, 0, 8937, 36, 0, 8937, 36, 0, 8938, 36, 0, 8938, 36, 0, 8941, 36, 0, 8941, 36, 0, 8942, 36, 0, 8942, 36, 0, 9876, 8, 0, 9880, 8, 0, 9884, 8, 0, 9892, 8, 0, 9896, 8, 0, 9900, 8, 0, 10320, 512, 0, 10336, 512, 0, 848, 8, 0, 864, 8, 0, 3024, 8704, 0, 3024, 8704, 0, 3040, 8704, 0, 3040, 8704, 0, 4052, 8704, 0, 4052, 8704, 0, 4056, 8704, 0, 4056, 8704, 0, 4060, 8704, 0, 4060, 8704, 0, 4068, 8704, 0, 4068, 8704, 0, 4072, 8704, 0, 4072, 8704, 0, 4076, 8704, 0, 4076, 8704, 0, 5840, 32770, 0, 5840, 32770, 0, 5856, 32770, 0, 5856, 32770, 0, 6996, 4104, 0, 6996, 4104, 0, 7000, 4104, 0, 7000, 4104, 0, 7004, 4104, 0, 7004, 4104, 0, 7012, 4104, 0, 7012, 4104, 0, 7016, 4104, 0, 7016, 4104, 0, 7020, 4104, 0, 7020, 4104, 0, 8917, 36, 0, 8917, 36, 0, 8918, 36, 0, 8918, 36, 0, 8921, 36, 0, 8921, 36, 0, 8922, 36, 0, 8922, 36, 0, 8925, 36, 0, 8925, 36, 0, 8926, 36, 0, 8926, 36, 0, 8933, 36, 0, 8933, 36, 0, 8934, 36, 0, 8934, 36, 0, 8937, 36, 0, 8937, 36, 0, 8938, 36, 0, 8938, 36, 0, 8941, 36, 0, 8941, 36, 0, 8942, 36, 0, 8942, 36, 0, 9876, 8, 0, 9880, 8, 0, 9884, 8, 0, 9892, 8, 0, 9896, 8, 0, 9900, 8, 0, 10320, 512, 0, 10336, 512, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
