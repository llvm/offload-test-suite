#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 13))) {
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 12))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() < 2)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((31 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 15))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((50 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 12))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((61 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((counter0 == 1)) {
        break;
      }
    }
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 15))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (75 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  uint counter2 = 0;
  while ((counter2 < 3)) {
    counter2 = (counter2 + 1);
    if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 0))) {
      if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 3))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((116 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((130 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 5))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((153 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 4))) {
        result = (result + WaveActiveMin(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((176 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((WaveGetLaneIndex() == 13)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((183 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 11))) {
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((210 << 6) | (counter2 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((219 << 6) | (counter2 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveMax(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((238 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 14)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((245 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 12))) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((256 << 6) | (counter2 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 570
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 2000, 3, 0, 2000, 3, 0, 3216, 32783, 0, 3216, 32783, 0, 3216, 32783, 0, 3216, 32783, 0, 3216, 32783, 0, 3220, 32783, 0, 3220, 32783, 0, 3220, 32783, 0, 3220, 32783, 0, 3220, 32783, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 4800, 32769, 0, 4800, 32769, 0, 7440, 2049, 0, 7440, 2049, 0, 7456, 2049, 0, 7456, 2049, 0, 7472, 2049, 0, 7472, 2049, 0, 8336, 2176, 0, 8336, 2176, 0, 8352, 2176, 0, 8352, 2176, 0, 8368, 2176, 0, 8368, 2176, 0, 11280, 1, 0, 11296, 1, 0, 11312, 1, 0, 11728, 8192, 0, 11744, 8192, 0, 11760, 8192, 0, 13460, 64, 0, 13464, 64, 0, 13468, 64, 0, 13476, 64, 0, 13480, 64, 0, 13484, 64, 0, 13492, 64, 0, 13496, 64, 0, 13500, 64, 0, 14036, 8, 0, 14040, 8, 0, 14044, 8, 0, 14052, 8, 0, 14056, 8, 0, 14060, 8, 0, 14068, 8, 0, 14072, 8, 0, 14076, 8, 0, 15248, 8, 0, 15264, 8, 0, 15280, 8, 0, 15696, 16384, 0, 15712, 16384, 0, 15728, 16384, 0, 16400, 61443, 0, 16400, 61443, 0, 16400, 61443, 0, 16400, 61443, 0, 16400, 61443, 0, 16400, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 1088, 57359, 0, 2000, 3, 0, 2000, 3, 0, 3216, 32783, 0, 3216, 32783, 0, 3216, 32783, 0, 3216, 32783, 0, 3216, 32783, 0, 3220, 32783, 0, 3220, 32783, 0, 3220, 32783, 0, 3220, 32783, 0, 3220, 32783, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3920, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 3924, 57359, 0, 4800, 32769, 0, 4800, 32769, 0, 7440, 2049, 0, 7440, 2049, 0, 7456, 2049, 0, 7456, 2049, 0, 7472, 2049, 0, 7472, 2049, 0, 8336, 2176, 0, 8336, 2176, 0, 8352, 2176, 0, 8352, 2176, 0, 8368, 2176, 0, 8368, 2176, 0, 11280, 1, 0, 11296, 1, 0, 11312, 1, 0, 11728, 8192, 0, 11744, 8192, 0, 11760, 8192, 0, 13460, 64, 0, 13464, 64, 0, 13468, 64, 0, 13476, 64, 0, 13480, 64, 0, 13484, 64, 0, 13492, 64, 0, 13496, 64, 0, 13500, 64, 0, 14036, 8, 0, 14040, 8, 0, 14044, 8, 0, 14052, 8, 0, 14056, 8, 0, 14060, 8, 0, 14068, 8, 0, 14072, 8, 0, 14076, 8, 0, 15248, 8, 0, 15264, 8, 0, 15280, 8, 0, 15696, 16384, 0, 15712, 16384, 0, 15728, 16384, 0, 16400, 61443, 0, 16400, 61443, 0, 16400, 61443, 0, 16400, 61443, 0, 16400, 61443, 0, 16400, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16416, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 16432, 61443, 0, 16432, 61443, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
