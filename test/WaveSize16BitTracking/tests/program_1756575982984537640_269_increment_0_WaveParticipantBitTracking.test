#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (13 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((29 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 15))) {
        if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 9))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((55 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((64 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((73 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(9));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((82 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter0 == 2)) {
      break;
    }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (95 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12))) {
        if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8))) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (121 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((137 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((146 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 13))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((165 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((178 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i2 == 1)) {
          continue;
        }
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (186 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (190 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 14))) {
                if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 10))) {
                  result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (219 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 15))) {
                if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 13))) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (237 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              } else {
              if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 15))) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (250 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
              if ((WaveGetLaneIndex() < 4)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((265 << 6) | (i3 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (274 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (279 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (288 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 468
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 4112, 8874, 0, 4112, 8874, 0, 4112, 8874, 0, 4112, 8874, 0, 4112, 8874, 0, 4112, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 6080, 73, 0, 6080, 73, 0, 6080, 73, 0, 10560, 8194, 0, 10560, 8194, 0, 10576, 8194, 0, 10576, 8194, 0, 11904, 18724, 0, 11904, 18724, 0, 11904, 18724, 0, 11904, 18724, 0, 11904, 18724, 0, 14016, 1, 0, 17536, 1040, 0, 17536, 1040, 0, 17856, 16644, 0, 17856, 16644, 0, 17856, 16644, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 832, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1872, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 1888, 43690, 0, 4112, 8874, 0, 4112, 8874, 0, 4112, 8874, 0, 4112, 8874, 0, 4112, 8874, 0, 4112, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 4128, 8874, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 6080, 73, 0, 6080, 73, 0, 6080, 73, 0, 10560, 8194, 0, 10560, 8194, 0, 10576, 8194, 0, 10576, 8194, 0, 11904, 18724, 0, 11904, 18724, 0, 11904, 18724, 0, 11904, 18724, 0, 11904, 18724, 0, 14016, 1, 0, 17536, 1040, 0, 17536, 1040, 0, 17856, 16644, 0, 17856, 16644, 0, 17856, 16644, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0, 18432, 21845, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
