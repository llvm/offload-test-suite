#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 15))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((20 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 10))) {
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 14))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((40 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 11))) {
            if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 10))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((61 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 13))) {
            result = (result + WaveActiveMax(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((72 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 10))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((85 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    case 1: {
        if ((WaveGetLaneIndex() == 14)) {
          if ((WaveGetLaneIndex() == 13)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((97 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 12)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((104 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    case 2: {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 15))) {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 11))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((122 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 15))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((133 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() >= 8)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((140 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 9)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((147 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  }
  if ((i0 == 2)) {
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 450
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1280, 32769, 0, 1280, 32769, 0, 1296, 32769, 0, 1296, 32769, 0, 1312, 32769, 0, 1312, 32769, 0, 2560, 49155, 0, 2560, 49155, 0, 2560, 49155, 0, 2560, 49155, 0, 2576, 49155, 0, 2576, 49155, 0, 2576, 49155, 0, 2576, 49155, 0, 2592, 49155, 0, 2592, 49155, 0, 2592, 49155, 0, 2592, 49155, 0, 3904, 36865, 0, 3904, 36865, 0, 3904, 36865, 0, 3920, 36865, 0, 3920, 36865, 0, 3920, 36865, 0, 3936, 36865, 0, 3936, 36865, 0, 3936, 36865, 0, 7808, 32771, 0, 7808, 32771, 0, 7808, 32771, 0, 7824, 32771, 0, 7824, 32771, 0, 7824, 32771, 0, 7840, 32771, 0, 7840, 32771, 0, 7840, 32771, 0, 8512, 32771, 0, 8512, 32771, 0, 8512, 32771, 0, 8528, 32771, 0, 8528, 32771, 0, 8528, 32771, 0, 8544, 32771, 0, 8544, 32771, 0, 8544, 32771, 0, 8960, 31744, 0, 8960, 31744, 0, 8960, 31744, 0, 8960, 31744, 0, 8960, 31744, 0, 8976, 31744, 0, 8976, 31744, 0, 8976, 31744, 0, 8976, 31744, 0, 8976, 31744, 0, 8992, 31744, 0, 8992, 31744, 0, 8992, 31744, 0, 8992, 31744, 0, 8992, 31744, 0, 9408, 31744, 0, 9408, 31744, 0, 9408, 31744, 0, 9408, 31744, 0, 9408, 31744, 0, 9424, 31744, 0, 9424, 31744, 0, 9424, 31744, 0, 9424, 31744, 0, 9424, 31744, 0, 9440, 31744, 0, 9440, 31744, 0, 9440, 31744, 0, 9440, 31744, 0, 9440, 31744, 0, 1280, 32769, 0, 1280, 32769, 0, 1296, 32769, 0, 1296, 32769, 0, 1312, 32769, 0, 1312, 32769, 0, 2560, 49155, 0, 2560, 49155, 0, 2560, 49155, 0, 2560, 49155, 0, 2576, 49155, 0, 2576, 49155, 0, 2576, 49155, 0, 2576, 49155, 0, 2592, 49155, 0, 2592, 49155, 0, 2592, 49155, 0, 2592, 49155, 0, 3904, 36865, 0, 3904, 36865, 0, 3904, 36865, 0, 3920, 36865, 0, 3920, 36865, 0, 3920, 36865, 0, 3936, 36865, 0, 3936, 36865, 0, 3936, 36865, 0, 7808, 32771, 0, 7808, 32771, 0, 7808, 32771, 0, 7824, 32771, 0, 7824, 32771, 0, 7824, 32771, 0, 7840, 32771, 0, 7840, 32771, 0, 7840, 32771, 0, 8512, 32771, 0, 8512, 32771, 0, 8512, 32771, 0, 8528, 32771, 0, 8528, 32771, 0, 8528, 32771, 0, 8544, 32771, 0, 8544, 32771, 0, 8544, 32771, 0, 8960, 31744, 0, 8960, 31744, 0, 8960, 31744, 0, 8960, 31744, 0, 8960, 31744, 0, 8976, 31744, 0, 8976, 31744, 0, 8976, 31744, 0, 8976, 31744, 0, 8976, 31744, 0, 8992, 31744, 0, 8992, 31744, 0, 8992, 31744, 0, 8992, 31744, 0, 8992, 31744, 0, 9408, 31744, 0, 9408, 31744, 0, 9408, 31744, 0, 9408, 31744, 0, 9408, 31744, 0, 9424, 31744, 0, 9424, 31744, 0, 9424, 31744, 0, 9424, 31744, 0, 9424, 31744, 0, 9440, 31744, 0, 9440, 31744, 0, 9440, 31744, 0, 9440, 31744, 0, 9440, 31744, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
