#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 7)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (56 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 15)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (50 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 9)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (46 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 11))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (40 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 14)) {
    result = (result + WaveActiveMin(5));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (34 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() < 5)) {
      result = (result + WaveActiveMin(8));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((71 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 12))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((89 << 6) | (i0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((99 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((108 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((113 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((117 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 13))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((130 << 6) | (i0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() < 4)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((139 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1146
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3200, 32768, 0, 2944, 32256, 0, 2944, 32256, 0, 2944, 32256, 0, 2944, 32256, 0, 2944, 32256, 0, 2944, 32256, 0, 4544, 31, 0, 4544, 31, 0, 4544, 31, 0, 4544, 31, 0, 4544, 31, 0, 4560, 31, 0, 4560, 31, 0, 4560, 31, 0, 4560, 31, 0, 4560, 31, 0, 4576, 31, 0, 4576, 31, 0, 4576, 31, 0, 4576, 31, 0, 4576, 31, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 6340, 73, 0, 6340, 73, 0, 6340, 73, 0, 6344, 73, 0, 6344, 73, 0, 6344, 73, 0, 6356, 73, 0, 6356, 73, 0, 6356, 73, 0, 6360, 73, 0, 6360, 73, 0, 6360, 73, 0, 6372, 73, 0, 6372, 73, 0, 6372, 73, 0, 6376, 73, 0, 6376, 73, 0, 6376, 73, 0, 6916, 1040, 0, 6916, 1040, 0, 6920, 1040, 0, 6920, 1040, 0, 6932, 1040, 0, 6932, 1040, 0, 6936, 1040, 0, 6936, 1040, 0, 6948, 1040, 0, 6948, 1040, 0, 6952, 1040, 0, 6952, 1040, 0, 7236, 18724, 0, 7236, 18724, 0, 7236, 18724, 0, 7236, 18724, 0, 7236, 18724, 0, 7240, 18724, 0, 7240, 18724, 0, 7240, 18724, 0, 7240, 18724, 0, 7240, 18724, 0, 7252, 18724, 0, 7252, 18724, 0, 7252, 18724, 0, 7252, 18724, 0, 7252, 18724, 0, 7256, 18724, 0, 7256, 18724, 0, 7256, 18724, 0, 7256, 18724, 0, 7256, 18724, 0, 7268, 18724, 0, 7268, 18724, 0, 7268, 18724, 0, 7268, 18724, 0, 7268, 18724, 0, 7272, 18724, 0, 7272, 18724, 0, 7272, 18724, 0, 7272, 18724, 0, 7272, 18724, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8896, 15, 0, 8896, 15, 0, 8896, 15, 0, 8896, 15, 0, 8912, 15, 0, 8912, 15, 0, 8912, 15, 0, 8912, 15, 0, 8928, 15, 0, 8928, 15, 0, 8928, 15, 0, 8928, 15, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3584, 127, 0, 3200, 32768, 0, 2944, 32256, 0, 2944, 32256, 0, 2944, 32256, 0, 2944, 32256, 0, 2944, 32256, 0, 2944, 32256, 0, 4544, 31, 0, 4544, 31, 0, 4544, 31, 0, 4544, 31, 0, 4544, 31, 0, 4560, 31, 0, 4560, 31, 0, 4560, 31, 0, 4560, 31, 0, 4560, 31, 0, 4576, 31, 0, 4576, 31, 0, 4576, 31, 0, 4576, 31, 0, 4576, 31, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5700, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5704, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5716, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5720, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5732, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 5736, 61447, 0, 6340, 73, 0, 6340, 73, 0, 6340, 73, 0, 6344, 73, 0, 6344, 73, 0, 6344, 73, 0, 6356, 73, 0, 6356, 73, 0, 6356, 73, 0, 6360, 73, 0, 6360, 73, 0, 6360, 73, 0, 6372, 73, 0, 6372, 73, 0, 6372, 73, 0, 6376, 73, 0, 6376, 73, 0, 6376, 73, 0, 6916, 1040, 0, 6916, 1040, 0, 6920, 1040, 0, 6920, 1040, 0, 6932, 1040, 0, 6932, 1040, 0, 6936, 1040, 0, 6936, 1040, 0, 6948, 1040, 0, 6948, 1040, 0, 6952, 1040, 0, 6952, 1040, 0, 7236, 18724, 0, 7236, 18724, 0, 7236, 18724, 0, 7236, 18724, 0, 7236, 18724, 0, 7240, 18724, 0, 7240, 18724, 0, 7240, 18724, 0, 7240, 18724, 0, 7240, 18724, 0, 7252, 18724, 0, 7252, 18724, 0, 7252, 18724, 0, 7252, 18724, 0, 7252, 18724, 0, 7256, 18724, 0, 7256, 18724, 0, 7256, 18724, 0, 7256, 18724, 0, 7256, 18724, 0, 7268, 18724, 0, 7268, 18724, 0, 7268, 18724, 0, 7268, 18724, 0, 7268, 18724, 0, 7272, 18724, 0, 7272, 18724, 0, 7272, 18724, 0, 7272, 18724, 0, 7272, 18724, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8324, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8328, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8340, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8344, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8356, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8360, 57375, 0, 8896, 15, 0, 8896, 15, 0, 8896, 15, 0, 8896, 15, 0, 8912, 15, 0, 8912, 15, 0, 8912, 15, 0, 8912, 15, 0, 8928, 15, 0, 8928, 15, 0, 8928, 15, 0, 8928, 15, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
