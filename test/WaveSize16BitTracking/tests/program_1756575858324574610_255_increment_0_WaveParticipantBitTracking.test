#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 11))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((25 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 8)) {
          if ((WaveGetLaneIndex() >= 15)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((35 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() < 6)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((44 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 5)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((51 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 11))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((66 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((82 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 15))) {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 15))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((100 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((111 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 282
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1600, 257, 0, 1600, 257, 0, 1616, 257, 0, 1616, 257, 0, 1632, 257, 0, 1632, 257, 0, 4224, 64, 0, 4240, 64, 0, 4256, 64, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 6416, 32778, 0, 6416, 32778, 0, 6416, 32778, 0, 6432, 32778, 0, 6432, 32778, 0, 6432, 32778, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 1600, 257, 0, 1600, 257, 0, 1616, 257, 0, 1616, 257, 0, 1632, 257, 0, 1632, 257, 0, 4224, 64, 0, 4240, 64, 0, 4256, 64, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5264, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 5280, 43690, 0, 6416, 32778, 0, 6416, 32778, 0, 6416, 32778, 0, 6432, 32778, 0, 6432, 32778, 0, 6432, 32778, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7120, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0, 7136, 43690, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
