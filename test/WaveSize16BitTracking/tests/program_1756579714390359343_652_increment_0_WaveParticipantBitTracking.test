#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 2)) {
    counter0 = (counter0 + 1);
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 7))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((38 << 6) | (counter0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((48 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((57 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((62 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((69 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((73 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 13))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((88 << 6) | (counter0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() < 2)) {
      result = (result + WaveActiveMax(9));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((95 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 456
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2452, 5284, 0, 2452, 5284, 0, 2452, 5284, 0, 2452, 5284, 0, 2452, 5284, 0, 2456, 5284, 0, 2456, 5284, 0, 2456, 5284, 0, 2456, 5284, 0, 2456, 5284, 0, 2468, 5284, 0, 2468, 5284, 0, 2468, 5284, 0, 2468, 5284, 0, 2468, 5284, 0, 2472, 5284, 0, 2472, 5284, 0, 2472, 5284, 0, 2472, 5284, 0, 2472, 5284, 0, 3092, 17, 0, 3092, 17, 0, 3096, 17, 0, 3096, 17, 0, 3108, 17, 0, 3108, 17, 0, 3112, 17, 0, 3112, 17, 0, 3988, 17476, 0, 3988, 17476, 0, 3988, 17476, 0, 3988, 17476, 0, 3992, 17476, 0, 3992, 17476, 0, 3992, 17476, 0, 3992, 17476, 0, 4004, 17476, 0, 4004, 17476, 0, 4004, 17476, 0, 4004, 17476, 0, 4008, 17476, 0, 4008, 17476, 0, 4008, 17476, 0, 4008, 17476, 0, 4436, 34952, 0, 4436, 34952, 0, 4436, 34952, 0, 4436, 34952, 0, 4440, 34952, 0, 4440, 34952, 0, 4440, 34952, 0, 4440, 34952, 0, 4452, 34952, 0, 4452, 34952, 0, 4452, 34952, 0, 4452, 34952, 0, 4456, 34952, 0, 4456, 34952, 0, 4456, 34952, 0, 4456, 34952, 0, 5652, 24608, 0, 5652, 24608, 0, 5652, 24608, 0, 5656, 24608, 0, 5656, 24608, 0, 5656, 24608, 0, 5668, 24608, 0, 5668, 24608, 0, 5668, 24608, 0, 5672, 24608, 0, 5672, 24608, 0, 5672, 24608, 0, 6096, 3, 0, 6096, 3, 0, 6112, 3, 0, 6112, 3, 0, 2452, 5284, 0, 2452, 5284, 0, 2452, 5284, 0, 2452, 5284, 0, 2452, 5284, 0, 2456, 5284, 0, 2456, 5284, 0, 2456, 5284, 0, 2456, 5284, 0, 2456, 5284, 0, 2468, 5284, 0, 2468, 5284, 0, 2468, 5284, 0, 2468, 5284, 0, 2468, 5284, 0, 2472, 5284, 0, 2472, 5284, 0, 2472, 5284, 0, 2472, 5284, 0, 2472, 5284, 0, 3092, 17, 0, 3092, 17, 0, 3096, 17, 0, 3096, 17, 0, 3108, 17, 0, 3108, 17, 0, 3112, 17, 0, 3112, 17, 0, 3988, 17476, 0, 3988, 17476, 0, 3988, 17476, 0, 3988, 17476, 0, 3992, 17476, 0, 3992, 17476, 0, 3992, 17476, 0, 3992, 17476, 0, 4004, 17476, 0, 4004, 17476, 0, 4004, 17476, 0, 4004, 17476, 0, 4008, 17476, 0, 4008, 17476, 0, 4008, 17476, 0, 4008, 17476, 0, 4436, 34952, 0, 4436, 34952, 0, 4436, 34952, 0, 4436, 34952, 0, 4440, 34952, 0, 4440, 34952, 0, 4440, 34952, 0, 4440, 34952, 0, 4452, 34952, 0, 4452, 34952, 0, 4452, 34952, 0, 4452, 34952, 0, 4456, 34952, 0, 4456, 34952, 0, 4456, 34952, 0, 4456, 34952, 0, 5652, 24608, 0, 5652, 24608, 0, 5652, 24608, 0, 5656, 24608, 0, 5656, 24608, 0, 5656, 24608, 0, 5668, 24608, 0, 5668, 24608, 0, 5668, 24608, 0, 5672, 24608, 0, 5672, 24608, 0, 5672, 24608, 0, 6096, 3, 0, 6096, 3, 0, 6112, 3, 0, 6112, 3, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
