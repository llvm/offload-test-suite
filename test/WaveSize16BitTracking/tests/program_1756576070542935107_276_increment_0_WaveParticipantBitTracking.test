#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 12)) {
    if ((WaveGetLaneIndex() == 15)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 1))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((36 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((52 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 10))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((69 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 13))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((88 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 11))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((103 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  } else {
  if ((WaveGetLaneIndex() == 2)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (110 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 13))) {
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 4))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (143 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
            if ((WaveGetLaneIndex() < 4)) {
              result = (result + WaveActiveSum(8));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((165 << 6) | (counter1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 12))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((184 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 7))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (201 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (210 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (215 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
    if ((WaveGetLaneIndex() == 15)) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((230 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 7)) {
      if ((WaveGetLaneIndex() == 10)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((240 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          uint counter4 = 0;
          while ((counter4 < 2)) {
            counter4 = (counter4 + 1);
            if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 12))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((265 << 6) | (i3 << 4)) | (counter4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 11))) {
            if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 11))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((285 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
            if ((WaveGetLaneIndex() == 2)) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((300 << 6) | (i3 << 4)) | (i5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((307 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((311 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((WaveGetLaneIndex() == 13)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((320 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    uint counter6 = 0;
    while ((counter6 < 3)) {
      counter6 = (counter6 + 1);
      if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 9))) {
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 7))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((369 << 6) | (i3 << 4)) | (counter6 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 11))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((384 << 6) | (i3 << 4)) | (counter6 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 10))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (((397 << 6) | (i3 << 4)) | (counter6 << 2));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 510
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [7040, 4, 0, 12864, 32768, 0, 13440, 1040, 0, 13440, 1040, 0, 13760, 18724, 0, 13760, 18724, 0, 13760, 18724, 0, 13760, 18724, 0, 13760, 18724, 0, 14720, 32768, 0, 14736, 32768, 0, 19648, 128, 0, 19664, 128, 0, 24580, 66, 0, 24580, 66, 0, 24584, 66, 0, 24584, 66, 0, 24588, 66, 0, 24588, 66, 0, 24596, 66, 0, 24596, 66, 0, 24600, 66, 0, 24600, 66, 0, 24604, 66, 0, 24604, 66, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 7040, 4, 0, 12864, 32768, 0, 13440, 1040, 0, 13440, 1040, 0, 13760, 18724, 0, 13760, 18724, 0, 13760, 18724, 0, 13760, 18724, 0, 13760, 18724, 0, 14720, 32768, 0, 14736, 32768, 0, 19648, 128, 0, 19664, 128, 0, 24580, 66, 0, 24580, 66, 0, 24584, 66, 0, 24584, 66, 0, 24588, 66, 0, 24588, 66, 0, 24596, 66, 0, 24596, 66, 0, 24600, 66, 0, 24600, 66, 0, 24604, 66, 0, 24604, 66, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25412, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25416, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25420, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25428, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25432, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0, 25436, 64527, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
