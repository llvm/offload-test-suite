#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(8));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (13 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (23 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (32 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (37 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 3: {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (44 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (48 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (57 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 14))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((88 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((105 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 12))) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 10))) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((123 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 12))) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((134 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i1 == 1)) {
        continue;
      }
      if ((i1 == 1)) {
        break;
      }
    }
    if ((i0 == 1)) {
      continue;
    }
  }
  if ((WaveGetLaneIndex() == 2)) {
    result = (result + WaveActiveMin(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (150 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((169 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((186 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 4)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((196 << 6) | (counter2 << 4)) | (i3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((205 << 6) | (counter2 << 4)) | (i3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((210 << 6) | (counter2 << 4)) | (i3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 3: {
              if ((WaveGetLaneIndex() < 20)) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((217 << 6) | (counter2 << 4)) | (i3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((221 << 6) | (counter2 << 4)) | (i3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((230 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((239 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (248 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 882
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2816, 34952, 0, 2816, 34952, 0, 2816, 34952, 0, 2816, 34952, 0, 5632, 21505, 0, 5632, 21505, 0, 5632, 21505, 0, 5632, 21505, 0, 5648, 21505, 0, 5648, 21505, 0, 5648, 21505, 0, 5648, 21505, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 7872, 20481, 0, 7872, 20481, 0, 7872, 20481, 0, 7876, 20481, 0, 7876, 20481, 0, 7876, 20481, 0, 7888, 20481, 0, 7888, 20481, 0, 7888, 20481, 0, 7892, 20481, 0, 7892, 20481, 0, 7892, 20481, 0, 8576, 20481, 0, 8576, 20481, 0, 8576, 20481, 0, 8580, 20481, 0, 8580, 20481, 0, 8580, 20481, 0, 8592, 20481, 0, 8592, 20481, 0, 8592, 20481, 0, 8596, 20481, 0, 8596, 20481, 0, 8596, 20481, 0, 9600, 4, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 12560, 17, 0, 12560, 17, 0, 12564, 17, 0, 12564, 17, 0, 12568, 17, 0, 12568, 17, 0, 12576, 17, 0, 12576, 17, 0, 12580, 17, 0, 12580, 17, 0, 12584, 17, 0, 12584, 17, 0, 12592, 17, 0, 12592, 17, 0, 12596, 17, 0, 12596, 17, 0, 12600, 17, 0, 12600, 17, 0, 13456, 17476, 0, 13456, 17476, 0, 13456, 17476, 0, 13456, 17476, 0, 13460, 17476, 0, 13460, 17476, 0, 13460, 17476, 0, 13460, 17476, 0, 13464, 17476, 0, 13464, 17476, 0, 13464, 17476, 0, 13464, 17476, 0, 13472, 17476, 0, 13472, 17476, 0, 13472, 17476, 0, 13472, 17476, 0, 13476, 17476, 0, 13476, 17476, 0, 13476, 17476, 0, 13476, 17476, 0, 13480, 17476, 0, 13480, 17476, 0, 13480, 17476, 0, 13480, 17476, 0, 13488, 17476, 0, 13488, 17476, 0, 13488, 17476, 0, 13488, 17476, 0, 13492, 17476, 0, 13492, 17476, 0, 13492, 17476, 0, 13492, 17476, 0, 13496, 17476, 0, 13496, 17476, 0, 13496, 17476, 0, 13496, 17476, 0, 2816, 34952, 0, 2816, 34952, 0, 2816, 34952, 0, 2816, 34952, 0, 5632, 21505, 0, 5632, 21505, 0, 5632, 21505, 0, 5632, 21505, 0, 5648, 21505, 0, 5648, 21505, 0, 5648, 21505, 0, 5648, 21505, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6720, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6724, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6736, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 6740, 21845, 0, 7872, 20481, 0, 7872, 20481, 0, 7872, 20481, 0, 7876, 20481, 0, 7876, 20481, 0, 7876, 20481, 0, 7888, 20481, 0, 7888, 20481, 0, 7888, 20481, 0, 7892, 20481, 0, 7892, 20481, 0, 7892, 20481, 0, 8576, 20481, 0, 8576, 20481, 0, 8576, 20481, 0, 8580, 20481, 0, 8580, 20481, 0, 8580, 20481, 0, 8592, 20481, 0, 8592, 20481, 0, 8592, 20481, 0, 8596, 20481, 0, 8596, 20481, 0, 8596, 20481, 0, 9600, 4, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10832, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10848, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 10864, 21845, 0, 12560, 17, 0, 12560, 17, 0, 12564, 17, 0, 12564, 17, 0, 12568, 17, 0, 12568, 17, 0, 12576, 17, 0, 12576, 17, 0, 12580, 17, 0, 12580, 17, 0, 12584, 17, 0, 12584, 17, 0, 12592, 17, 0, 12592, 17, 0, 12596, 17, 0, 12596, 17, 0, 12600, 17, 0, 12600, 17, 0, 13456, 17476, 0, 13456, 17476, 0, 13456, 17476, 0, 13456, 17476, 0, 13460, 17476, 0, 13460, 17476, 0, 13460, 17476, 0, 13460, 17476, 0, 13464, 17476, 0, 13464, 17476, 0, 13464, 17476, 0, 13464, 17476, 0, 13472, 17476, 0, 13472, 17476, 0, 13472, 17476, 0, 13472, 17476, 0, 13476, 17476, 0, 13476, 17476, 0, 13476, 17476, 0, 13476, 17476, 0, 13480, 17476, 0, 13480, 17476, 0, 13480, 17476, 0, 13480, 17476, 0, 13488, 17476, 0, 13488, 17476, 0, 13488, 17476, 0, 13488, 17476, 0, 13492, 17476, 0, 13492, 17476, 0, 13492, 17476, 0, 13492, 17476, 0, 13496, 17476, 0, 13496, 17476, 0, 13496, 17476, 0, 13496, 17476, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
