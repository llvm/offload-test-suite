#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() < 1)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((16 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if ((WaveGetLaneIndex() < 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((31 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 8))) {
        if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((49 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 3)) {
          if ((WaveGetLaneIndex() < 4)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((59 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 7)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((66 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((81 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 5)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((88 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i1 == 1)) {
        continue;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 450
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1024, 1, 0, 1040, 1, 0, 1056, 1, 0, 1984, 1, 0, 1988, 1, 0, 1992, 1, 0, 2000, 1, 0, 2004, 1, 0, 2008, 1, 0, 2016, 1, 0, 2020, 1, 0, 2024, 1, 0, 5184, 264, 0, 5184, 264, 0, 5188, 264, 0, 5188, 264, 0, 5192, 264, 0, 5192, 264, 0, 5200, 264, 0, 5200, 264, 0, 5204, 264, 0, 5204, 264, 0, 5208, 264, 0, 5208, 264, 0, 5216, 264, 0, 5216, 264, 0, 5220, 264, 0, 5220, 264, 0, 5224, 264, 0, 5224, 264, 0, 5632, 31, 0, 5632, 31, 0, 5632, 31, 0, 5632, 31, 0, 5632, 31, 0, 5636, 31, 0, 5636, 31, 0, 5636, 31, 0, 5636, 31, 0, 5636, 31, 0, 5640, 31, 0, 5640, 31, 0, 5640, 31, 0, 5640, 31, 0, 5640, 31, 0, 5648, 31, 0, 5648, 31, 0, 5648, 31, 0, 5648, 31, 0, 5648, 31, 0, 5652, 31, 0, 5652, 31, 0, 5652, 31, 0, 5652, 31, 0, 5652, 31, 0, 5656, 31, 0, 5656, 31, 0, 5656, 31, 0, 5656, 31, 0, 5656, 31, 0, 5664, 31, 0, 5664, 31, 0, 5664, 31, 0, 5664, 31, 0, 5664, 31, 0, 5668, 31, 0, 5668, 31, 0, 5668, 31, 0, 5668, 31, 0, 5668, 31, 0, 5672, 31, 0, 5672, 31, 0, 5672, 31, 0, 5672, 31, 0, 5672, 31, 0, 1024, 1, 0, 1040, 1, 0, 1056, 1, 0, 1984, 1, 0, 1988, 1, 0, 1992, 1, 0, 2000, 1, 0, 2004, 1, 0, 2008, 1, 0, 2016, 1, 0, 2020, 1, 0, 2024, 1, 0, 5184, 264, 0, 5184, 264, 0, 5188, 264, 0, 5188, 264, 0, 5192, 264, 0, 5192, 264, 0, 5200, 264, 0, 5200, 264, 0, 5204, 264, 0, 5204, 264, 0, 5208, 264, 0, 5208, 264, 0, 5216, 264, 0, 5216, 264, 0, 5220, 264, 0, 5220, 264, 0, 5224, 264, 0, 5224, 264, 0, 5632, 31, 0, 5632, 31, 0, 5632, 31, 0, 5632, 31, 0, 5632, 31, 0, 5636, 31, 0, 5636, 31, 0, 5636, 31, 0, 5636, 31, 0, 5636, 31, 0, 5640, 31, 0, 5640, 31, 0, 5640, 31, 0, 5640, 31, 0, 5640, 31, 0, 5648, 31, 0, 5648, 31, 0, 5648, 31, 0, 5648, 31, 0, 5648, 31, 0, 5652, 31, 0, 5652, 31, 0, 5652, 31, 0, 5652, 31, 0, 5652, 31, 0, 5656, 31, 0, 5656, 31, 0, 5656, 31, 0, 5656, 31, 0, 5656, 31, 0, 5664, 31, 0, 5664, 31, 0, 5664, 31, 0, 5664, 31, 0, 5664, 31, 0, 5668, 31, 0, 5668, 31, 0, 5668, 31, 0, 5668, 31, 0, 5668, 31, 0, 5672, 31, 0, 5672, 31, 0, 5672, 31, 0, 5672, 31, 0, 5672, 31, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
