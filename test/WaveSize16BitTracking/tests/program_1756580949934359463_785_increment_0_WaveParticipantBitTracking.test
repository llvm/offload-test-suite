#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 12))) {
    if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 11))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (19 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
              if ((WaveGetLaneIndex() == 4)) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((42 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((i0 == 1)) {
                continue;
              }
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (54 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if ((WaveGetLaneIndex() == 10)) {
              if ((WaveGetLaneIndex() == 8)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (66 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
      }
    case 1: {
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() == 8)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((82 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter2 = 0;
          while ((counter2 < 2)) {
            counter2 = (counter2 + 1);
            if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 10))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((100 << 6) | (counter1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 9)) {
            result = (result + WaveActiveMin(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((107 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 10))) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (118 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 234
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 3456, 16, 0, 6420, 40960, 0, 6420, 40960, 0, 6424, 40960, 0, 6424, 40960, 0, 6420, 20481, 0, 6420, 20481, 0, 6420, 20481, 0, 6424, 20481, 0, 6424, 20481, 0, 6424, 20481, 0, 6436, 40960, 0, 6436, 40960, 0, 6440, 40960, 0, 6440, 40960, 0, 6436, 20481, 0, 6436, 20481, 0, 6436, 20481, 0, 6440, 20481, 0, 6440, 20481, 0, 6440, 20481, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 1216, 61471, 0, 3456, 16, 0, 6420, 40960, 0, 6420, 40960, 0, 6424, 40960, 0, 6424, 40960, 0, 6420, 20481, 0, 6420, 20481, 0, 6420, 20481, 0, 6424, 20481, 0, 6424, 20481, 0, 6424, 20481, 0, 6436, 40960, 0, 6436, 40960, 0, 6440, 40960, 0, 6440, 40960, 0, 6436, 20481, 0, 6436, 20481, 0, 6436, 20481, 0, 6440, 20481, 0, 6440, 20481, 0, 6440, 20481, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0, 7552, 61471, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
