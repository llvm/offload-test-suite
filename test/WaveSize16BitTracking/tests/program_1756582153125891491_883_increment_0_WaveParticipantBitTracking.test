#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 14))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((19 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 12))) {
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 13))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((51 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() < 4)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((66 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 1)) {
          break;
        }
      }
    }
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 13))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((80 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 216
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1232, 49153, 0, 1232, 49153, 0, 1232, 49153, 0, 1248, 49153, 0, 1248, 49153, 0, 1248, 49153, 0, 1264, 49153, 0, 1264, 49153, 0, 1264, 49153, 0, 3280, 8, 0, 3296, 8, 0, 3312, 8, 0, 4240, 8, 0, 4244, 8, 0, 4256, 8, 0, 4260, 8, 0, 4272, 8, 0, 4276, 8, 0, 5136, 57351, 0, 5136, 57351, 0, 5136, 57351, 0, 5136, 57351, 0, 5136, 57351, 0, 5136, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 1232, 49153, 0, 1232, 49153, 0, 1232, 49153, 0, 1248, 49153, 0, 1248, 49153, 0, 1248, 49153, 0, 1264, 49153, 0, 1264, 49153, 0, 1264, 49153, 0, 3280, 8, 0, 3296, 8, 0, 3312, 8, 0, 4240, 8, 0, 4244, 8, 0, 4256, 8, 0, 4260, 8, 0, 4272, 8, 0, 4276, 8, 0, 5136, 57351, 0, 5136, 57351, 0, 5136, 57351, 0, 5136, 57351, 0, 5136, 57351, 0, 5136, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5152, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 5168, 57351, 0, 5168, 57351, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
