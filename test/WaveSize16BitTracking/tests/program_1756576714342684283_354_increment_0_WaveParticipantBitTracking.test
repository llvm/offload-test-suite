#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (16 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 15))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((39 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i0 == 2)) {
            break;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (51 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (56 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (63 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (67 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 11))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (111 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 1)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (105 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 6)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (99 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 15))) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (95 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 2))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((144 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 2))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((170 << 6) | (counter1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 11))) {
            if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 2))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((204 << 6) | (counter1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 12))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((227 << 6) | (counter1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((250 << 6) | (counter1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((273 << 6) | (counter1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter2 == 1)) {
          break;
        }
      }
    }
    break;
  }
  case 1: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 15))) {
          if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 11))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (307 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 14)) {
            if ((WaveGetLaneIndex() >= 11)) {
              result = (result + WaveActiveMax(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (317 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (340 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (351 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 4)) {
          if ((WaveGetLaneIndex() == 6)) {
            result = (result + WaveActiveMax(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (361 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (370 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (375 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (379 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 228
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 4032, 34952, 0, 4032, 34952, 0, 4032, 34952, 0, 4032, 34952, 0, 7104, 2564, 0, 7104, 2564, 0, 7104, 2564, 0, 6720, 2, 0, 6336, 64, 0, 6080, 32769, 0, 6080, 32769, 0, 9232, 4356, 0, 9232, 4356, 0, 9232, 4356, 0, 9248, 4356, 0, 9248, 4356, 0, 9248, 4356, 0, 10900, 1028, 0, 10900, 1028, 0, 10916, 1028, 0, 10916, 1028, 0, 14548, 1, 0, 14564, 1, 0, 16020, 16384, 0, 16036, 16384, 0, 17492, 16384, 0, 17508, 16384, 0, 20288, 32768, 0, 24000, 2080, 0, 24000, 2080, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 3584, 26214, 0, 4032, 34952, 0, 4032, 34952, 0, 4032, 34952, 0, 4032, 34952, 0, 7104, 2564, 0, 7104, 2564, 0, 7104, 2564, 0, 6720, 2, 0, 6336, 64, 0, 6080, 32769, 0, 6080, 32769, 0, 9232, 4356, 0, 9232, 4356, 0, 9232, 4356, 0, 9248, 4356, 0, 9248, 4356, 0, 9248, 4356, 0, 10900, 1028, 0, 10900, 1028, 0, 10916, 1028, 0, 10916, 1028, 0, 14548, 1, 0, 14564, 1, 0, 16020, 16384, 0, 16036, 16384, 0, 17492, 16384, 0, 17508, 16384, 0, 20288, 32768, 0, 24000, 2080, 0, 24000, 2080, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
