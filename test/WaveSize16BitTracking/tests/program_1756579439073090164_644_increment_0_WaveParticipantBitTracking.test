#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 4))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((45 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 1)) {
          if ((WaveGetLaneIndex() >= 14)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((55 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMax(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((78 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          continue;
        }
      }
      break;
    }
  }
  uint counter1 = 0;
  while ((counter1 < 3)) {
    counter1 = (counter1 + 1);
    if (((WaveGetLaneIndex() & 1) == 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((102 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12))) {
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((136 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 11))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((151 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(10));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((160 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 14))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((173 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter2 = 0;
    while ((counter2 < 2)) {
      counter2 = (counter2 + 1);
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((191 << 6) | (counter1 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(8));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((200 << 6) | (counter1 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if ((WaveGetLaneIndex() == 10)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((207 << 6) | (counter1 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if ((counter1 == 2)) {
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 516
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 5201, 0, 1152, 5201, 0, 1152, 5201, 0, 1152, 5201, 0, 1152, 5201, 0, 4992, 2080, 0, 4992, 2080, 0, 5008, 2080, 0, 5008, 2080, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 11088, 16405, 0, 11088, 16405, 0, 11088, 16405, 0, 11088, 16405, 0, 11104, 16405, 0, 11104, 16405, 0, 11104, 16405, 0, 11104, 16405, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 13264, 1024, 0, 13280, 1024, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 5201, 0, 1152, 5201, 0, 1152, 5201, 0, 1152, 5201, 0, 1152, 5201, 0, 4992, 2080, 0, 4992, 2080, 0, 5008, 2080, 0, 5008, 2080, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6544, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 6560, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10256, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 10272, 43690, 0, 11088, 16405, 0, 11088, 16405, 0, 11088, 16405, 0, 11088, 16405, 0, 11104, 16405, 0, 11104, 16405, 0, 11104, 16405, 0, 11104, 16405, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12244, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12248, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12260, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 12264, 21845, 0, 13264, 1024, 0, 13280, 1024, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
