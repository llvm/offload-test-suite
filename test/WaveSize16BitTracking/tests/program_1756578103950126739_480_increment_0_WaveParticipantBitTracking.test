#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() >= 13)) {
          if ((WaveGetLaneIndex() >= 13)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((19 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
            if ((WaveGetLaneIndex() == 14)) {
              result = (result + WaveActiveMax(9));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((34 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 9)) {
              result = (result + WaveActiveSum(9));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((41 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i1 == 2)) {
              break;
            }
          }
          if ((WaveGetLaneIndex() < 7)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((53 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 15))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((70 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 2)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((84 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((101 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((111 << 6) | (counter2 << 4)) | (i3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((120 << 6) | (counter2 << 4)) | (i3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((125 << 6) | (counter2 << 4)) | (i3 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((134 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i3 == 1)) {
            continue;
          }
        }
        if ((WaveGetLaneIndex() == 14)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((146 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (150 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 504
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1232, 16384, 0, 1248, 16384, 0, 2192, 16384, 0, 2196, 16384, 0, 2200, 16384, 0, 2208, 16384, 0, 2212, 16384, 0, 2216, 16384, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 7120, 8, 0, 7124, 8, 0, 7136, 8, 0, 7140, 8, 0, 8016, 2080, 0, 8016, 2080, 0, 8020, 2080, 0, 8020, 2080, 0, 8032, 2080, 0, 8032, 2080, 0, 8036, 2080, 0, 8036, 2080, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 1232, 16384, 0, 1248, 16384, 0, 2192, 16384, 0, 2196, 16384, 0, 2200, 16384, 0, 2208, 16384, 0, 2212, 16384, 0, 2216, 16384, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6480, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6484, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6496, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 6500, 43690, 0, 7120, 8, 0, 7124, 8, 0, 7136, 8, 0, 7140, 8, 0, 8016, 2080, 0, 8016, 2080, 0, 8020, 2080, 0, 8020, 2080, 0, 8032, 2080, 0, 8032, 2080, 0, 8036, 2080, 0, 8036, 2080, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8592, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8596, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8608, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0, 8612, 43690, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
