#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (13 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
      if ((WaveGetLaneIndex() >= 11)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((28 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((44 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((53 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i0 == 1)) {
        continue;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (65 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 12))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (82 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  uint counter2 = 0;
  while ((counter2 < 3)) {
    counter2 = (counter2 + 1);
    if ((WaveGetLaneIndex() >= 12)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((96 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 2)) {
      if ((WaveGetLaneIndex() < 7)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((106 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((WaveGetLaneIndex() == 12)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((113 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 13)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((122 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((WaveGetLaneIndex() >= 9)) {
    result = (result + WaveActiveSum(10));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((129 << 6) | (counter2 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 9))) {
    result = (result + WaveActiveMax(10));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (140 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
            if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 14))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((165 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i3 == 1)) {
              break;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (177 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 11))) {
            if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 15))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (195 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 0)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (202 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (211 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    uint counter4 = 0;
    while ((counter4 < 2)) {
      counter4 = (counter4 + 1);
      if ((WaveGetLaneIndex() == 6)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((227 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter5 = 0;
      while ((counter5 < 3)) {
        counter5 = (counter5 + 1);
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 4))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((249 << 6) | (counter4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((264 << 6) | (counter4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter5 == 2)) {
          break;
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (271 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 636
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 1792, 20480, 0, 1792, 20480, 0, 1808, 20480, 0, 1808, 20480, 0, 1824, 20480, 0, 1824, 20480, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 5248, 512, 0, 6160, 40960, 0, 6160, 40960, 0, 6176, 40960, 0, 6176, 40960, 0, 6192, 40960, 0, 6192, 40960, 0, 6800, 2, 0, 6816, 2, 0, 6832, 2, 0, 7824, 8192, 0, 7840, 8192, 0, 7856, 8192, 0, 8272, 43520, 0, 8272, 43520, 0, 8272, 43520, 0, 8272, 43520, 0, 8288, 43520, 0, 8288, 43520, 0, 8288, 43520, 0, 8288, 43520, 0, 8304, 43520, 0, 8304, 43520, 0, 8304, 43520, 0, 8304, 43520, 0, 8960, 512, 0, 13504, 1040, 0, 13504, 1040, 0, 15956, 2048, 0, 15960, 2048, 0, 15972, 2048, 0, 15976, 2048, 0, 16916, 256, 0, 16920, 256, 0, 16932, 256, 0, 16936, 256, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 832, 21845, 0, 1792, 20480, 0, 1792, 20480, 0, 1808, 20480, 0, 1808, 20480, 0, 1824, 20480, 0, 1824, 20480, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3396, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3400, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3412, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3416, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3428, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 3432, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 4160, 21845, 0, 5248, 512, 0, 6160, 40960, 0, 6160, 40960, 0, 6176, 40960, 0, 6176, 40960, 0, 6192, 40960, 0, 6192, 40960, 0, 6800, 2, 0, 6816, 2, 0, 6832, 2, 0, 7824, 8192, 0, 7840, 8192, 0, 7856, 8192, 0, 8272, 43520, 0, 8272, 43520, 0, 8272, 43520, 0, 8272, 43520, 0, 8288, 43520, 0, 8288, 43520, 0, 8288, 43520, 0, 8288, 43520, 0, 8304, 43520, 0, 8304, 43520, 0, 8304, 43520, 0, 8304, 43520, 0, 8960, 512, 0, 13504, 1040, 0, 13504, 1040, 0, 15956, 2048, 0, 15960, 2048, 0, 15972, 2048, 0, 15976, 2048, 0, 16916, 256, 0, 16920, 256, 0, 16932, 256, 0, 16936, 256, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
