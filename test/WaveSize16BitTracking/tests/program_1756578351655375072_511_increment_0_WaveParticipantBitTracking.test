#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 2)) {
    counter0 = (counter0 + 1);
    if ((WaveGetLaneIndex() == 11)) {
      if ((WaveGetLaneIndex() == 2)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((16 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((26 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((35 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    } else {
    if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 3))) {
      result = (result + WaveActiveMin(7));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((58 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 3))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((81 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 15))) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 11))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((101 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 10))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((112 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((123 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 6)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((142 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 4)) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 13))) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (((165 << 6) | (counter0 << 4)) | (i1 << 2));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 13))) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((180 << 6) | (counter0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  if ((WaveGetLaneIndex() == 5)) {
    if ((WaveGetLaneIndex() == 0)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (190 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 11))) {
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 12))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (208 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 3))) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((239 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if ((WaveGetLaneIndex() == 2)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (248 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 432
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3728, 16681, 0, 3728, 16681, 0, 3728, 16681, 0, 3728, 16681, 0, 3728, 16681, 0, 3744, 16681, 0, 3744, 16681, 0, 3744, 16681, 0, 3744, 16681, 0, 3744, 16681, 0, 5200, 8, 0, 5204, 8, 0, 5216, 8, 0, 5220, 8, 0, 6480, 32769, 0, 6480, 32769, 0, 6484, 32769, 0, 6484, 32769, 0, 6496, 32769, 0, 6496, 32769, 0, 6500, 32769, 0, 6500, 32769, 0, 7184, 32769, 0, 7184, 32769, 0, 7188, 32769, 0, 7188, 32769, 0, 7200, 32769, 0, 7200, 32769, 0, 7204, 32769, 0, 7204, 32769, 0, 7888, 16392, 0, 7888, 16392, 0, 7892, 16392, 0, 7892, 16392, 0, 7904, 16392, 0, 7904, 16392, 0, 7908, 16392, 0, 7908, 16392, 0, 9104, 16704, 0, 9104, 16704, 0, 9104, 16704, 0, 9108, 16704, 0, 9108, 16704, 0, 9108, 16704, 0, 9120, 16704, 0, 9120, 16704, 0, 9120, 16704, 0, 9124, 16704, 0, 9124, 16704, 0, 9124, 16704, 0, 10576, 12312, 0, 10576, 12312, 0, 10576, 12312, 0, 10576, 12312, 0, 10580, 12312, 0, 10580, 12312, 0, 10580, 12312, 0, 10580, 12312, 0, 10592, 12312, 0, 10592, 12312, 0, 10592, 12312, 0, 10592, 12312, 0, 10596, 12312, 0, 10596, 12312, 0, 10596, 12312, 0, 10596, 12312, 0, 11536, 12304, 0, 11536, 12304, 0, 11536, 12304, 0, 11552, 12304, 0, 11552, 12304, 0, 11552, 12304, 0, 3728, 16681, 0, 3728, 16681, 0, 3728, 16681, 0, 3728, 16681, 0, 3728, 16681, 0, 3744, 16681, 0, 3744, 16681, 0, 3744, 16681, 0, 3744, 16681, 0, 3744, 16681, 0, 5200, 8, 0, 5204, 8, 0, 5216, 8, 0, 5220, 8, 0, 6480, 32769, 0, 6480, 32769, 0, 6484, 32769, 0, 6484, 32769, 0, 6496, 32769, 0, 6496, 32769, 0, 6500, 32769, 0, 6500, 32769, 0, 7184, 32769, 0, 7184, 32769, 0, 7188, 32769, 0, 7188, 32769, 0, 7200, 32769, 0, 7200, 32769, 0, 7204, 32769, 0, 7204, 32769, 0, 7888, 16392, 0, 7888, 16392, 0, 7892, 16392, 0, 7892, 16392, 0, 7904, 16392, 0, 7904, 16392, 0, 7908, 16392, 0, 7908, 16392, 0, 9104, 16704, 0, 9104, 16704, 0, 9104, 16704, 0, 9108, 16704, 0, 9108, 16704, 0, 9108, 16704, 0, 9120, 16704, 0, 9120, 16704, 0, 9120, 16704, 0, 9124, 16704, 0, 9124, 16704, 0, 9124, 16704, 0, 10576, 12312, 0, 10576, 12312, 0, 10576, 12312, 0, 10576, 12312, 0, 10580, 12312, 0, 10580, 12312, 0, 10580, 12312, 0, 10580, 12312, 0, 10592, 12312, 0, 10592, 12312, 0, 10592, 12312, 0, 10592, 12312, 0, 10596, 12312, 0, 10596, 12312, 0, 10596, 12312, 0, 10596, 12312, 0, 11536, 12304, 0, 11536, 12304, 0, 11536, 12304, 0, 11552, 12304, 0, 11552, 12304, 0, 11552, 12304, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
