#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((19 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 14)) {
          if ((WaveGetLaneIndex() < 2)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((29 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 11)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((36 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 8))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((51 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((60 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 2)) {
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (72 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((89 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 3)) {
      if ((WaveGetLaneIndex() < 5)) {
        result = (result + WaveActiveSum(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((99 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() >= 13)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((113 << 6) | (i1 << 4)) | (counter2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 8)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((122 << 6) | (i1 << 4)) | (counter2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 1))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((141 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter3 = 0;
    while ((counter3 < 2)) {
      counter3 = (counter3 + 1);
      if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((163 << 6) | (i1 << 4)) | (counter3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 10))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((178 << 6) | (i1 << 4)) | (counter3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMin(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((187 << 6) | (i1 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (205 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 2)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (201 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 456
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2304, 16384, 0, 2320, 16384, 0, 2336, 16384, 0, 3264, 320, 0, 3264, 320, 0, 3280, 320, 0, 3280, 320, 0, 3296, 320, 0, 3296, 320, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 6336, 7, 0, 6336, 7, 0, 6336, 7, 0, 6352, 7, 0, 6352, 7, 0, 6352, 7, 0, 9024, 1056, 0, 9024, 1056, 0, 9040, 1056, 0, 9040, 1056, 0, 10436, 16896, 0, 10436, 16896, 0, 10440, 16896, 0, 10440, 16896, 0, 10452, 16896, 0, 10452, 16896, 0, 10456, 16896, 0, 10456, 16896, 0, 11396, 1280, 0, 11396, 1280, 0, 11400, 1280, 0, 11400, 1280, 0, 11412, 1280, 0, 11412, 1280, 0, 11416, 1280, 0, 11416, 1280, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 12864, 1, 0, 2304, 16384, 0, 2320, 16384, 0, 2336, 16384, 0, 3264, 320, 0, 3264, 320, 0, 3280, 320, 0, 3280, 320, 0, 3296, 320, 0, 3296, 320, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5696, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 5712, 43690, 0, 6336, 7, 0, 6336, 7, 0, 6336, 7, 0, 6352, 7, 0, 6352, 7, 0, 6352, 7, 0, 9024, 1056, 0, 9024, 1056, 0, 9040, 1056, 0, 9040, 1056, 0, 10436, 16896, 0, 10436, 16896, 0, 10440, 16896, 0, 10440, 16896, 0, 10452, 16896, 0, 10452, 16896, 0, 10456, 16896, 0, 10456, 16896, 0, 11396, 1280, 0, 11396, 1280, 0, 11400, 1280, 0, 11400, 1280, 0, 11412, 1280, 0, 11412, 1280, 0, 11416, 1280, 0, 11416, 1280, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11968, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 11984, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 13120, 43690, 0, 12864, 1, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
