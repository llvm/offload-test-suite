#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(32, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (15 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 5)) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 12))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((42 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((59 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 12))) {
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 11))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((77 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 13)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((86 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 7)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((93 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((102 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 7)) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 13))) {
      result = (result + WaveActiveSum(6));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((121 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (130 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (140 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (149 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (154 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (158 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if ((WaveGetLaneIndex() == 8)) {
    if ((WaveGetLaneIndex() == 1)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (168 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 32 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 582
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2688, 5120, 0, 2688, 5120, 0, 2704, 5120, 0, 2704, 5120, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 4928, 20481, 0, 4928, 20481, 0, 4928, 20481, 0, 4932, 20481, 0, 4932, 20481, 0, 4932, 20481, 0, 4944, 20481, 0, 4944, 20481, 0, 4944, 20481, 0, 4948, 20481, 0, 4948, 20481, 0, 4948, 20481, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 7744, 256, 0, 7760, 256, 0, 8960, 73, 0, 8960, 73, 0, 8960, 73, 0, 9536, 1040, 0, 9536, 1040, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 2688, 5120, 0, 2688, 5120, 0, 2704, 5120, 0, 2704, 5120, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3776, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3780, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3792, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 3796, 21845, 0, 4928, 20481, 0, 4928, 20481, 0, 4928, 20481, 0, 4932, 20481, 0, 4932, 20481, 0, 4932, 20481, 0, 4944, 20481, 0, 4944, 20481, 0, 4944, 20481, 0, 4948, 20481, 0, 4948, 20481, 0, 4948, 20481, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6528, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6532, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6544, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 6548, 21845, 0, 7744, 256, 0, 7760, 256, 0, 8960, 73, 0, 8960, 73, 0, 8960, 73, 0, 9536, 1040, 0, 9536, 1040, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0, 9856, 28086, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
