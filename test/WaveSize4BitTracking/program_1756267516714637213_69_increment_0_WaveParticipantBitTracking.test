#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(4, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 3)) || (WaveGetLaneIndex() == 0))) {
      result = (result + WaveActiveSum(7));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((22 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 3))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((41 << 6) | (i0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i1 == 1)) {
        continue;
      }
    }
  }
  if ((WaveGetLaneIndex() < 2)) {
    if ((WaveGetLaneIndex() < 1)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (56 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 2))) {
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 2))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (74 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 2)) || (WaveGetLaneIndex() == 3))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((97 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 3)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 3))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((117 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 2))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((128 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter3 == 2)) {
            break;
          }
        }
      }
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 3))) {
        result = (result + WaveActiveSum(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (142 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 4 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 126
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1408, 11, 0, 1408, 11, 0, 1408, 11, 0, 1424, 11, 0, 1424, 11, 0, 1424, 11, 0, 1440, 11, 0, 1440, 11, 0, 1440, 11, 0, 2624, 9, 0, 2624, 9, 0, 2628, 9, 0, 2628, 9, 0, 2632, 9, 0, 2632, 9, 0, 2640, 9, 0, 2640, 9, 0, 2644, 9, 0, 2644, 9, 0, 2648, 9, 0, 2648, 9, 0, 2656, 9, 0, 2656, 9, 0, 2660, 9, 0, 2660, 9, 0, 2664, 9, 0, 2664, 9, 0, 3584, 1, 0, 4736, 1, 0, 7492, 1, 0, 7496, 1, 0, 7508, 1, 0, 7512, 1, 0, 7524, 1, 0, 7528, 1, 0, 8196, 1, 0, 8200, 1, 0, 8212, 1, 0, 8216, 1, 0, 8228, 1, 0, 8232, 1, 0, 9088, 1, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
