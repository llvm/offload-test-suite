#--- source.hlsl

RWStructuredBuffer<int> Out1 : register(u0);
RWStructuredBuffer<float> Out2 : register(u1);

[numthreads(1,1,1)]
void main() {
  Out1[0] = 20;
  Out1[1] = 30;
  Out1[2] = 40;
  Out1[3] = 50;
  Out2[0] = 1.536;
  Out2[1] = 2.1;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: Out1
    Format: Int32
    Stride: 4
    ZeroInitSize: 16
  - Name: Expected1
    Format: Int32
    Stride: 4
    Data: [ 20, 30, 40, 50 ]
  - Name: Out2
    Format: Float32
    Stride: 4
    ZeroInitSize: 8
  - Name: Expected2
    Format: Float32
    Stride: 4
    Data: [ 1.536, 2.1 ]
Results:
  - Result: Test1
    Rule: BufferExact
    Actual: Out1
    Expected: Expected1
  - Result: Test2
    Rule: BufferExact
    Actual: Out2
    Expected: Expected2
DescriptorSets:
  - Resources:
    - Name: Out1
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out2
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# UNSUPPORTED: Clang-Vulkan
# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
