#--- DescriptorSets.hlsl

#if defined(__spirv__) || defined(__SPIRV__)
#define REGISTER(Idx, Space)
#else
#define REGISTER(Idx, Space) : register(Idx, Space)
#endif

[[vk::binding(0)]] RWBuffer<float4> In REGISTER(u0, space0);
[[vk::binding(1)]] RWBuffer<float4> Out1 REGISTER(u1, space4);
[[vk::binding(0,1)]] RWBuffer<float4> Out2 REGISTER(u2, space4);

[numthreads(1,1,1)]
void main(uint GI : SV_GroupIndex) {
  Out1[GI] = In[GI] * In[GI];
  Out2[GI] = In[GI] * In[GI] * In[GI];
}
//--- DescriptorSets.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Float32
    Channels: 4
    Data: [ 2, 4, 6, 8]
  - Name: Out1
    Format: Float32
    Channels: 4
    ZeroInitSize: 16
  - Name: Out2
    Format: Float32
    Channels: 4
    ZeroInitSize: 16
DescriptorSets:
  - Resources:
    - Name: In
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: Out1
      Kind: RWBuffer
      DirectXBinding:
        Register: 1
        Space: 4
  - Resources:
    - Name: Out2
      Kind: RWBuffer
      DirectXBinding:
        Register: 2
        Space: 4
...
#--- end

# UNSUPPORTED: Clang
# RUN: split-file %s %t

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/DescriptorSets.hlsl
# RUN: %if Metal %{ mv %t.o %t.dxil %}
# RUN: %if Metal %{ metal-shaderconverter %t.dxil -o=%t.o %}
# RUN: %offloader %t/DescriptorSets.yaml %t.o | FileCheck %s

# CHECK: Data:
# CHECK-LABEL: Name: Out1
# CHECK: Data: [ 4, 16, 36, 64 ]
# CHECK-LABEL: Name: Out2
# CHECK: Data: [ 8, 64, 216, 512 ]
