#--- source.hlsl
RWStructuredBuffer<int> Buf : register(u0);
RWStructuredBuffer<int> Zeros : register(u1);
RWStructuredBuffer<int> NegOnes : register(u2);

[numthreads(8,1,1)]
void main(uint3 TID : SV_GroupThreadID) {
  if (TID.x >= 5)
    return;

  Zeros[TID.x] = Buf[TID.x] / Zeros[TID.x];
  NegOnes[TID.x] = Buf[TID.x] / NegOnes[TID.x];
}
//--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: Buf
    Format: Int32
    Stride: 4
    Data: [ 1, -1, 2147483647, 0, -2147483648]
  - Name: Zeros
    Format: Int32
    Stride: 4
    Data: [ 0, 0, 0, 0, 0]
  - Name: NegOnes
    Format: Int32
    Stride: 4
    Data: [ -1, -1, -1, -1, -1]
DescriptorSets:
  - Resources:
    - Name: Buf
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Zeros
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: NegOnes
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# Divide by-zero behavior seems to be erradic enough to call it undefined...

# CHECK: Name: Zeros
# CHECK: Name: NegOnes
# CHECK-NEXT: Format: Int32
# CHECK-NEXT: Stride: 4
# CHECK-NEXT: Data: [ -1, 1, -2147483647, 0

# The last case here is definitly fun UB. -2147483648 / -1 on some GPUs returns
# 2147483647 and on others returns -2147483648.
