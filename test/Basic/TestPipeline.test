#--- source.hlsl
RWBuffer<int> In : register(u0);
RWBuffer<int> Out : register(u1);

[numthreads(8,1,1)]
void main(uint3 TID : SV_GroupThreadID) {
  Out[TID.x] = In[TID.x];
}

//--- pipeline.yaml

---
DispatchSize: [1, 1, 1]
DescriptorSets:
  - Resources:
    - Kind: RWBuffer
      Format: Int32
      Data: [ 1, 2, 3, 4, 5, 6, 7, 8]
      DirectXBinding:
        Register: 0
        Space: 0
    - Kind: RWBuffer
      Format: Int32
      Data: [ 9, 10, 11, 12, 13, 14, 15, 16]
      DirectXBinding:
        Register: 1
        Space: 0
...
#--- end

# UNSUPPORTED: Clang
# RUN: split-file %s %t
# RUN: %if DirectX %{ dxc -T cs_6_0 -Fo %t.dxil %t/source.hlsl %}
# RUN: %if DirectX %{ %offloader %t/pipeline.yaml %t.dxil | FileCheck %s %}
# RUN: %if Vulkan %{ dxc -T cs_6_0 -spirv -Fo %t.spv %t/source.hlsl %}
# RUN: %if Vulkan %{ %offloader %t/pipeline.yaml %t.spv | FileCheck %s %}
# RUN: %if Metal %{ dxc -T cs_6_0 -Fo %t.dxil %t/source.hlsl %}
# RUN: %if Metal %{ metal-shaderconverter %t.dxil -o=%t.metallib %}
# RUN: %if Metal %{ %offloader %t/pipeline.yaml %t.metallib | FileCheck %s %}

# CHECK: Kind: RWBuffer
# CHECK: Format: Int32
# CHECK: Data: [ 1, 2, 3, 4, 5, 6, 7, 8 ]
# CHECK: Kind: RWBuffer
# CHECK: Format: Int32
# CHECK: Data: [ 1, 2, 3, 4, 5, 6, 7, 8 ]
