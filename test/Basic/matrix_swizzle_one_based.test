#--- source.hlsl

RWBuffer<int> In : register(u0);
RWBuffer<int> RowOut : register(u1);
RWBuffer<int> ColOut : register(u2);

[numthreads(4,1,1)]
void main(uint GI : SV_GroupIndex) {
  int4x4 A;
  int4x4 B;
  switch(GI) {
    case 0:
      A._11_12_13_14 = In[GI].xxxx;
      B._11_21_31_41 = In[GI].xxxx;
      break;
    case 1:
      A._21_22_23_24 = In[GI].xxxx;
      B._12_22_32_42 = In[GI].xxxx;
      break;
    case 2:
      A._31_32_33_34 = In[GI].xxxx;
      B._13_23_33_43 = In[GI].xxxx;
      break;
    case 3:
      A._41_42_43_44 = In[GI].xxxx;
      B._14_24_34_44 = In[GI].xxxx;
      break;

  }
  int4 vec1;
  int4 vec2;
  switch(GI) {
    case 0:
      vec1 = A._11_12_13_14;
      vec2 = B._11_21_31_41;
      break;
    case 1:
      vec1 = A._21_22_23_24;
      vec2 = B._12_22_32_42;
      break;
    case 2:
      vec1 = A._31_32_33_34;
      vec2 = B._13_23_33_43;
      break;
    case 3:
      vec1 = A._41_42_43_44;
      vec2 = B._14_24_34_44;
      break;
  }
  for(int i = 0; i < 4; i++) {
    RowOut[GI*4+i] = vec1[i];
    ColOut[i*4+GI] = vec2[i];
  }
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Int32
    Data: [ 1, 2, 3, 4]
  - Name: RowOut
    Format: Int32
    FillSize: 64
  - Name: ColOut
    Format: Int32
    FillSize: 64
  - Name: ExpectedRowOut
    Format: Int32
    Data: [ 1,1,1,1, 2,2,2,2, 3,3,3,3, 4,4,4,4 ]
  - Name: ExpectedColOut
    Format: Int32
    Data: [ 1,2,3,4, 1,2,3,4, 1,2,3,4, 1,2,3,4 ]
Results:
  - Result: RowOut
    Rule: BufferExact
    Actual: RowOut
    Expected: ExpectedRowOut
  - Result: ColOut
    Rule: BufferExact
    Actual: ColOut
    Expected: ExpectedColOut
DescriptorSets:
  - Resources:
    - Name: In
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: RowOut
      Kind: RWBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: ColOut
      Kind: RWBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
...
#--- end

# UNSUPPORTED: Clang
# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
