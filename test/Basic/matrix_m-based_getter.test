#--- source.hlsl

RWBuffer<int> In : register(u0);
RWBuffer<int> Out : register(u1);

[numthreads(1,1,1)]
void main() {
  int2x2 A;

  A._m00 = In[0];
  A._m01 = In[1];
  A._m10 = In[2];
  A._m11 = In[3];

  Out[0] = A._m00;
  Out[1] = A._m01;
  Out[2] = A._m10;
  Out[3] = A._m11; 

}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Int32
    Data: [ 1, 2, 3, 4]
  - Name: Out
    Format: Int32
    Data: [ 1, 2, 3, 4]
DescriptorSets:
  - Resources:
    - Name: In
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWBuffer
      DirectXBinding:

        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# UNSUPPORTED: Clang
# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: Name: In
# CHECK: Format: Int32
# CHECK: Data: [ 1, 2, 3, 4 ]
# CHECK: Name: Out
# CHECK: Format: Int32
# CHECK: Data: [ 1, 2, 3, 4 ]
