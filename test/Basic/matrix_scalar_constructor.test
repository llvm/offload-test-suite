#--- source.hlsl

RWBuffer<int> In : register(u0);
RWBuffer<int> Out : register(u1);

[numthreads(1,1,1)]
void main() {
  float2x3 A = float2x3(In[0], In[1], In[2], 
                        In[3], In[4], In[5]); 
  
  Out[0] = A[0][0];
  Out[1] = A[0][1];
  Out[2] = A[0][2];
  Out[3] = A[1][0];
  Out[4] = A[1][1];
  Out[5] = A[1][2];

}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Int32
    Data: [ 1, 2, 3, 4, 5, 6]
  - Name: Out
    Format: Int32
    Data: [ 1, 2, 3, 4, 5, 6]
DescriptorSets:
  - Resources:
    - Name: In
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# UNSUPPORTED: Clang
# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: Name: In
# CHECK: Format: Int32
# CHECK: Data: [ 1, 2, 3, 4, 5, 6 ]
# CHECK: Name: Out
# CHECK: Format: Int32
# CHECK: Data: [ 1, 2, 3, 4, 5, 6 ]
