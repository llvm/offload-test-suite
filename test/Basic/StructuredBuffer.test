#--- source.hlsl
struct S1 {
  int4 i;
  float4 f;
};
struct S2 {
  float4 f;
  int4 i;
};

StructuredBuffer<S1> In : register(t0);
RWStructuredBuffer<S2> Out : register(u0);

[numthreads(1,1,1)]
void main(uint GI : SV_GroupIndex) {
  Out[GI].f = In[GI].f;
  Out[GI].i = In[GI].i;
}
//--- pipeline.yaml
---
DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Hex32
    Stride: 32
    Data: [0x00000000, 0x00000001, 0x00000002, 0x00000003,
           0x00000000, 0x3f800000, 0x40000000, 0x40400000]
  - Name: Out
    Format: Hex32
    Stride: 32
    ZeroInitSize: 32
DescriptorSets:
  - Resources:
    - Name: In
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
...
#--- end

# RUN: split-file %s %t
# RUN: %if DirectX %{ dxc -T cs_6_0 -Fo %t.dxil %t/source.hlsl %}
# RUN: %if DirectX %{ %offloader %t/pipeline.yaml %t.dxil | FileCheck %s %}
# RUN: %if Vulkan %{ dxc -T cs_6_0 -spirv -fspv-target-env=vulkan1.3 -fvk-use-scalar-layout -Fo %t.spv %t/source.hlsl %}
# RUN: %if Vulkan %{ %offloader %t/pipeline.yaml %t.spv | FileCheck %s %}
# XFAIL: DXC-Vulkan

# RUN: %if Metal %{ dxc -T cs_6_0 -Fo %t.dxil %t/source.hlsl %}
# RUN: %if Metal %{ metal-shaderconverter %t.dxil -o=%t.metallib %}
# RUN: %if Metal %{ %offloader %t/pipeline.yaml %t.metallib | FileCheck %s %}

# CHECK: Name: In
# CHECK: Data: [
# CHECK: 0x0,
# CHECK: 0x1,
# CHECK: 0x2,
# CHECK: 0x3,
# CHECK: 0x0,
# CHECK: 0x3F800000,
# CHECK: 0x40000000,
# CHECK: 0x40400000
# CHECK: ]

# CHECK: Name: Out
# CHECK: Data: [
# CHECK: 0x0,
# CHECK: 0x3F800000,
# CHECK: 0x40000000,
# CHECK: 0x40400000,
# CHECK: 0x0,
# CHECK: 0x1,
# CHECK: 0x2,
# CHECK: 0x3
# CHECK: ]
