#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 24))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((29 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 12)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((46 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() < 15)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((53 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (62 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (67 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (77 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (87 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (96 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (106 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (115 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (120 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 2: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 30))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((138 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23))) {
          for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
            if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 23))) {
              result = (result + WaveActiveMax(10));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((172 << 6) | (counter1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i2 == 1)) {
              continue;
            }
            if ((i2 == 2)) {
              break;
            }
          }
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((197 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 26))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((216 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 408
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1856, 16777224, 0, 1856, 16777224, 0, 1872, 16777224, 0, 1872, 16777224, 0, 2944, 65, 0, 2944, 65, 0, 2960, 65, 0, 2960, 65, 0, 3392, 585, 0, 3392, 585, 0, 3392, 585, 0, 3392, 585, 0, 3408, 585, 0, 3408, 585, 0, 3408, 585, 0, 3408, 585, 0, 3968, 272696336, 0, 3968, 272696336, 0, 3968, 272696336, 0, 3968, 272696336, 0, 3968, 272696336, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4928, 73, 0, 4928, 73, 0, 4928, 73, 0, 6144, 272696336, 0, 6144, 272696336, 0, 6144, 272696336, 0, 6144, 272696336, 0, 6144, 272696336, 0, 11024, 8388608, 0, 11028, 8388608, 0, 11032, 8388608, 0, 11040, 8388608, 0, 11044, 8388608, 0, 11048, 8388608, 0, 11056, 8388608, 0, 11060, 8388608, 0, 11064, 8388608, 0, 12624, 8388608, 0, 12640, 8388608, 0, 12656, 8388608, 0, 13840, 67110912, 0, 13840, 67110912, 0, 13856, 67110912, 0, 13856, 67110912, 0, 13872, 67110912, 0, 13872, 67110912, 0, 1856, 16777224, 0, 1856, 16777224, 0, 1872, 16777224, 0, 1872, 16777224, 0, 2944, 65, 0, 2944, 65, 0, 2960, 65, 0, 2960, 65, 0, 3392, 585, 0, 3392, 585, 0, 3392, 585, 0, 3392, 585, 0, 3408, 585, 0, 3408, 585, 0, 3408, 585, 0, 3408, 585, 0, 3968, 272696336, 0, 3968, 272696336, 0, 3968, 272696336, 0, 3968, 272696336, 0, 3968, 272696336, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4288, 3067833782, 0, 4928, 73, 0, 4928, 73, 0, 4928, 73, 0, 6144, 272696336, 0, 6144, 272696336, 0, 6144, 272696336, 0, 6144, 272696336, 0, 6144, 272696336, 0, 11024, 8388608, 0, 11028, 8388608, 0, 11032, 8388608, 0, 11040, 8388608, 0, 11044, 8388608, 0, 11048, 8388608, 0, 11056, 8388608, 0, 11060, 8388608, 0, 11064, 8388608, 0, 12624, 8388608, 0, 12640, 8388608, 0, 12656, 8388608, 0, 13840, 67110912, 0, 13840, 67110912, 0, 13856, 67110912, 0, 13856, 67110912, 0, 13872, 67110912, 0, 13872, 67110912, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
