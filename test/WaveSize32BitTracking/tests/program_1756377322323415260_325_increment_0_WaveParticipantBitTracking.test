#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 29))) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((32 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((48 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 26))) {
            if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 31))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((74 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((83 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 27))) {
        if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 29))) {
          if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 19))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (116 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter2 = 0;
          while ((counter2 < 3)) {
            counter2 = (counter2 + 1);
            if ((WaveGetLaneIndex() == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((130 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (149 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  }
  for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((166 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 27))) {
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 26))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((184 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
        if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((215 << 6) | (i3 << 4)) | (i4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
          if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((((246 << 6) | (i3 << 4)) | (i4 << 2)) | i5);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 4))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((((271 << 6) | (i3 << 4)) | (i4 << 2)) | i5);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((282 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (292 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (301 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1074
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 2048, 524304, 0, 2048, 524304, 0, 2064, 524304, 0, 2064, 524304, 0, 2080, 524304, 0, 2080, 524304, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 5316, 272696336, 0, 5316, 272696336, 0, 5316, 272696336, 0, 5316, 272696336, 0, 5316, 272696336, 0, 5320, 272696336, 0, 5320, 272696336, 0, 5320, 272696336, 0, 5320, 272696336, 0, 5320, 272696336, 0, 5332, 272696336, 0, 5332, 272696336, 0, 5332, 272696336, 0, 5332, 272696336, 0, 5332, 272696336, 0, 5336, 272696336, 0, 5336, 272696336, 0, 5336, 272696336, 0, 5336, 272696336, 0, 5336, 272696336, 0, 5348, 272696336, 0, 5348, 272696336, 0, 5348, 272696336, 0, 5348, 272696336, 0, 5348, 272696336, 0, 5352, 272696336, 0, 5352, 272696336, 0, 5352, 272696336, 0, 5352, 272696336, 0, 5352, 272696336, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 15744, 2147483648, 0, 15745, 2147483648, 0, 15746, 2147483648, 0, 15748, 2147483648, 0, 15749, 2147483648, 0, 15750, 2147483648, 0, 15760, 2147483648, 0, 15761, 2147483648, 0, 15762, 2147483648, 0, 15764, 2147483648, 0, 15765, 2147483648, 0, 15766, 2147483648, 0, 17344, 1, 0, 17345, 1, 0, 17346, 1, 0, 17348, 1, 0, 17349, 1, 0, 17350, 1, 0, 17360, 1, 0, 17361, 1, 0, 17362, 1, 0, 17364, 1, 0, 17365, 1, 0, 17366, 1, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18688, 85, 0, 18688, 85, 0, 18688, 85, 0, 18688, 85, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 2048, 524304, 0, 2048, 524304, 0, 2064, 524304, 0, 2064, 524304, 0, 2080, 524304, 0, 2080, 524304, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3076, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3080, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3092, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3096, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3108, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 3112, 2181570690, 0, 5316, 272696336, 0, 5316, 272696336, 0, 5316, 272696336, 0, 5316, 272696336, 0, 5316, 272696336, 0, 5320, 272696336, 0, 5320, 272696336, 0, 5320, 272696336, 0, 5320, 272696336, 0, 5320, 272696336, 0, 5332, 272696336, 0, 5332, 272696336, 0, 5332, 272696336, 0, 5332, 272696336, 0, 5332, 272696336, 0, 5336, 272696336, 0, 5336, 272696336, 0, 5336, 272696336, 0, 5336, 272696336, 0, 5336, 272696336, 0, 5348, 272696336, 0, 5348, 272696336, 0, 5348, 272696336, 0, 5348, 272696336, 0, 5348, 272696336, 0, 5352, 272696336, 0, 5352, 272696336, 0, 5352, 272696336, 0, 5352, 272696336, 0, 5352, 272696336, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10624, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 10640, 1431655765, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11776, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 11792, 4160749569, 0, 15744, 2147483648, 0, 15745, 2147483648, 0, 15746, 2147483648, 0, 15748, 2147483648, 0, 15749, 2147483648, 0, 15750, 2147483648, 0, 15760, 2147483648, 0, 15761, 2147483648, 0, 15762, 2147483648, 0, 15764, 2147483648, 0, 15765, 2147483648, 0, 15766, 2147483648, 0, 17344, 1, 0, 17345, 1, 0, 17346, 1, 0, 17348, 1, 0, 17349, 1, 0, 17350, 1, 0, 17360, 1, 0, 17361, 1, 0, 17362, 1, 0, 17364, 1, 0, 17365, 1, 0, 17366, 1, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18048, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18064, 1431655765, 0, 18688, 85, 0, 18688, 85, 0, 18688, 85, 0, 18688, 85, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
