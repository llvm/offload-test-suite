#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 27))) {
    if ((WaveGetLaneIndex() == 17)) {
      if ((WaveGetLaneIndex() == 15)) {
        result = (result + WaveActiveMax(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (16 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (26 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (35 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (40 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (47 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (51 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((WaveGetLaneIndex() == 30)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (60 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (71 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (100 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 22))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (94 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 28)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (90 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 210
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 4544, 3758096639, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6400, 1431655765, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0, 6016, 2860515370, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
