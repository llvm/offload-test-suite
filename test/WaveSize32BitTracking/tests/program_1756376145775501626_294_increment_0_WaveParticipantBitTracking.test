#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 24))) {
            if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 21))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (23 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() >= 19)) {
              if ((WaveGetLaneIndex() >= 20)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (35 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() < 14)) {
                result = (result + WaveActiveMin(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (42 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 23))) {
              result = (result + WaveActiveSum(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (53 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveMax(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (68 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
            if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 25))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((95 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 20))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((110 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 11))) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (133 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if ((WaveGetLaneIndex() == 6)) {
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 30))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((162 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 23))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((177 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (182 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 22))) {
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 28))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (208 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 21))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((230 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((244 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 6))) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((259 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter2 == 2)) {
          break;
        }
      }
      if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 17))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (273 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 27))) {
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (290 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (299 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (303 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 25))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (314 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 25)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (321 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  }
  if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
    if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 30))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (341 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 21))) {
      if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 24))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (361 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter3 = 0;
          while ((counter3 < 3)) {
            counter3 = (counter3 + 1);
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((382 << 6) | (counter3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if ((WaveGetLaneIndex() >= 20)) {
            if ((WaveGetLaneIndex() < 4)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (394 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (399 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (403 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
    }
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 21))) {
      result = (result + WaveActiveMin(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (414 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 27))) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (425 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 28))) {
    result = (result + WaveActiveSum(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (444 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (454 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter4 = 0;
      while ((counter4 < 2)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 22))) {
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 30))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((479 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() >= 28)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((486 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 18)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((493 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 2: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((513 << 6) | (i5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i5 == 1)) {
            break;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (530 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if ((WaveGetLaneIndex() >= 21)) {
          if ((WaveGetLaneIndex() >= 29)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (540 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 17)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (547 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (551 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 402
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1472, 1090519105, 0, 1472, 1090519105, 0, 1472, 1090519105, 0, 1472, 1090519105, 0, 2240, 1090519040, 0, 2240, 1090519040, 0, 3392, 1090519041, 0, 3392, 1090519041, 0, 3392, 1090519041, 0, 11648, 68174084, 0, 11648, 68174084, 0, 11648, 68174084, 0, 11648, 68174084, 0, 11648, 68174084, 0, 20096, 2818572290, 0, 20096, 2818572290, 0, 20096, 2818572290, 0, 20096, 2818572290, 0, 20544, 33554432, 0, 21824, 3221225479, 0, 21824, 3221225479, 0, 21824, 3221225479, 0, 21824, 3221225479, 0, 21824, 3221225479, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 24464, 1073741889, 0, 24464, 1073741889, 0, 24464, 1073741889, 0, 24480, 1073741889, 0, 24480, 1073741889, 0, 24480, 1073741889, 0, 24496, 1073741889, 0, 24496, 1073741889, 0, 24496, 1073741889, 0, 25536, 536870948, 0, 25536, 536870948, 0, 25536, 536870948, 0, 26496, 3758096387, 0, 26496, 3758096387, 0, 26496, 3758096387, 0, 26496, 3758096387, 0, 26496, 3758096387, 0, 27200, 134217728, 0, 28416, 269484288, 0, 28416, 269484288, 0, 28416, 269484288, 0, 29056, 73, 0, 29056, 73, 0, 29056, 73, 0, 30672, 2147483650, 0, 30672, 2147483650, 0, 30688, 2147483650, 0, 30688, 2147483650, 0, 31568, 524288, 0, 31584, 524288, 0, 34560, 536870912, 0, 35008, 612368384, 0, 35008, 612368384, 0, 35008, 612368384, 0, 1472, 1090519105, 0, 1472, 1090519105, 0, 1472, 1090519105, 0, 1472, 1090519105, 0, 2240, 1090519040, 0, 2240, 1090519040, 0, 3392, 1090519041, 0, 3392, 1090519041, 0, 3392, 1090519041, 0, 11648, 68174084, 0, 11648, 68174084, 0, 11648, 68174084, 0, 11648, 68174084, 0, 11648, 68174084, 0, 20096, 2818572290, 0, 20096, 2818572290, 0, 20096, 2818572290, 0, 20096, 2818572290, 0, 20544, 33554432, 0, 21824, 3221225479, 0, 21824, 3221225479, 0, 21824, 3221225479, 0, 21824, 3221225479, 0, 21824, 3221225479, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 23104, 3758096447, 0, 24464, 1073741889, 0, 24464, 1073741889, 0, 24464, 1073741889, 0, 24480, 1073741889, 0, 24480, 1073741889, 0, 24480, 1073741889, 0, 24496, 1073741889, 0, 24496, 1073741889, 0, 24496, 1073741889, 0, 25536, 536870948, 0, 25536, 536870948, 0, 25536, 536870948, 0, 26496, 3758096387, 0, 26496, 3758096387, 0, 26496, 3758096387, 0, 26496, 3758096387, 0, 26496, 3758096387, 0, 27200, 134217728, 0, 28416, 269484288, 0, 28416, 269484288, 0, 28416, 269484288, 0, 29056, 73, 0, 29056, 73, 0, 29056, 73, 0, 30672, 2147483650, 0, 30672, 2147483650, 0, 30688, 2147483650, 0, 30688, 2147483650, 0, 31568, 524288, 0, 31584, 524288, 0, 34560, 536870912, 0, 35008, 612368384, 0, 35008, 612368384, 0, 35008, 612368384, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
