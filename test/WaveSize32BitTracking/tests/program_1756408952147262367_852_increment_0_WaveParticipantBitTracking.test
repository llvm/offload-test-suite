#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 2)) {
            if ((WaveGetLaneIndex() == 27)) {
              result = (result + WaveActiveMax(10));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (15 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 30)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (22 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (31 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((56 << 6) | (i0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveMin(7));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((65 << 6) | (i0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((i1 == 2)) {
                break;
              }
            }
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 31))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((79 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 26))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((98 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 25)) {
          if ((WaveGetLaneIndex() >= 23)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((108 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
            if ((WaveGetLaneIndex() >= 26)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((125 << 6) | (i2 << 4)) | (i3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i3 == 2)) {
              break;
            }
          }
          if ((WaveGetLaneIndex() >= 28)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((135 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 31))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((146 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 23)) {
          if ((WaveGetLaneIndex() >= 29)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((158 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 16)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((165 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 30))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((176 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        continue;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (184 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (198 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (207 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 15)) {
        if ((WaveGetLaneIndex() < 12)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (222 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 29))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (233 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if ((WaveGetLaneIndex() == 10)) {
          result = (result + WaveActiveMax(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((247 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 23))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (258 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 23))) {
      if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 5))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (298 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 28))) {
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 26))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (318 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 7))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (341 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
      if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 25))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((368 << 6) | (i5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 10))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((391 << 6) | (i5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i5 == 1)) {
        break;
      }
    }
    if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 27))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (413 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  case 2: {
    uint counter6 = 0;
    while ((counter6 < 2)) {
      counter6 = (counter6 + 1);
      if ((WaveGetLaneIndex() == 6)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((427 << 6) | (counter6 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 1))) {
        if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 0))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((453 << 6) | (counter6 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 29))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((472 << 6) | (counter6 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 11)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((479 << 6) | (counter6 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (486 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (490 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if (((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 30))) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (501 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 594
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [6272, 16, 0, 6288, 16, 0, 6304, 16, 0, 6912, 2449473536, 0, 6912, 2449473536, 0, 6912, 2449473536, 0, 6928, 2449473536, 0, 6928, 2449473536, 0, 6928, 2449473536, 0, 6944, 2449473536, 0, 6944, 2449473536, 0, 6944, 2449473536, 0, 8000, 2415919104, 0, 8000, 2415919104, 0, 8004, 2415919104, 0, 8004, 2415919104, 0, 8008, 2415919104, 0, 8008, 2415919104, 0, 8016, 2415919104, 0, 8016, 2415919104, 0, 8020, 2415919104, 0, 8020, 2415919104, 0, 8024, 2415919104, 0, 8024, 2415919104, 0, 8032, 2415919104, 0, 8032, 2415919104, 0, 8036, 2415919104, 0, 8036, 2415919104, 0, 8040, 2415919104, 0, 8040, 2415919104, 0, 8640, 2415919104, 0, 8640, 2415919104, 0, 8656, 2415919104, 0, 8656, 2415919104, 0, 8672, 2415919104, 0, 8672, 2415919104, 0, 9344, 18, 0, 9344, 18, 0, 9360, 18, 0, 9360, 18, 0, 9376, 18, 0, 9376, 18, 0, 11264, 128, 0, 11280, 128, 0, 11296, 128, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 23552, 33554432, 0, 23568, 33554432, 0, 26432, 2097152, 0, 30224, 536879104, 0, 30224, 536879104, 0, 30240, 536879104, 0, 30240, 536879104, 0, 31104, 559240, 0, 31104, 559240, 0, 31104, 559240, 0, 31104, 559240, 0, 31104, 559240, 0, 6272, 16, 0, 6288, 16, 0, 6304, 16, 0, 6912, 2449473536, 0, 6912, 2449473536, 0, 6912, 2449473536, 0, 6928, 2449473536, 0, 6928, 2449473536, 0, 6928, 2449473536, 0, 6944, 2449473536, 0, 6944, 2449473536, 0, 6944, 2449473536, 0, 8000, 2415919104, 0, 8000, 2415919104, 0, 8004, 2415919104, 0, 8004, 2415919104, 0, 8008, 2415919104, 0, 8008, 2415919104, 0, 8016, 2415919104, 0, 8016, 2415919104, 0, 8020, 2415919104, 0, 8020, 2415919104, 0, 8024, 2415919104, 0, 8024, 2415919104, 0, 8032, 2415919104, 0, 8032, 2415919104, 0, 8036, 2415919104, 0, 8036, 2415919104, 0, 8040, 2415919104, 0, 8040, 2415919104, 0, 8640, 2415919104, 0, 8640, 2415919104, 0, 8656, 2415919104, 0, 8656, 2415919104, 0, 8672, 2415919104, 0, 8672, 2415919104, 0, 9344, 18, 0, 9344, 18, 0, 9360, 18, 0, 9360, 18, 0, 9376, 18, 0, 9376, 18, 0, 11264, 128, 0, 11280, 128, 0, 11296, 128, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 11776, 613566756, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 12672, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 13248, 1431655765, 0, 23552, 33554432, 0, 23568, 33554432, 0, 26432, 2097152, 0, 30224, 536879104, 0, 30224, 536879104, 0, 30240, 536879104, 0, 30240, 536879104, 0, 31104, 559240, 0, 31104, 559240, 0, 31104, 559240, 0, 31104, 559240, 0, 31104, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
