#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 1)) {
    if ((WaveGetLaneIndex() == 25)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (11 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((34 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((43 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 18))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((54 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter0 == 2)) {
        break;
      }
    }
    if ((WaveGetLaneIndex() == 6)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (64 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() == 18)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((82 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((89 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (98 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 28))) {
        if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 19))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (120 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (127 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (131 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (145 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() >= 20)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((160 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
        if ((WaveGetLaneIndex() < 3)) {
          if ((WaveGetLaneIndex() >= 18)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((178 << 6) | (i3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((197 << 6) | (i3 << 4)) | (i4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((214 << 6) | (i3 << 4)) | (i4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 12)) {
        result = (result + WaveActiveSum(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((221 << 6) | (i3 << 4)) | (i4 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i4 == 1)) {
        break;
      }
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 384
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5696, 256, 0, 5712, 256, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 12608, 134217728, 0, 12612, 134217728, 0, 12624, 134217728, 0, 12628, 134217728, 0, 12640, 134217728, 0, 12644, 134217728, 0, 13696, 33554464, 0, 13696, 33554464, 0, 13700, 33554464, 0, 13700, 33554464, 0, 13712, 33554464, 0, 13712, 33554464, 0, 13716, 33554464, 0, 13716, 33554464, 0, 13728, 33554464, 0, 13728, 33554464, 0, 13732, 33554464, 0, 13732, 33554464, 0, 5696, 256, 0, 5712, 256, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 8128, 838860, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 9280, 2863311530, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10240, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10256, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 10272, 2862612480, 0, 12608, 134217728, 0, 12612, 134217728, 0, 12624, 134217728, 0, 12628, 134217728, 0, 12640, 134217728, 0, 12644, 134217728, 0, 13696, 33554464, 0, 13696, 33554464, 0, 13700, 33554464, 0, 13700, 33554464, 0, 13712, 33554464, 0, 13712, 33554464, 0, 13716, 33554464, 0, 13716, 33554464, 0, 13728, 33554464, 0, 13728, 33554464, 0, 13732, 33554464, 0, 13732, 33554464, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
