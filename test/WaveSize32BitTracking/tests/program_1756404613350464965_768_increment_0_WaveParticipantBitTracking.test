#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (19 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter0 = 0;
          while ((counter0 < 2)) {
            counter0 = (counter0 + 1);
            if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 7))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((45 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if ((WaveGetLaneIndex() == 5)) {
            if ((WaveGetLaneIndex() == 16)) {
              result = (result + WaveActiveSum(7));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (55 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (60 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((85 << 6) | (counter1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter1 == 2)) {
          break;
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (98 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (107 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (117 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (126 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 618
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 1216, 1, 0, 2896, 33619968, 0, 2896, 33619968, 0, 2912, 33619968, 0, 2912, 33619968, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 6272, 85, 0, 6272, 85, 0, 6272, 85, 0, 6272, 85, 0, 7488, 85, 0, 7488, 85, 0, 7488, 85, 0, 7488, 85, 0, 576, 17, 0, 576, 17, 0, 1216, 1, 0, 2896, 33619968, 0, 2896, 33619968, 0, 2912, 33619968, 0, 2912, 33619968, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 3840, 2004318071, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5460, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5464, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5476, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 5480, 1431655765, 0, 6272, 85, 0, 6272, 85, 0, 6272, 85, 0, 6272, 85, 0, 7488, 85, 0, 7488, 85, 0, 7488, 85, 0, 7488, 85, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
