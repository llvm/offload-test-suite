#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 27))) {
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((27 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 23)) {
        result = (result + WaveActiveMax(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((34 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  uint counter1 = 0;
  while ((counter1 < 3)) {
    counter1 = (counter1 + 1);
    if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 29))) {
      result = (result + WaveActiveMin(5));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((60 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 26))) {
      if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((78 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 18))) {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 21))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((108 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 24))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((131 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            continue;
          }
        }
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((149 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 31))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((162 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 28))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((173 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 372
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1744, 134217728, 0, 1760, 134217728, 0, 3856, 537010240, 0, 3856, 537010240, 0, 3856, 537010240, 0, 3856, 537010240, 0, 3872, 537010240, 0, 3872, 537010240, 0, 3872, 537010240, 0, 3872, 537010240, 0, 3888, 537010240, 0, 3888, 537010240, 0, 3888, 537010240, 0, 3888, 537010240, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 1744, 134217728, 0, 1760, 134217728, 0, 3856, 537010240, 0, 3856, 537010240, 0, 3856, 537010240, 0, 3856, 537010240, 0, 3872, 537010240, 0, 3872, 537010240, 0, 3872, 537010240, 0, 3872, 537010240, 0, 3888, 537010240, 0, 3888, 537010240, 0, 3888, 537010240, 0, 3888, 537010240, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5008, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5024, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 5040, 3758096447, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10384, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10400, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0, 10416, 2147483711, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
