#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 23))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (36 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 24)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (30 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 29)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (24 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if ((WaveGetLaneIndex() == 1)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((58 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 8)) {
        if ((WaveGetLaneIndex() == 29)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((68 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 9)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((75 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 24))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((94 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 27))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((113 << 6) | (counter0 << 4)) | (i1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 3)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (((120 << 6) | (counter0 << 4)) | (i1 << 2));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 29))) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((131 << 6) | (counter0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 714
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2304, 545261632, 0, 2304, 545261632, 0, 2304, 545261632, 0, 2304, 545261632, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 3728, 2, 0, 3732, 2, 0, 3736, 2, 0, 3744, 2, 0, 3748, 2, 0, 3752, 2, 0, 3760, 2, 0, 3764, 2, 0, 3768, 2, 0, 6032, 18907200, 0, 6032, 18907200, 0, 6032, 18907200, 0, 6032, 18907200, 0, 6036, 18907200, 0, 6036, 18907200, 0, 6036, 18907200, 0, 6036, 18907200, 0, 6040, 18907200, 0, 6040, 18907200, 0, 6040, 18907200, 0, 6040, 18907200, 0, 6048, 18907200, 0, 6048, 18907200, 0, 6048, 18907200, 0, 6048, 18907200, 0, 6052, 18907200, 0, 6052, 18907200, 0, 6052, 18907200, 0, 6052, 18907200, 0, 6056, 18907200, 0, 6056, 18907200, 0, 6056, 18907200, 0, 6056, 18907200, 0, 6064, 18907200, 0, 6064, 18907200, 0, 6064, 18907200, 0, 6064, 18907200, 0, 6068, 18907200, 0, 6068, 18907200, 0, 6068, 18907200, 0, 6068, 18907200, 0, 6072, 18907200, 0, 6072, 18907200, 0, 6072, 18907200, 0, 6072, 18907200, 0, 7248, 134758401, 0, 7248, 134758401, 0, 7248, 134758401, 0, 7248, 134758401, 0, 7252, 134758401, 0, 7252, 134758401, 0, 7252, 134758401, 0, 7252, 134758401, 0, 7256, 134758401, 0, 7256, 134758401, 0, 7256, 134758401, 0, 7256, 134758401, 0, 7264, 134758401, 0, 7264, 134758401, 0, 7264, 134758401, 0, 7264, 134758401, 0, 7268, 134758401, 0, 7268, 134758401, 0, 7268, 134758401, 0, 7268, 134758401, 0, 7272, 134758401, 0, 7272, 134758401, 0, 7272, 134758401, 0, 7272, 134758401, 0, 7280, 134758401, 0, 7280, 134758401, 0, 7280, 134758401, 0, 7280, 134758401, 0, 7284, 134758401, 0, 7284, 134758401, 0, 7284, 134758401, 0, 7284, 134758401, 0, 7288, 134758401, 0, 7288, 134758401, 0, 7288, 134758401, 0, 7288, 134758401, 0, 7696, 8, 0, 7700, 8, 0, 7704, 8, 0, 7712, 8, 0, 7716, 8, 0, 7720, 8, 0, 7728, 8, 0, 7732, 8, 0, 7736, 8, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 2304, 545261632, 0, 2304, 545261632, 0, 2304, 545261632, 0, 2304, 545261632, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 1920, 3741319168, 0, 3728, 2, 0, 3732, 2, 0, 3736, 2, 0, 3744, 2, 0, 3748, 2, 0, 3752, 2, 0, 3760, 2, 0, 3764, 2, 0, 3768, 2, 0, 6032, 18907200, 0, 6032, 18907200, 0, 6032, 18907200, 0, 6032, 18907200, 0, 6036, 18907200, 0, 6036, 18907200, 0, 6036, 18907200, 0, 6036, 18907200, 0, 6040, 18907200, 0, 6040, 18907200, 0, 6040, 18907200, 0, 6040, 18907200, 0, 6048, 18907200, 0, 6048, 18907200, 0, 6048, 18907200, 0, 6048, 18907200, 0, 6052, 18907200, 0, 6052, 18907200, 0, 6052, 18907200, 0, 6052, 18907200, 0, 6056, 18907200, 0, 6056, 18907200, 0, 6056, 18907200, 0, 6056, 18907200, 0, 6064, 18907200, 0, 6064, 18907200, 0, 6064, 18907200, 0, 6064, 18907200, 0, 6068, 18907200, 0, 6068, 18907200, 0, 6068, 18907200, 0, 6068, 18907200, 0, 6072, 18907200, 0, 6072, 18907200, 0, 6072, 18907200, 0, 6072, 18907200, 0, 7248, 134758401, 0, 7248, 134758401, 0, 7248, 134758401, 0, 7248, 134758401, 0, 7252, 134758401, 0, 7252, 134758401, 0, 7252, 134758401, 0, 7252, 134758401, 0, 7256, 134758401, 0, 7256, 134758401, 0, 7256, 134758401, 0, 7256, 134758401, 0, 7264, 134758401, 0, 7264, 134758401, 0, 7264, 134758401, 0, 7264, 134758401, 0, 7268, 134758401, 0, 7268, 134758401, 0, 7268, 134758401, 0, 7268, 134758401, 0, 7272, 134758401, 0, 7272, 134758401, 0, 7272, 134758401, 0, 7272, 134758401, 0, 7280, 134758401, 0, 7280, 134758401, 0, 7280, 134758401, 0, 7280, 134758401, 0, 7284, 134758401, 0, 7284, 134758401, 0, 7284, 134758401, 0, 7284, 134758401, 0, 7288, 134758401, 0, 7288, 134758401, 0, 7288, 134758401, 0, 7288, 134758401, 0, 7696, 8, 0, 7700, 8, 0, 7704, 8, 0, 7712, 8, 0, 7716, 8, 0, 7720, 8, 0, 7728, 8, 0, 7732, 8, 0, 7736, 8, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8400, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8416, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0, 8432, 3758096391, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
