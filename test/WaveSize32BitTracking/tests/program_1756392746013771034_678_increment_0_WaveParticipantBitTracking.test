#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 20)) {
    if ((WaveGetLaneIndex() == 26)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (19 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (28 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() < 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((43 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((WaveGetLaneIndex() < 4)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((59 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    }
  } else {
  if ((WaveGetLaneIndex() == 0)) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (66 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
    if ((WaveGetLaneIndex() == 5)) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((81 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() == 19)) {
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((101 << 6) | (i2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 23))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((112 << 6) | (i2 << 4)) | (i3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 10)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((119 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  if ((WaveGetLaneIndex() == 13)) {
    if ((WaveGetLaneIndex() == 22)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (129 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() >= 24)) {
      if ((WaveGetLaneIndex() < 5)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (139 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 14)) {
        if ((WaveGetLaneIndex() >= 16)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (149 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 29)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (156 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if ((WaveGetLaneIndex() == 17)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (163 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  uint counter4 = 0;
  while ((counter4 < 2)) {
    counter4 = (counter4 + 1);
    if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 16))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((181 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((195 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 24))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((216 << 6) | (counter4 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 11))) {
          if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 4))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((252 << 6) | (counter4 << 4)) | (i5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((267 << 6) | (counter4 << 4)) | (i5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i5 == 1)) {
          continue;
        }
      }
    }
    if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 25))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((287 << 6) | (counter4 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1134
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4224, 1, 0, 5184, 32, 0, 5200, 32, 0, 5216, 32, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7616, 1024, 0, 7632, 1024, 0, 7648, 1024, 0, 11600, 65600, 0, 11600, 65600, 0, 11616, 65600, 0, 11616, 65600, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 18384, 33558530, 0, 18384, 33558530, 0, 18384, 33558530, 0, 18400, 33558530, 0, 18400, 33558530, 0, 18400, 33558530, 0, 4224, 1, 0, 5184, 32, 0, 5200, 32, 0, 5216, 32, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7168, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7172, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7184, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7188, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7200, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7204, 4286579199, 0, 7616, 1024, 0, 7632, 1024, 0, 7648, 1024, 0, 11600, 65600, 0, 11600, 65600, 0, 11616, 65600, 0, 11616, 65600, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12496, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 12512, 2863311530, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13840, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13844, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13856, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 13860, 2852126890, 0, 18384, 33558530, 0, 18384, 33558530, 0, 18384, 33558530, 0, 18400, 33558530, 0, 18400, 33558530, 0, 18400, 33558530, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
