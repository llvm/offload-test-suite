#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 29))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((18 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 21)) {
      if ((WaveGetLaneIndex() == 26)) {
        result = (result + WaveActiveMin(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((28 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() >= 26)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((44 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 27)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((51 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 21))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((62 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (72 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 20))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((96 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 10))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((127 << 6) | (counter2 << 4)) | (i3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (132 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (139 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (143 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 270
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1152, 536870920, 0, 1152, 536870920, 0, 1168, 536870920, 0, 1168, 536870920, 0, 1184, 536870920, 0, 1184, 536870920, 0, 3968, 2101248, 0, 3968, 2101248, 0, 3984, 2101248, 0, 3984, 2101248, 0, 4000, 2101248, 0, 4000, 2101248, 0, 4608, 17, 0, 4608, 17, 0, 8144, 33554434, 0, 8144, 33554434, 0, 8148, 33554434, 0, 8148, 33554434, 0, 8152, 33554434, 0, 8152, 33554434, 0, 8160, 33554434, 0, 8160, 33554434, 0, 8164, 33554434, 0, 8164, 33554434, 0, 8168, 33554434, 0, 8168, 33554434, 0, 8176, 33554434, 0, 8176, 33554434, 0, 8180, 33554434, 0, 8180, 33554434, 0, 8184, 33554434, 0, 8184, 33554434, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8896, 559240, 0, 8896, 559240, 0, 8896, 559240, 0, 8896, 559240, 0, 8896, 559240, 0, 1152, 536870920, 0, 1152, 536870920, 0, 1168, 536870920, 0, 1168, 536870920, 0, 1184, 536870920, 0, 1184, 536870920, 0, 3968, 2101248, 0, 3968, 2101248, 0, 3984, 2101248, 0, 3984, 2101248, 0, 4000, 2101248, 0, 4000, 2101248, 0, 4608, 17, 0, 4608, 17, 0, 8144, 33554434, 0, 8144, 33554434, 0, 8148, 33554434, 0, 8148, 33554434, 0, 8152, 33554434, 0, 8152, 33554434, 0, 8160, 33554434, 0, 8160, 33554434, 0, 8164, 33554434, 0, 8164, 33554434, 0, 8168, 33554434, 0, 8168, 33554434, 0, 8176, 33554434, 0, 8176, 33554434, 0, 8180, 33554434, 0, 8180, 33554434, 0, 8184, 33554434, 0, 8184, 33554434, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8448, 1145324612, 0, 8896, 559240, 0, 8896, 559240, 0, 8896, 559240, 0, 8896, 559240, 0, 8896, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
