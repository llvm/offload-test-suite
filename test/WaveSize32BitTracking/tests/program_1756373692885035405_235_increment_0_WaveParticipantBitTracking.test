#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (12 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 25))) {
            uint counter0 = 0;
            while ((counter0 < 2)) {
              counter0 = (counter0 + 1);
              if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 2))) {
                result = (result + WaveActiveSum(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((41 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 29))) {
              result = (result + WaveActiveSum(7));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (52 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          uint counter1 = 0;
          while ((counter1 < 3)) {
            counter1 = (counter1 + 1);
            if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 13))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((74 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 18))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((93 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter1 == 2)) {
              break;
            }
          }
          if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (119 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (129 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (138 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (143 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (152 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (157 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if ((WaveGetLaneIndex() == 3)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((172 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 27))) {
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 12))) {
            result = (result + WaveActiveMax(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((209 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((218 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 20)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((225 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (229 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (239 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (248 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter4 = 0;
      while ((counter4 < 2)) {
        counter4 = (counter4 + 1);
        if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 0))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((277 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter4 == 1)) {
          break;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (289 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (294 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 534
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 1, 0, 9152, 1048832, 0, 9152, 1048832, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 11008, 8, 0, 11024, 8, 0, 11040, 8, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 15296, 85, 0, 15296, 85, 0, 15296, 85, 0, 15296, 85, 0, 17744, 134217729, 0, 17744, 134217729, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 768, 1, 0, 9152, 1048832, 0, 9152, 1048832, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 10048, 1145324612, 0, 11008, 8, 0, 11024, 8, 0, 11040, 8, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13956, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13960, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13972, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13976, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13988, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 13992, 2290649224, 0, 15296, 85, 0, 15296, 85, 0, 15296, 85, 0, 15296, 85, 0, 17744, 134217729, 0, 17744, 134217729, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18496, 1363481681, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0, 18816, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
