#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 26))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((28 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 16)) {
          if ((WaveGetLaneIndex() == 27)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((38 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 3)) {
            if ((WaveGetLaneIndex() < 10)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((48 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 6)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((55 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 21))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((78 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 22))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((89 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 2)) {
        break;
      }
    }
    break;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (106 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 14))) {
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 25))) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 23))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (143 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 28))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (154 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 21))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (169 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (180 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() == 29)) {
                if ((WaveGetLaneIndex() == 4)) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (199 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((WaveGetLaneIndex() == 3)) {
                  result = (result + WaveActiveMax(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (206 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (215 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              uint counter1 = 0;
              while ((counter1 < 2)) {
                counter1 = (counter1 + 1);
                if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 27))) {
                  result = (result + WaveActiveMax(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((233 << 6) | (counter1 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 30))) {
                  result = (result + WaveActiveMin(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((244 << 6) | (counter1 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          }
          break;
        }
      case 1: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (254 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              uint counter2 = 0;
              while ((counter2 < 2)) {
                counter2 = (counter2 + 1);
                if ((WaveGetLaneIndex() == 1)) {
                  result = (result + WaveActiveMax(8));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((268 << 6) | (counter2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((WaveGetLaneIndex() == 19)) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((275 << 6) | (counter2 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((counter2 == 1)) {
                  break;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (283 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (288 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (297 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if ((WaveGetLaneIndex() >= 28)) {
        if ((WaveGetLaneIndex() < 16)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (307 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (317 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (326 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (330 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
        if ((WaveGetLaneIndex() >= 23)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (337 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 570
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 4992, 2621440, 0, 4992, 2621440, 0, 5008, 2621440, 0, 5008, 2621440, 0, 5024, 2621440, 0, 5024, 2621440, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 9152, 2147483648, 0, 9856, 2147483648, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 19008, 272696336, 0, 19008, 272696336, 0, 19008, 272696336, 0, 19008, 272696336, 0, 19008, 272696336, 0, 21568, 536870912, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1792, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1808, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 1824, 2818572970, 0, 4992, 2621440, 0, 4992, 2621440, 0, 5008, 2621440, 0, 5008, 2621440, 0, 5024, 2621440, 0, 5024, 2621440, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5696, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5712, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 5728, 2860515338, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 6784, 2863311530, 0, 9152, 2147483648, 0, 9856, 2147483648, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 11520, 2863311530, 0, 19008, 272696336, 0, 19008, 272696336, 0, 19008, 272696336, 0, 19008, 272696336, 0, 19008, 272696336, 0, 21568, 536870912, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
