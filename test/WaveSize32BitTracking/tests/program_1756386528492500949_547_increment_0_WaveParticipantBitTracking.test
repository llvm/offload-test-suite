#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 27))) {
    if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 31))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (33 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (43 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (52 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (57 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (64 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (68 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (77 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 28))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (88 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() == 30)) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (95 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 23))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((121 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 31))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((132 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 26))) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((151 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 24))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((170 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((WaveGetLaneIndex() == 19)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((177 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (187 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (196 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 24))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((215 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 2)) {
          break;
        }
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 22))) {
    uint counter2 = 0;
    while ((counter2 < 2)) {
      counter2 = (counter2 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((241 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if ((WaveGetLaneIndex() == 11)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((255 << 6) | (counter2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((265 << 6) | (counter2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((274 << 6) | (counter2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((279 << 6) | (counter2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if ((WaveGetLaneIndex() == 6)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((286 << 6) | (counter2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((295 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter2 == 1)) {
        break;
      }
    }
  } else {
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 12))) {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 7))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (345 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if ((WaveGetLaneIndex() >= 21)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((360 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 9))) {
          result = (result + WaveActiveMax(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (375 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (384 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (389 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (396 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (400 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (409 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 576
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 2147483649, 0, 1088, 2147483649, 0, 2112, 1342177281, 0, 2112, 1342177281, 0, 2112, 1342177281, 0, 2752, 1, 0, 3648, 1073741824, 0, 4928, 1342177281, 0, 4928, 1342177281, 0, 4928, 1342177281, 0, 5632, 2684354560, 0, 5632, 2684354560, 0, 5632, 1342177281, 0, 5632, 1342177281, 0, 5632, 1342177281, 0, 7744, 30, 0, 7744, 30, 0, 7744, 30, 0, 7744, 30, 0, 7760, 30, 0, 7760, 30, 0, 7760, 30, 0, 7760, 30, 0, 8448, 14, 0, 8448, 14, 0, 8448, 14, 0, 8464, 14, 0, 8464, 14, 0, 8464, 14, 0, 9664, 75497984, 0, 9664, 75497984, 0, 9664, 75497984, 0, 9680, 75497984, 0, 9680, 75497984, 0, 9680, 75497984, 0, 10880, 25182208, 0, 10880, 25182208, 0, 10880, 25182208, 0, 10896, 25182208, 0, 10896, 25182208, 0, 10896, 25182208, 0, 11328, 524288, 0, 11344, 524288, 0, 11968, 73, 0, 11968, 73, 0, 11968, 73, 0, 12544, 272696336, 0, 12544, 272696336, 0, 12544, 272696336, 0, 12544, 272696336, 0, 12544, 272696336, 0, 13760, 603979776, 0, 13760, 603979776, 0, 13776, 603979776, 0, 13776, 603979776, 0, 13792, 603979776, 0, 13792, 603979776, 0, 15440, 2048, 0, 16340, 2048, 0, 16344, 2048, 0, 17556, 4194304, 0, 17560, 4194304, 0, 17876, 2048, 0, 17880, 2048, 0, 18896, 2048, 0, 22080, 4096, 0, 23040, 16777216, 0, 23056, 16777216, 0, 23072, 16777216, 0, 24000, 4096, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 25344, 557192, 0, 25344, 557192, 0, 25344, 557192, 0, 25344, 557192, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 1088, 2147483649, 0, 1088, 2147483649, 0, 2112, 1342177281, 0, 2112, 1342177281, 0, 2112, 1342177281, 0, 2752, 1, 0, 3648, 1073741824, 0, 4928, 1342177281, 0, 4928, 1342177281, 0, 4928, 1342177281, 0, 5632, 2684354560, 0, 5632, 2684354560, 0, 5632, 1342177281, 0, 5632, 1342177281, 0, 5632, 1342177281, 0, 7744, 30, 0, 7744, 30, 0, 7744, 30, 0, 7744, 30, 0, 7760, 30, 0, 7760, 30, 0, 7760, 30, 0, 7760, 30, 0, 8448, 14, 0, 8448, 14, 0, 8448, 14, 0, 8464, 14, 0, 8464, 14, 0, 8464, 14, 0, 9664, 75497984, 0, 9664, 75497984, 0, 9664, 75497984, 0, 9680, 75497984, 0, 9680, 75497984, 0, 9680, 75497984, 0, 10880, 25182208, 0, 10880, 25182208, 0, 10880, 25182208, 0, 10896, 25182208, 0, 10896, 25182208, 0, 10896, 25182208, 0, 11328, 524288, 0, 11344, 524288, 0, 11968, 73, 0, 11968, 73, 0, 11968, 73, 0, 12544, 272696336, 0, 12544, 272696336, 0, 12544, 272696336, 0, 12544, 272696336, 0, 12544, 272696336, 0, 13760, 603979776, 0, 13760, 603979776, 0, 13776, 603979776, 0, 13776, 603979776, 0, 13792, 603979776, 0, 13792, 603979776, 0, 15440, 2048, 0, 16340, 2048, 0, 16344, 2048, 0, 17556, 4194304, 0, 17560, 4194304, 0, 17876, 2048, 0, 17880, 2048, 0, 18896, 2048, 0, 22080, 4096, 0, 23040, 16777216, 0, 23056, 16777216, 0, 23072, 16777216, 0, 24000, 4096, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 24896, 1141130308, 0, 25344, 557192, 0, 25344, 557192, 0, 25344, 557192, 0, 25344, 557192, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0, 26176, 2863309482, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
