#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 14)) {
    if ((WaveGetLaneIndex() < 5)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() < 6)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((23 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 17))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((53 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((72 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 23))) {
            result = (result + WaveActiveMax(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((100 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (110 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if ((WaveGetLaneIndex() == 29)) {
            if ((WaveGetLaneIndex() == 3)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (120 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 10)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (127 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() < 5)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (134 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 9))) {
          if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 28))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (168 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (173 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (180 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (184 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 426
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 31, 0, 576, 31, 0, 576, 31, 0, 576, 31, 0, 576, 31, 0, 1488, 63, 0, 1488, 63, 0, 1488, 63, 0, 1488, 63, 0, 1488, 63, 0, 1488, 63, 0, 1504, 63, 0, 1504, 63, 0, 1504, 63, 0, 1504, 63, 0, 1504, 63, 0, 1504, 63, 0, 3412, 576, 0, 3412, 576, 0, 3416, 576, 0, 3416, 576, 0, 3428, 576, 0, 3428, 576, 0, 3432, 576, 0, 3432, 576, 0, 4628, 2049, 0, 4628, 2049, 0, 4632, 2049, 0, 4632, 2049, 0, 4644, 2049, 0, 4644, 2049, 0, 4648, 2049, 0, 4648, 2049, 0, 6420, 285212689, 0, 6420, 285212689, 0, 6420, 285212689, 0, 6420, 285212689, 0, 6424, 285212689, 0, 6424, 285212689, 0, 6424, 285212689, 0, 6424, 285212689, 0, 6436, 285212689, 0, 6436, 285212689, 0, 6436, 285212689, 0, 6436, 285212689, 0, 6440, 285212689, 0, 6440, 285212689, 0, 6440, 285212689, 0, 6440, 285212689, 0, 6452, 285212689, 0, 6452, 285212689, 0, 6452, 285212689, 0, 6452, 285212689, 0, 6456, 285212689, 0, 6456, 285212689, 0, 6456, 285212689, 0, 6456, 285212689, 0, 8576, 2, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11520, 559240, 0, 11520, 559240, 0, 11520, 559240, 0, 11520, 559240, 0, 11520, 559240, 0, 576, 31, 0, 576, 31, 0, 576, 31, 0, 576, 31, 0, 576, 31, 0, 1488, 63, 0, 1488, 63, 0, 1488, 63, 0, 1488, 63, 0, 1488, 63, 0, 1488, 63, 0, 1504, 63, 0, 1504, 63, 0, 1504, 63, 0, 1504, 63, 0, 1504, 63, 0, 1504, 63, 0, 3412, 576, 0, 3412, 576, 0, 3416, 576, 0, 3416, 576, 0, 3428, 576, 0, 3428, 576, 0, 3432, 576, 0, 3432, 576, 0, 4628, 2049, 0, 4628, 2049, 0, 4632, 2049, 0, 4632, 2049, 0, 4644, 2049, 0, 4644, 2049, 0, 4648, 2049, 0, 4648, 2049, 0, 6420, 285212689, 0, 6420, 285212689, 0, 6420, 285212689, 0, 6420, 285212689, 0, 6424, 285212689, 0, 6424, 285212689, 0, 6424, 285212689, 0, 6424, 285212689, 0, 6436, 285212689, 0, 6436, 285212689, 0, 6436, 285212689, 0, 6436, 285212689, 0, 6440, 285212689, 0, 6440, 285212689, 0, 6440, 285212689, 0, 6440, 285212689, 0, 6452, 285212689, 0, 6452, 285212689, 0, 6452, 285212689, 0, 6452, 285212689, 0, 6456, 285212689, 0, 6456, 285212689, 0, 6456, 285212689, 0, 6456, 285212689, 0, 8576, 2, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11072, 1145324612, 0, 11520, 559240, 0, 11520, 559240, 0, 11520, 559240, 0, 11520, 559240, 0, 11520, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
