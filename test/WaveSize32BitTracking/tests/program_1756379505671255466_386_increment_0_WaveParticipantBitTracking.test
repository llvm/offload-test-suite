#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() < 5)) {
        if ((WaveGetLaneIndex() < 4)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (21 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
            if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 22))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((48 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 27))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((61 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 16)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((68 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (73 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
    uint counter3 = 0;
    while ((counter3 < 3)) {
      counter3 = (counter3 + 1);
      if ((WaveGetLaneIndex() == 15)) {
        result = (result + WaveActiveMax(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((95 << 6) | (i2 << 4)) | (counter3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 2)) {
        if ((WaveGetLaneIndex() == 11)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((107 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((114 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 30)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((121 << 6) | (i2 << 4)) | (counter3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 300
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1344, 2, 0, 3072, 18, 0, 3072, 18, 0, 3076, 18, 0, 3076, 18, 0, 3088, 18, 0, 3088, 18, 0, 3092, 18, 0, 3092, 18, 0, 3104, 18, 0, 3104, 18, 0, 3108, 18, 0, 3108, 18, 0, 3904, 18, 0, 3904, 18, 0, 3908, 18, 0, 3908, 18, 0, 3920, 18, 0, 3920, 18, 0, 3924, 18, 0, 3924, 18, 0, 3936, 18, 0, 3936, 18, 0, 3940, 18, 0, 3940, 18, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 6084, 32768, 0, 6088, 32768, 0, 6092, 32768, 0, 6100, 32768, 0, 6104, 32768, 0, 6108, 32768, 0, 7748, 1073741824, 0, 7752, 1073741824, 0, 7756, 1073741824, 0, 7764, 1073741824, 0, 7768, 1073741824, 0, 7772, 1073741824, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 1344, 2, 0, 3072, 18, 0, 3072, 18, 0, 3076, 18, 0, 3076, 18, 0, 3088, 18, 0, 3088, 18, 0, 3092, 18, 0, 3092, 18, 0, 3104, 18, 0, 3104, 18, 0, 3108, 18, 0, 3108, 18, 0, 3904, 18, 0, 3904, 18, 0, 3908, 18, 0, 3908, 18, 0, 3920, 18, 0, 3920, 18, 0, 3924, 18, 0, 3924, 18, 0, 3936, 18, 0, 3936, 18, 0, 3940, 18, 0, 3940, 18, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 4672, 613566756, 0, 6084, 32768, 0, 6088, 32768, 0, 6092, 32768, 0, 6100, 32768, 0, 6104, 32768, 0, 6108, 32768, 0, 7748, 1073741824, 0, 7752, 1073741824, 0, 7756, 1073741824, 0, 7764, 1073741824, 0, 7768, 1073741824, 0, 7772, 1073741824, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
