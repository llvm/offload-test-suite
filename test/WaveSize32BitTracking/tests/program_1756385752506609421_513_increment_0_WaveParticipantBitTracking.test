#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if ((WaveGetLaneIndex() == 28)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((21 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 18)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((30 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (39 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() == 15)) {
    result = (result + WaveActiveMax(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (46 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
    if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 27))) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((65 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i1 == 1)) {
      continue;
    }
  }
  if ((WaveGetLaneIndex() == 26)) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (75 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
    if ((WaveGetLaneIndex() < 4)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((90 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() < 5)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((97 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 204
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4160, 1342177301, 0, 4160, 1342177301, 0, 4160, 1342177301, 0, 4160, 1342177301, 0, 4160, 1342177301, 0, 4176, 1342177301, 0, 4176, 1342177301, 0, 4176, 1342177301, 0, 4176, 1342177301, 0, 4176, 1342177301, 0, 4192, 1342177301, 0, 4192, 1342177301, 0, 4192, 1342177301, 0, 4192, 1342177301, 0, 4192, 1342177301, 0, 4800, 67108864, 0, 5760, 15, 0, 5760, 15, 0, 5760, 15, 0, 5760, 15, 0, 5776, 15, 0, 5776, 15, 0, 5776, 15, 0, 5776, 15, 0, 6208, 31, 0, 6208, 31, 0, 6208, 31, 0, 6208, 31, 0, 6208, 31, 0, 6224, 31, 0, 6224, 31, 0, 6224, 31, 0, 6224, 31, 0, 6224, 31, 0, 4160, 1342177301, 0, 4160, 1342177301, 0, 4160, 1342177301, 0, 4160, 1342177301, 0, 4160, 1342177301, 0, 4176, 1342177301, 0, 4176, 1342177301, 0, 4176, 1342177301, 0, 4176, 1342177301, 0, 4176, 1342177301, 0, 4192, 1342177301, 0, 4192, 1342177301, 0, 4192, 1342177301, 0, 4192, 1342177301, 0, 4192, 1342177301, 0, 4800, 67108864, 0, 5760, 15, 0, 5760, 15, 0, 5760, 15, 0, 5760, 15, 0, 5776, 15, 0, 5776, 15, 0, 5776, 15, 0, 5776, 15, 0, 6208, 31, 0, 6208, 31, 0, 6208, 31, 0, 6208, 31, 0, 6208, 31, 0, 6224, 31, 0, 6224, 31, 0, 6224, 31, 0, 6224, 31, 0, 6224, 31, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
