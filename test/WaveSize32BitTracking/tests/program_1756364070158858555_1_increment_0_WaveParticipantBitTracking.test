#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() == 5)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((26 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (38 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 8))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((64 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 25))) {
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((94 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 25))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((113 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 14)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((120 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 19))) {
        result = (result + WaveActiveSum(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((139 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 3: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() >= 25)) {
          if ((WaveGetLaneIndex() >= 17)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (152 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (161 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (166 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  }
  for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((183 << 6) | (i3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((197 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((207 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((216 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((221 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((228 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((232 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1200
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4112, 4456448, 0, 4112, 4456448, 0, 4128, 4456448, 0, 4128, 4456448, 0, 7248, 33685568, 0, 7248, 33685568, 0, 7248, 33685568, 0, 7264, 33685568, 0, 7264, 33685568, 0, 7264, 33685568, 0, 7696, 16384, 0, 7712, 16384, 0, 8912, 64, 0, 8928, 64, 0, 9728, 1207959552, 0, 9728, 1207959552, 0, 10304, 4195328, 0, 10304, 4195328, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 13248, 17, 0, 13248, 17, 0, 13264, 17, 0, 13264, 17, 0, 13280, 17, 0, 13280, 17, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 4112, 4456448, 0, 4112, 4456448, 0, 4128, 4456448, 0, 4128, 4456448, 0, 7248, 33685568, 0, 7248, 33685568, 0, 7248, 33685568, 0, 7264, 33685568, 0, 7264, 33685568, 0, 7264, 33685568, 0, 7696, 16384, 0, 7712, 16384, 0, 8912, 64, 0, 8928, 64, 0, 9728, 1207959552, 0, 9728, 1207959552, 0, 10304, 4195328, 0, 10304, 4195328, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 10624, 612517924, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11712, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12608, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12624, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 12640, 1431655765, 0, 13248, 17, 0, 13248, 17, 0, 13264, 17, 0, 13264, 17, 0, 13280, 17, 0, 13280, 17, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13824, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13840, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 13856, 286331153, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14144, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14160, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0, 14176, 1431655765, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
