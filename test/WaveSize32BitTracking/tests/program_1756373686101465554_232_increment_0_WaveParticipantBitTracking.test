#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 1)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (15 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (11 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 1))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (89 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 31))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (85 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 31))) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (79 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 27))) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (75 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (99 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (108 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (113 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (117 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 300
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [960, 2, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 5696, 268439618, 0, 5696, 268439618, 0, 5696, 268439618, 0, 5696, 268439618, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5056, 17334272, 0, 5056, 17334272, 0, 5056, 17334272, 0, 4800, 134218752, 0, 4800, 134218752, 0, 6336, 73, 0, 6336, 73, 0, 6336, 73, 0, 6912, 272696336, 0, 6912, 272696336, 0, 6912, 272696336, 0, 6912, 272696336, 0, 6912, 272696336, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 960, 2, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 704, 1431655765, 0, 5696, 268439618, 0, 5696, 268439618, 0, 5696, 268439618, 0, 5696, 268439618, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5440, 2147483709, 0, 5056, 17334272, 0, 5056, 17334272, 0, 5056, 17334272, 0, 4800, 134218752, 0, 4800, 134218752, 0, 6336, 73, 0, 6336, 73, 0, 6336, 73, 0, 6912, 272696336, 0, 6912, 272696336, 0, 6912, 272696336, 0, 6912, 272696336, 0, 6912, 272696336, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0, 7232, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
