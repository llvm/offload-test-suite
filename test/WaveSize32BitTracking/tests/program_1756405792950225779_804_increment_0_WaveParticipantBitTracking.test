#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 28))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((23 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 27))) {
          if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 5))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((49 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
            if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 22))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((68 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 31))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((89 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        } else {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 24))) {
          if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 24))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((107 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 31))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((126 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 23))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((137 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 25))) {
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (154 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (163 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (168 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          uint counter2 = 0;
          while ((counter2 < 2)) {
            counter2 = (counter2 + 1);
            if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 25))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((194 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 19))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((209 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (213 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
    } else {
    if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 18))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (224 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter3 = 0;
    while ((counter3 < 3)) {
      counter3 = (counter3 + 1);
      if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 24))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((242 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 25))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((261 << 6) | (counter3 << 4)) | (i4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 28))) {
        result = (result + WaveActiveMax(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((272 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 30))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (291 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (296 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (300 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 252
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1472, 1073741833, 0, 1472, 1073741833, 0, 1472, 1073741833, 0, 1488, 1073741833, 0, 1488, 1073741833, 0, 1488, 1073741833, 0, 6848, 1090519049, 0, 6848, 1090519049, 0, 6848, 1090519049, 0, 6848, 1090519049, 0, 6864, 1090519049, 0, 6864, 1090519049, 0, 6864, 1090519049, 0, 6864, 1090519049, 0, 8064, 512, 0, 8080, 512, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 9856, 16, 0, 18624, 65536, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 1472, 1073741833, 0, 1472, 1073741833, 0, 1472, 1073741833, 0, 1488, 1073741833, 0, 1488, 1073741833, 0, 1488, 1073741833, 0, 6848, 1090519049, 0, 6848, 1090519049, 0, 6848, 1090519049, 0, 6848, 1090519049, 0, 6864, 1090519049, 0, 6864, 1090519049, 0, 6864, 1090519049, 0, 6864, 1090519049, 0, 8064, 512, 0, 8080, 512, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8768, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 8784, 1224737353, 0, 9856, 16, 0, 18624, 65536, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0, 18944, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
