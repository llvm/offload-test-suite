#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 31))) {
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 28))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((34 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 22))) {
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((86 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((109 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 27))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((120 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 21))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (131 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (141 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((164 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 22))) {
          if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 30))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((182 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 28))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((193 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 25)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((200 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 31)) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((207 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 31))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((222 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() >= 20)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((237 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 27))) {
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 19))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((263 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((286 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 10))) {
        result = (result + WaveActiveMax(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((305 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 462
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 2147483651, 0, 1088, 2147483651, 0, 1088, 2147483651, 0, 2176, 1, 0, 2192, 1, 0, 2208, 1, 0, 7680, 2147483651, 0, 7680, 2147483651, 0, 7680, 2147483651, 0, 7684, 2147483651, 0, 7684, 2147483651, 0, 7684, 2147483651, 0, 7688, 2147483651, 0, 7688, 2147483651, 0, 7688, 2147483651, 0, 7696, 2147483651, 0, 7696, 2147483651, 0, 7696, 2147483651, 0, 7700, 2147483651, 0, 7700, 2147483651, 0, 7700, 2147483651, 0, 7704, 2147483651, 0, 7704, 2147483651, 0, 7704, 2147483651, 0, 7712, 2147483651, 0, 7712, 2147483651, 0, 7712, 2147483651, 0, 7716, 2147483651, 0, 7716, 2147483651, 0, 7716, 2147483651, 0, 7720, 2147483651, 0, 7720, 2147483651, 0, 7720, 2147483651, 0, 8384, 2147483651, 0, 8384, 2147483651, 0, 8384, 2147483651, 0, 9024, 73, 0, 9024, 73, 0, 9024, 73, 0, 10496, 65536, 0, 10512, 65536, 0, 11648, 2147483666, 0, 11648, 2147483666, 0, 11648, 2147483666, 0, 11664, 2147483666, 0, 11664, 2147483666, 0, 11664, 2147483666, 0, 12352, 2415919122, 0, 12352, 2415919122, 0, 12352, 2415919122, 0, 12352, 2415919122, 0, 12368, 2415919122, 0, 12368, 2415919122, 0, 12368, 2415919122, 0, 12368, 2415919122, 0, 14208, 2415919104, 0, 14208, 2415919104, 0, 14224, 2415919104, 0, 14224, 2415919104, 0, 15168, 613416960, 0, 15168, 613416960, 0, 15168, 613416960, 0, 15168, 613416960, 0, 15184, 613416960, 0, 15184, 613416960, 0, 15184, 613416960, 0, 15184, 613416960, 0, 15200, 613416960, 0, 15200, 613416960, 0, 15200, 613416960, 0, 15200, 613416960, 0, 19520, 67110912, 0, 19520, 67110912, 0, 19536, 67110912, 0, 19536, 67110912, 0, 19552, 67110912, 0, 19552, 67110912, 0, 1088, 2147483651, 0, 1088, 2147483651, 0, 1088, 2147483651, 0, 2176, 1, 0, 2192, 1, 0, 2208, 1, 0, 7680, 2147483651, 0, 7680, 2147483651, 0, 7680, 2147483651, 0, 7684, 2147483651, 0, 7684, 2147483651, 0, 7684, 2147483651, 0, 7688, 2147483651, 0, 7688, 2147483651, 0, 7688, 2147483651, 0, 7696, 2147483651, 0, 7696, 2147483651, 0, 7696, 2147483651, 0, 7700, 2147483651, 0, 7700, 2147483651, 0, 7700, 2147483651, 0, 7704, 2147483651, 0, 7704, 2147483651, 0, 7704, 2147483651, 0, 7712, 2147483651, 0, 7712, 2147483651, 0, 7712, 2147483651, 0, 7716, 2147483651, 0, 7716, 2147483651, 0, 7716, 2147483651, 0, 7720, 2147483651, 0, 7720, 2147483651, 0, 7720, 2147483651, 0, 8384, 2147483651, 0, 8384, 2147483651, 0, 8384, 2147483651, 0, 9024, 73, 0, 9024, 73, 0, 9024, 73, 0, 10496, 65536, 0, 10512, 65536, 0, 11648, 2147483666, 0, 11648, 2147483666, 0, 11648, 2147483666, 0, 11664, 2147483666, 0, 11664, 2147483666, 0, 11664, 2147483666, 0, 12352, 2415919122, 0, 12352, 2415919122, 0, 12352, 2415919122, 0, 12352, 2415919122, 0, 12368, 2415919122, 0, 12368, 2415919122, 0, 12368, 2415919122, 0, 12368, 2415919122, 0, 14208, 2415919104, 0, 14208, 2415919104, 0, 14224, 2415919104, 0, 14224, 2415919104, 0, 15168, 613416960, 0, 15168, 613416960, 0, 15168, 613416960, 0, 15168, 613416960, 0, 15184, 613416960, 0, 15184, 613416960, 0, 15184, 613416960, 0, 15184, 613416960, 0, 15200, 613416960, 0, 15200, 613416960, 0, 15200, 613416960, 0, 15200, 613416960, 0, 19520, 67110912, 0, 19520, 67110912, 0, 19536, 67110912, 0, 19536, 67110912, 0, 19552, 67110912, 0, 19552, 67110912, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
