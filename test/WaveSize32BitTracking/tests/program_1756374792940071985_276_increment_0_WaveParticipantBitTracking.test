#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (22 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 22))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((51 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 28))) {
            if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((73 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 26))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((88 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 31))) {
            result = (result + WaveActiveMax(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((99 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((118 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (127 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() >= 17)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((144 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 28))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((162 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 23)) {
            if ((WaveGetLaneIndex() < 11)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((172 << 6) | (counter2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((181 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((190 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (199 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 1))) {
      if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 31))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (243 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveMax(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((258 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((275 << 6) | (i4 << 4)) | (i5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((286 << 6) | (i4 << 4)) | (i5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i5 == 1)) {
            continue;
          }
        }
        if ((WaveGetLaneIndex() == 9)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((296 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (300 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1116
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 6352, 85, 0, 6352, 85, 0, 6352, 85, 0, 6352, 85, 0, 6356, 85, 0, 6356, 85, 0, 6356, 85, 0, 6356, 85, 0, 6368, 85, 0, 6368, 85, 0, 6368, 85, 0, 6368, 85, 0, 6372, 85, 0, 6372, 85, 0, 6372, 85, 0, 6372, 85, 0, 6384, 85, 0, 6384, 85, 0, 6384, 85, 0, 6384, 85, 0, 6388, 85, 0, 6388, 85, 0, 6388, 85, 0, 6388, 85, 0, 7568, 4096, 0, 7584, 4096, 0, 7600, 4096, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 9232, 1227096064, 0, 9232, 1227096064, 0, 9232, 1227096064, 0, 9232, 1227096064, 0, 9232, 1227096064, 0, 9248, 1227096064, 0, 9248, 1227096064, 0, 9248, 1227096064, 0, 9248, 1227096064, 0, 9248, 1227096064, 0, 10388, 1073741825, 0, 10388, 1073741825, 0, 10392, 1073741825, 0, 10392, 1073741825, 0, 10404, 1073741825, 0, 10404, 1073741825, 0, 10408, 1073741825, 0, 10408, 1073741825, 0, 11604, 2130440, 0, 11604, 2130440, 0, 11604, 2130440, 0, 11604, 2130440, 0, 11608, 2130440, 0, 11608, 2130440, 0, 11608, 2130440, 0, 11608, 2130440, 0, 11620, 2130440, 0, 11620, 2130440, 0, 11620, 2130440, 0, 11620, 2130440, 0, 11624, 2130440, 0, 11624, 2130440, 0, 11624, 2130440, 0, 11624, 2130440, 0, 12180, 2130440, 0, 12180, 2130440, 0, 12180, 2130440, 0, 12180, 2130440, 0, 12184, 2130440, 0, 12184, 2130440, 0, 12184, 2130440, 0, 12184, 2130440, 0, 12196, 2130440, 0, 12196, 2130440, 0, 12196, 2130440, 0, 12196, 2130440, 0, 12200, 2130440, 0, 12200, 2130440, 0, 12200, 2130440, 0, 12200, 2130440, 0, 12736, 272696336, 0, 12736, 272696336, 0, 12736, 272696336, 0, 12736, 272696336, 0, 12736, 272696336, 0, 17600, 545261568, 0, 17600, 545261568, 0, 17600, 545261568, 0, 17604, 545261568, 0, 17604, 545261568, 0, 17604, 545261568, 0, 17616, 545261568, 0, 17616, 545261568, 0, 17616, 545261568, 0, 17620, 545261568, 0, 17620, 545261568, 0, 17620, 545261568, 0, 18304, 545261568, 0, 18304, 545261568, 0, 18304, 545261568, 0, 18308, 545261568, 0, 18308, 545261568, 0, 18308, 545261568, 0, 18320, 545261568, 0, 18320, 545261568, 0, 18320, 545261568, 0, 18324, 545261568, 0, 18324, 545261568, 0, 18324, 545261568, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3280, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3284, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3296, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3300, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3312, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 3316, 1430258005, 0, 6352, 85, 0, 6352, 85, 0, 6352, 85, 0, 6352, 85, 0, 6356, 85, 0, 6356, 85, 0, 6356, 85, 0, 6356, 85, 0, 6368, 85, 0, 6368, 85, 0, 6368, 85, 0, 6368, 85, 0, 6372, 85, 0, 6372, 85, 0, 6372, 85, 0, 6372, 85, 0, 6384, 85, 0, 6384, 85, 0, 6384, 85, 0, 6384, 85, 0, 6388, 85, 0, 6388, 85, 0, 6388, 85, 0, 6388, 85, 0, 7568, 4096, 0, 7584, 4096, 0, 7600, 4096, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 8128, 1431655765, 0, 9232, 1227096064, 0, 9232, 1227096064, 0, 9232, 1227096064, 0, 9232, 1227096064, 0, 9232, 1227096064, 0, 9248, 1227096064, 0, 9248, 1227096064, 0, 9248, 1227096064, 0, 9248, 1227096064, 0, 9248, 1227096064, 0, 10388, 1073741825, 0, 10388, 1073741825, 0, 10392, 1073741825, 0, 10392, 1073741825, 0, 10404, 1073741825, 0, 10404, 1073741825, 0, 10408, 1073741825, 0, 10408, 1073741825, 0, 11604, 2130440, 0, 11604, 2130440, 0, 11604, 2130440, 0, 11604, 2130440, 0, 11608, 2130440, 0, 11608, 2130440, 0, 11608, 2130440, 0, 11608, 2130440, 0, 11620, 2130440, 0, 11620, 2130440, 0, 11620, 2130440, 0, 11620, 2130440, 0, 11624, 2130440, 0, 11624, 2130440, 0, 11624, 2130440, 0, 11624, 2130440, 0, 12180, 2130440, 0, 12180, 2130440, 0, 12180, 2130440, 0, 12180, 2130440, 0, 12184, 2130440, 0, 12184, 2130440, 0, 12184, 2130440, 0, 12184, 2130440, 0, 12196, 2130440, 0, 12196, 2130440, 0, 12196, 2130440, 0, 12196, 2130440, 0, 12200, 2130440, 0, 12200, 2130440, 0, 12200, 2130440, 0, 12200, 2130440, 0, 12736, 272696336, 0, 12736, 272696336, 0, 12736, 272696336, 0, 12736, 272696336, 0, 12736, 272696336, 0, 17600, 545261568, 0, 17600, 545261568, 0, 17600, 545261568, 0, 17604, 545261568, 0, 17604, 545261568, 0, 17604, 545261568, 0, 17616, 545261568, 0, 17616, 545261568, 0, 17616, 545261568, 0, 17620, 545261568, 0, 17620, 545261568, 0, 17620, 545261568, 0, 18304, 545261568, 0, 18304, 545261568, 0, 18304, 545261568, 0, 18308, 545261568, 0, 18308, 545261568, 0, 18308, 545261568, 0, 18320, 545261568, 0, 18320, 545261568, 0, 18320, 545261568, 0, 18324, 545261568, 0, 18324, 545261568, 0, 18324, 545261568, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
