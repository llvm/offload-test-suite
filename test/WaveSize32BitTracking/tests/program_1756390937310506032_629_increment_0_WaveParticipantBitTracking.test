#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 25))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (46 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 29))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (40 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 6)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (34 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (56 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (65 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 120
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2560, 17842176, 0, 2560, 17842176, 0, 2560, 17842176, 0, 3584, 85, 0, 3584, 85, 0, 3584, 85, 0, 3584, 85, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2944, 4261412927, 0, 2560, 17842176, 0, 2560, 17842176, 0, 2560, 17842176, 0, 3584, 85, 0, 3584, 85, 0, 3584, 85, 0, 3584, 85, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
