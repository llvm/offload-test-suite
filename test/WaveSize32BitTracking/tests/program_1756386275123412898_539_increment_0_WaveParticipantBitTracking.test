#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() == 14)) {
      if ((WaveGetLaneIndex() == 9)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((36 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((50 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 30))) {
          if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((80 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 8))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((103 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 16)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((112 << 6) | (i0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    if ((WaveGetLaneIndex() == 30)) {
      result = (result + WaveActiveMin(1));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((119 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
      if ((WaveGetLaneIndex() >= 18)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((136 << 6) | (i0 << 4)) | (i2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 2))) {
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 0))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((174 << 6) | (i0 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 1))) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((197 << 6) | (i0 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  if ((i0 == 1)) {
    continue;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 396
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 7616, 1073741824, 0, 7632, 1073741824, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 12608, 131072, 0, 12612, 131072, 0, 12624, 131072, 0, 12628, 131072, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 7616, 1073741824, 0, 7632, 1073741824, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8704, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8708, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8720, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 8724, 4294705152, 0, 12608, 131072, 0, 12612, 131072, 0, 12624, 131072, 0, 12628, 131072, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
