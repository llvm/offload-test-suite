#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 6)) {
    if ((WaveGetLaneIndex() >= 27)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (11 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 21))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((29 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((46 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((56 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((65 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((70 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
      }
    }
    if ((WaveGetLaneIndex() >= 17)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (77 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (87 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (96 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() == 26)) {
          result = (result + WaveActiveMin(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((111 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (118 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (122 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 600
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1872, 63, 0, 1872, 63, 0, 1872, 63, 0, 1872, 63, 0, 1872, 63, 0, 1872, 63, 0, 1888, 63, 0, 1888, 63, 0, 1888, 63, 0, 1888, 63, 0, 1888, 63, 0, 1888, 63, 0, 1904, 63, 0, 1904, 63, 0, 1904, 63, 0, 1904, 63, 0, 1904, 63, 0, 1904, 63, 0, 2960, 21, 0, 2960, 21, 0, 2960, 21, 0, 2964, 21, 0, 2964, 21, 0, 2964, 21, 0, 2968, 21, 0, 2968, 21, 0, 2968, 21, 0, 2976, 21, 0, 2976, 21, 0, 2976, 21, 0, 2980, 21, 0, 2980, 21, 0, 2980, 21, 0, 2984, 21, 0, 2984, 21, 0, 2984, 21, 0, 2992, 21, 0, 2992, 21, 0, 2992, 21, 0, 2996, 21, 0, 2996, 21, 0, 2996, 21, 0, 3000, 21, 0, 3000, 21, 0, 3000, 21, 0, 3600, 9, 0, 3600, 9, 0, 3604, 9, 0, 3604, 9, 0, 3608, 9, 0, 3608, 9, 0, 3616, 9, 0, 3616, 9, 0, 3620, 9, 0, 3620, 9, 0, 3624, 9, 0, 3624, 9, 0, 3632, 9, 0, 3632, 9, 0, 3636, 9, 0, 3636, 9, 0, 3640, 9, 0, 3640, 9, 0, 4176, 16, 0, 4180, 16, 0, 4184, 16, 0, 4192, 16, 0, 4196, 16, 0, 4200, 16, 0, 4208, 16, 0, 4212, 16, 0, 4216, 16, 0, 4496, 36, 0, 4496, 36, 0, 4500, 36, 0, 4500, 36, 0, 4504, 36, 0, 4504, 36, 0, 4512, 36, 0, 4512, 36, 0, 4516, 36, 0, 4516, 36, 0, 4520, 36, 0, 4520, 36, 0, 4528, 36, 0, 4528, 36, 0, 4532, 36, 0, 4532, 36, 0, 4536, 36, 0, 4536, 36, 0, 5568, 17, 0, 5568, 17, 0, 7104, 67108864, 0, 7120, 67108864, 0, 7136, 67108864, 0, 7552, 559240, 0, 7552, 559240, 0, 7552, 559240, 0, 7552, 559240, 0, 7552, 559240, 0, 1872, 63, 0, 1872, 63, 0, 1872, 63, 0, 1872, 63, 0, 1872, 63, 0, 1872, 63, 0, 1888, 63, 0, 1888, 63, 0, 1888, 63, 0, 1888, 63, 0, 1888, 63, 0, 1888, 63, 0, 1904, 63, 0, 1904, 63, 0, 1904, 63, 0, 1904, 63, 0, 1904, 63, 0, 1904, 63, 0, 2960, 21, 0, 2960, 21, 0, 2960, 21, 0, 2964, 21, 0, 2964, 21, 0, 2964, 21, 0, 2968, 21, 0, 2968, 21, 0, 2968, 21, 0, 2976, 21, 0, 2976, 21, 0, 2976, 21, 0, 2980, 21, 0, 2980, 21, 0, 2980, 21, 0, 2984, 21, 0, 2984, 21, 0, 2984, 21, 0, 2992, 21, 0, 2992, 21, 0, 2992, 21, 0, 2996, 21, 0, 2996, 21, 0, 2996, 21, 0, 3000, 21, 0, 3000, 21, 0, 3000, 21, 0, 3600, 9, 0, 3600, 9, 0, 3604, 9, 0, 3604, 9, 0, 3608, 9, 0, 3608, 9, 0, 3616, 9, 0, 3616, 9, 0, 3620, 9, 0, 3620, 9, 0, 3624, 9, 0, 3624, 9, 0, 3632, 9, 0, 3632, 9, 0, 3636, 9, 0, 3636, 9, 0, 3640, 9, 0, 3640, 9, 0, 4176, 16, 0, 4180, 16, 0, 4184, 16, 0, 4192, 16, 0, 4196, 16, 0, 4200, 16, 0, 4208, 16, 0, 4212, 16, 0, 4216, 16, 0, 4496, 36, 0, 4496, 36, 0, 4500, 36, 0, 4500, 36, 0, 4504, 36, 0, 4504, 36, 0, 4512, 36, 0, 4512, 36, 0, 4516, 36, 0, 4516, 36, 0, 4520, 36, 0, 4520, 36, 0, 4528, 36, 0, 4528, 36, 0, 4532, 36, 0, 4532, 36, 0, 4536, 36, 0, 4536, 36, 0, 5568, 17, 0, 5568, 17, 0, 7104, 67108864, 0, 7120, 67108864, 0, 7136, 67108864, 0, 7552, 559240, 0, 7552, 559240, 0, 7552, 559240, 0, 7552, 559240, 0, 7552, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
