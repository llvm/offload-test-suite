#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 25))) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((21 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() == 30)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((36 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() >= 16)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((50 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((64 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((73 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 20))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((96 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((111 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 24)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((120 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 30))) {
    for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
      if ((WaveGetLaneIndex() >= 22)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((150 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i3 == 1)) {
        continue;
      }
    }
    if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (168 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (178 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (187 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (192 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      uint counter4 = 0;
      while ((counter4 < 2)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((208 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((222 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((231 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((242 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (246 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 480
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1344, 1409286145, 0, 1344, 1409286145, 0, 1344, 1409286145, 0, 1344, 1409286145, 0, 1360, 1409286145, 0, 1360, 1409286145, 0, 1360, 1409286145, 0, 1360, 1409286145, 0, 1376, 1409286145, 0, 1376, 1409286145, 0, 1376, 1409286145, 0, 1376, 1409286145, 0, 2304, 1073741824, 0, 2308, 1073741824, 0, 2312, 1073741824, 0, 2320, 1073741824, 0, 2324, 1073741824, 0, 2328, 1073741824, 0, 2336, 1073741824, 0, 2340, 1073741824, 0, 2344, 1073741824, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 6160, 536903680, 0, 6160, 536903680, 0, 6176, 536903680, 0, 6176, 536903680, 0, 7120, 8388608, 0, 7136, 8388608, 0, 7696, 2852126720, 0, 7696, 2852126720, 0, 7696, 2852126720, 0, 7696, 2852126720, 0, 7712, 2852126720, 0, 7712, 2852126720, 0, 7712, 2852126720, 0, 7712, 2852126720, 0, 9600, 1073741824, 0, 9616, 1073741824, 0, 9632, 1073741824, 0, 11392, 17, 0, 11392, 17, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 1344, 1409286145, 0, 1344, 1409286145, 0, 1344, 1409286145, 0, 1344, 1409286145, 0, 1360, 1409286145, 0, 1360, 1409286145, 0, 1360, 1409286145, 0, 1360, 1409286145, 0, 1376, 1409286145, 0, 1376, 1409286145, 0, 1376, 1409286145, 0, 1376, 1409286145, 0, 2304, 1073741824, 0, 2308, 1073741824, 0, 2312, 1073741824, 0, 2320, 1073741824, 0, 2324, 1073741824, 0, 2328, 1073741824, 0, 2336, 1073741824, 0, 2340, 1073741824, 0, 2344, 1073741824, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3216, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 3232, 2863267840, 0, 6160, 536903680, 0, 6160, 536903680, 0, 6176, 536903680, 0, 6176, 536903680, 0, 7120, 8388608, 0, 7136, 8388608, 0, 7696, 2852126720, 0, 7696, 2852126720, 0, 7696, 2852126720, 0, 7696, 2852126720, 0, 7712, 2852126720, 0, 7712, 2852126720, 0, 7712, 2852126720, 0, 7712, 2852126720, 0, 9600, 1073741824, 0, 9616, 1073741824, 0, 9632, 1073741824, 0, 11392, 17, 0, 11392, 17, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 12288, 1145324612, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14224, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0, 14240, 2290649224, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
