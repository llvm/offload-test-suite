#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 23))) {
        if ((WaveGetLaneIndex() == 5)) {
          if ((WaveGetLaneIndex() == 6)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (38 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 1)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (45 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 21))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (60 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 7))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (83 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() >= 22)) {
        if ((WaveGetLaneIndex() < 13)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (93 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 5))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (112 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (117 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (124 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 23)) {
        if ((WaveGetLaneIndex() >= 19)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (137 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() == 7)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((152 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
            if ((WaveGetLaneIndex() >= 28)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((167 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() >= 17)) {
              result = (result + WaveActiveSum(10));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((174 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i1 == 1)) {
              break;
            }
          }
        }
        if ((WaveGetLaneIndex() < 1)) {
          result = (result + WaveActiveMax(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (184 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (193 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 30))) {
        if ((WaveGetLaneIndex() == 27)) {
          if ((WaveGetLaneIndex() == 29)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (210 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 20)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (217 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 19))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (239 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (235 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 396
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 7168, 536879136, 0, 7168, 536879136, 0, 7168, 536879136, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0, 8768, 1224736768, 0, 8768, 1224736768, 0, 8768, 1224736768, 0, 10688, 1073741824, 0, 10692, 1073741824, 0, 10704, 1073741824, 0, 10708, 1073741824, 0, 11136, 1224736768, 0, 11136, 1224736768, 0, 11136, 1224736768, 0, 11140, 1224736768, 0, 11140, 1224736768, 0, 11140, 1224736768, 0, 11152, 1224736768, 0, 11152, 1224736768, 0, 11152, 1224736768, 0, 11156, 1224736768, 0, 11156, 1224736768, 0, 11156, 1224736768, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 15296, 524800, 0, 15296, 524800, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 576, 17, 0, 576, 17, 0, 7168, 536879136, 0, 7168, 536879136, 0, 7168, 536879136, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7488, 1145324612, 0, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0, 7936, 559240, 0, 8768, 1224736768, 0, 8768, 1224736768, 0, 8768, 1224736768, 0, 10688, 1073741824, 0, 10692, 1073741824, 0, 10704, 1073741824, 0, 10708, 1073741824, 0, 11136, 1224736768, 0, 11136, 1224736768, 0, 11136, 1224736768, 0, 11140, 1224736768, 0, 11140, 1224736768, 0, 11140, 1224736768, 0, 11152, 1224736768, 0, 11152, 1224736768, 0, 11152, 1224736768, 0, 11156, 1224736768, 0, 11156, 1224736768, 0, 11156, 1224736768, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 12352, 1363481681, 0, 15296, 524800, 0, 15296, 524800, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0, 15040, 1431655765, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
