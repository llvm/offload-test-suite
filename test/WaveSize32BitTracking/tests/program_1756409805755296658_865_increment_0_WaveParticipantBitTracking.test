#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 10))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((35 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 24))) {
          if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((61 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 24))) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((85 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 30))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((104 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((129 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 30))) {
            result = (result + WaveActiveSum(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((156 << 6) | (counter0 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 29))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((179 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (184 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 3: {
    for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((211 << 6) | (i3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 6)) {
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            uint counter4 = 0;
            while ((counter4 < 3)) {
              counter4 = (counter4 + 1);
              if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 30))) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((240 << 6) | (counter4 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (249 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (254 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (261 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (265 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
        if ((WaveGetLaneIndex() < 11)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (272 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (281 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (286 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (290 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (300 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (309 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (314 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 486
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 8272, 32, 0, 8288, 32, 0, 8304, 32, 0, 11472, 536871424, 0, 11472, 536871424, 0, 11488, 536871424, 0, 11488, 536871424, 0, 11504, 536871424, 0, 11504, 536871424, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 13504, 2113538, 0, 13504, 2113538, 0, 13504, 2113538, 0, 13520, 2113538, 0, 13520, 2113538, 0, 13520, 2113538, 0, 13536, 2113538, 0, 13536, 2113538, 0, 13536, 2113538, 0, 15376, 1, 0, 15392, 1, 0, 15408, 1, 0, 16704, 8, 0, 17408, 9, 0, 17408, 9, 0, 17984, 272696336, 0, 17984, 272696336, 0, 17984, 272696336, 0, 17984, 272696336, 0, 17984, 272696336, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 19200, 73, 0, 19200, 73, 0, 19200, 73, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 576, 17, 0, 576, 17, 0, 8272, 32, 0, 8288, 32, 0, 8304, 32, 0, 11472, 536871424, 0, 11472, 536871424, 0, 11488, 536871424, 0, 11488, 536871424, 0, 11504, 536871424, 0, 11504, 536871424, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 11776, 1717986918, 0, 13504, 2113538, 0, 13504, 2113538, 0, 13504, 2113538, 0, 13520, 2113538, 0, 13520, 2113538, 0, 13520, 2113538, 0, 13536, 2113538, 0, 13536, 2113538, 0, 13536, 2113538, 0, 15376, 1, 0, 15392, 1, 0, 15408, 1, 0, 16704, 8, 0, 17408, 9, 0, 17408, 9, 0, 17984, 272696336, 0, 17984, 272696336, 0, 17984, 272696336, 0, 17984, 272696336, 0, 17984, 272696336, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 18304, 613566756, 0, 19200, 73, 0, 19200, 73, 0, 19200, 73, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 19776, 1363481681, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0, 20096, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
