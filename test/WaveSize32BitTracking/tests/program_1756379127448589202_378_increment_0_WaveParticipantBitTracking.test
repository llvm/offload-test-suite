#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((21 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 17))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((40 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((54 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((63 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 30))) {
            result = (result + WaveActiveMin(8));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((74 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 30))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((85 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 24))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((104 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i0 == 1)) {
        continue;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (116 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (126 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
            if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((156 << 6) | (counter2 << 4)) | (i3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i3 == 1)) {
              break;
            }
          }
        }
        break;
      }
    case 2: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (169 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 30))) {
              if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 1))) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (209 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 31))) {
              if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 29))) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (233 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (237 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (247 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin(8));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (264 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 31))) {
              if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 25))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (282 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 29))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (293 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(6));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (302 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() >= 18)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (309 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 21))) {
            if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 22))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (327 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() < 9)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (334 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 17))) {
          if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 23))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (360 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter4 = 0;
          while ((counter4 < 2)) {
            counter4 = (counter4 + 1);
            if ((WaveGetLaneIndex() == 28)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((374 << 6) | (counter4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (389 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (394 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (399 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 13)) {
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 4))) {
        for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 31))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((436 << 6) | (i5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i5 == 1)) {
            break;
          }
        }
        if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (464 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 2)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (471 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  for (uint i6 = 0; (i6 < 3); i6 = (i6 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((488 << 6) | (i6 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 930
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1344, 136348168, 0, 1344, 136348168, 0, 1344, 136348168, 0, 1344, 136348168, 0, 1344, 136348168, 0, 1360, 136348168, 0, 1360, 136348168, 0, 1360, 136348168, 0, 1360, 136348168, 0, 1360, 136348168, 0, 3456, 136348168, 0, 3456, 136348168, 0, 3456, 136348168, 0, 3456, 136348168, 0, 3456, 136348168, 0, 3460, 136348168, 0, 3460, 136348168, 0, 3460, 136348168, 0, 3460, 136348168, 0, 3460, 136348168, 0, 3464, 136348168, 0, 3464, 136348168, 0, 3464, 136348168, 0, 3464, 136348168, 0, 3464, 136348168, 0, 3472, 136348168, 0, 3472, 136348168, 0, 3472, 136348168, 0, 3472, 136348168, 0, 3472, 136348168, 0, 3476, 136348168, 0, 3476, 136348168, 0, 3476, 136348168, 0, 3476, 136348168, 0, 3476, 136348168, 0, 3480, 136348168, 0, 3480, 136348168, 0, 3480, 136348168, 0, 3480, 136348168, 0, 3480, 136348168, 0, 4736, 1073741889, 0, 4736, 1073741889, 0, 4736, 1073741889, 0, 4740, 1073741889, 0, 4740, 1073741889, 0, 4740, 1073741889, 0, 4744, 1073741889, 0, 4744, 1073741889, 0, 4744, 1073741889, 0, 4752, 1073741889, 0, 4752, 1073741889, 0, 4752, 1073741889, 0, 4756, 1073741889, 0, 4756, 1073741889, 0, 4756, 1073741889, 0, 4760, 1073741889, 0, 4760, 1073741889, 0, 4760, 1073741889, 0, 5440, 1073741889, 0, 5440, 1073741889, 0, 5440, 1073741889, 0, 5444, 1073741889, 0, 5444, 1073741889, 0, 5444, 1073741889, 0, 5448, 1073741889, 0, 5448, 1073741889, 0, 5448, 1073741889, 0, 5456, 1073741889, 0, 5456, 1073741889, 0, 5456, 1073741889, 0, 5460, 1073741889, 0, 5460, 1073741889, 0, 5460, 1073741889, 0, 5464, 1073741889, 0, 5464, 1073741889, 0, 5464, 1073741889, 0, 6656, 16809984, 0, 6656, 16809984, 0, 6660, 16809984, 0, 6660, 16809984, 0, 6664, 16809984, 0, 6664, 16809984, 0, 6672, 16809984, 0, 6672, 16809984, 0, 6676, 16809984, 0, 6676, 16809984, 0, 6680, 16809984, 0, 6680, 16809984, 0, 7424, 272696336, 0, 7424, 272696336, 0, 7424, 272696336, 0, 7424, 272696336, 0, 7424, 272696336, 0, 15808, 17, 0, 15808, 17, 0, 19776, 2097152, 0, 25216, 537002016, 0, 25216, 537002016, 0, 25216, 537002016, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 1344, 136348168, 0, 1344, 136348168, 0, 1344, 136348168, 0, 1344, 136348168, 0, 1344, 136348168, 0, 1360, 136348168, 0, 1360, 136348168, 0, 1360, 136348168, 0, 1360, 136348168, 0, 1360, 136348168, 0, 3456, 136348168, 0, 3456, 136348168, 0, 3456, 136348168, 0, 3456, 136348168, 0, 3456, 136348168, 0, 3460, 136348168, 0, 3460, 136348168, 0, 3460, 136348168, 0, 3460, 136348168, 0, 3460, 136348168, 0, 3464, 136348168, 0, 3464, 136348168, 0, 3464, 136348168, 0, 3464, 136348168, 0, 3464, 136348168, 0, 3472, 136348168, 0, 3472, 136348168, 0, 3472, 136348168, 0, 3472, 136348168, 0, 3472, 136348168, 0, 3476, 136348168, 0, 3476, 136348168, 0, 3476, 136348168, 0, 3476, 136348168, 0, 3476, 136348168, 0, 3480, 136348168, 0, 3480, 136348168, 0, 3480, 136348168, 0, 3480, 136348168, 0, 3480, 136348168, 0, 4736, 1073741889, 0, 4736, 1073741889, 0, 4736, 1073741889, 0, 4740, 1073741889, 0, 4740, 1073741889, 0, 4740, 1073741889, 0, 4744, 1073741889, 0, 4744, 1073741889, 0, 4744, 1073741889, 0, 4752, 1073741889, 0, 4752, 1073741889, 0, 4752, 1073741889, 0, 4756, 1073741889, 0, 4756, 1073741889, 0, 4756, 1073741889, 0, 4760, 1073741889, 0, 4760, 1073741889, 0, 4760, 1073741889, 0, 5440, 1073741889, 0, 5440, 1073741889, 0, 5440, 1073741889, 0, 5444, 1073741889, 0, 5444, 1073741889, 0, 5444, 1073741889, 0, 5448, 1073741889, 0, 5448, 1073741889, 0, 5448, 1073741889, 0, 5456, 1073741889, 0, 5456, 1073741889, 0, 5456, 1073741889, 0, 5460, 1073741889, 0, 5460, 1073741889, 0, 5460, 1073741889, 0, 5464, 1073741889, 0, 5464, 1073741889, 0, 5464, 1073741889, 0, 6656, 16809984, 0, 6656, 16809984, 0, 6660, 16809984, 0, 6660, 16809984, 0, 6664, 16809984, 0, 6664, 16809984, 0, 6672, 16809984, 0, 6672, 16809984, 0, 6676, 16809984, 0, 6676, 16809984, 0, 6680, 16809984, 0, 6680, 16809984, 0, 7424, 272696336, 0, 7424, 272696336, 0, 7424, 272696336, 0, 7424, 272696336, 0, 7424, 272696336, 0, 15808, 17, 0, 15808, 17, 0, 19776, 2097152, 0, 25216, 537002016, 0, 25216, 537002016, 0, 25216, 537002016, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 25536, 1145324612, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31232, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31248, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0, 31264, 2863311530, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
