#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 30))) {
    if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 27))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 27))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((35 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 28))) {
        if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((61 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 26))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((76 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 28))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((87 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
    if ((WaveGetLaneIndex() >= 17)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((104 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
      if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 30))) {
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 29))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((129 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 21))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((140 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() >= 27)) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((147 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1092
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 9408, 4160749568, 0, 9408, 4160749568, 0, 9408, 4160749568, 0, 9408, 4160749568, 0, 9408, 4160749568, 0, 9424, 4160749568, 0, 9424, 4160749568, 0, 9424, 4160749568, 0, 9424, 4160749568, 0, 9424, 4160749568, 0, 9440, 4160749568, 0, 9440, 4160749568, 0, 9440, 4160749568, 0, 9440, 4160749568, 0, 9440, 4160749568, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 1088, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2256, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2272, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 2288, 3221225983, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5584, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5600, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 5616, 3221225503, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6656, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6672, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 6688, 4294836224, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8256, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8272, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8288, 3221225727, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8960, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8976, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 8992, 3758096447, 0, 9408, 4160749568, 0, 9408, 4160749568, 0, 9408, 4160749568, 0, 9408, 4160749568, 0, 9408, 4160749568, 0, 9424, 4160749568, 0, 9424, 4160749568, 0, 9424, 4160749568, 0, 9424, 4160749568, 0, 9424, 4160749568, 0, 9440, 4160749568, 0, 9440, 4160749568, 0, 9440, 4160749568, 0, 9440, 4160749568, 0, 9440, 4160749568, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
