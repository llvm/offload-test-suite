#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (16 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 26))) {
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 31))) {
            result = (result + WaveActiveMin(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (34 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (48 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 31))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (59 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 15))) {
            if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 19))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (92 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 7))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (111 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 22))) {
            if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 28))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (143 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 13))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (166 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          uint counter0 = 0;
          while ((counter0 < 2)) {
            counter0 = (counter0 + 1);
            if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 16))) {
              result = (result + WaveActiveMax(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((196 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 28))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((221 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 30))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (240 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (249 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 26))) {
        result = (result + WaveActiveMax(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((276 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 10))) {
          if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 17))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((311 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 26))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((336 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((346 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((355 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((360 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((367 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 13))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((386 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  break;
  }
  case 3: {
    if ((WaveGetLaneIndex() == 17)) {
      if ((WaveGetLaneIndex() == 17)) {
        result = (result + WaveActiveMax(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (396 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 3)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (403 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (407 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (417 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (426 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (446 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (455 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 420
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [17664, 67108868, 0, 17664, 67108868, 0, 17680, 67108868, 0, 17680, 67108868, 0, 17696, 67108868, 0, 17696, 67108868, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 26688, 85, 0, 26688, 85, 0, 26688, 85, 0, 26688, 85, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 28544, 85, 0, 28544, 85, 0, 28544, 85, 0, 28544, 85, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 17664, 67108868, 0, 17664, 67108868, 0, 17680, 67108868, 0, 17680, 67108868, 0, 17696, 67108868, 0, 17696, 67108868, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23040, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23056, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 23072, 1145324612, 0, 26688, 85, 0, 26688, 85, 0, 26688, 85, 0, 26688, 85, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 27264, 1431655765, 0, 28544, 85, 0, 28544, 85, 0, 28544, 85, 0, 28544, 85, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0, 29120, 1431655765, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
