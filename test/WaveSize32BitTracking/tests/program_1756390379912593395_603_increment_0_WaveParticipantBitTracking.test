#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() < 3)) {
          result = (result + WaveActiveSum(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((16 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((43 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((53 << 6) | (counter0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((62 << 6) | (counter0 << 4)) | (i1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 2))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((81 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() >= 17)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((90 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (100 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (109 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if ((WaveGetLaneIndex() < 4)) {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (121 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 22))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (136 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter2 = 0;
          while ((counter2 < 3)) {
            counter2 = (counter2 + 1);
            if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 16))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((166 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((185 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 22))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (202 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 492
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1040, 5, 0, 1040, 5, 0, 1056, 5, 0, 1056, 5, 0, 1072, 5, 0, 1072, 5, 0, 2768, 65792, 0, 2768, 65792, 0, 2772, 65792, 0, 2772, 65792, 0, 2784, 65792, 0, 2784, 65792, 0, 2788, 65792, 0, 2788, 65792, 0, 2800, 65792, 0, 2800, 65792, 0, 2804, 65792, 0, 2804, 65792, 0, 3408, 85, 0, 3408, 85, 0, 3408, 85, 0, 3408, 85, 0, 3412, 85, 0, 3412, 85, 0, 3412, 85, 0, 3412, 85, 0, 3424, 85, 0, 3424, 85, 0, 3424, 85, 0, 3424, 85, 0, 3428, 85, 0, 3428, 85, 0, 3428, 85, 0, 3428, 85, 0, 3440, 85, 0, 3440, 85, 0, 3440, 85, 0, 3440, 85, 0, 3444, 85, 0, 3444, 85, 0, 3444, 85, 0, 3444, 85, 0, 5200, 1028, 0, 5200, 1028, 0, 5204, 1028, 0, 5204, 1028, 0, 5216, 1028, 0, 5216, 1028, 0, 5220, 1028, 0, 5220, 1028, 0, 5232, 1028, 0, 5232, 1028, 0, 5236, 1028, 0, 5236, 1028, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 6400, 8, 0, 11856, 8390656, 0, 11856, 8390656, 0, 11872, 8390656, 0, 11872, 8390656, 0, 11888, 8390656, 0, 11888, 8390656, 0, 1040, 5, 0, 1040, 5, 0, 1056, 5, 0, 1056, 5, 0, 1072, 5, 0, 1072, 5, 0, 2768, 65792, 0, 2768, 65792, 0, 2772, 65792, 0, 2772, 65792, 0, 2784, 65792, 0, 2784, 65792, 0, 2788, 65792, 0, 2788, 65792, 0, 2800, 65792, 0, 2800, 65792, 0, 2804, 65792, 0, 2804, 65792, 0, 3408, 85, 0, 3408, 85, 0, 3408, 85, 0, 3408, 85, 0, 3412, 85, 0, 3412, 85, 0, 3412, 85, 0, 3412, 85, 0, 3424, 85, 0, 3424, 85, 0, 3424, 85, 0, 3424, 85, 0, 3428, 85, 0, 3428, 85, 0, 3428, 85, 0, 3428, 85, 0, 3440, 85, 0, 3440, 85, 0, 3440, 85, 0, 3440, 85, 0, 3444, 85, 0, 3444, 85, 0, 3444, 85, 0, 3444, 85, 0, 5200, 1028, 0, 5200, 1028, 0, 5204, 1028, 0, 5204, 1028, 0, 5216, 1028, 0, 5216, 1028, 0, 5220, 1028, 0, 5220, 1028, 0, 5232, 1028, 0, 5232, 1028, 0, 5236, 1028, 0, 5236, 1028, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5776, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5792, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 5808, 1431568384, 0, 6400, 8, 0, 11856, 8390656, 0, 11856, 8390656, 0, 11872, 8390656, 0, 11872, 8390656, 0, 11888, 8390656, 0, 11888, 8390656, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
