#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 18)) {
          result = (result + WaveActiveMin(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((33 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 21))) {
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((51 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 28))) {
            result = (result + WaveActiveMin(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((62 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMin(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((81 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((100 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 15)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((109 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 1)) {
        continue;
      }
    }
    break;
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (119 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (129 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (138 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((161 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 3)) {
          counter2 = (counter2 + 1);
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((178 << 6) | (i1 << 4)) | (counter2 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((187 << 6) | (i1 << 4)) | (counter2 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((192 << 6) | (i1 << 4)) | (counter2 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((196 << 6) | (i1 << 4)) | (counter2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 21))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((209 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (216 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (220 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (233 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 28))) {
            if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 25))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (253 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 28))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (264 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 18)) {
            result = (result + WaveActiveMax(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (271 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (276 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (285 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    uint counter3 = 0;
    while ((counter3 < 2)) {
      counter3 = (counter3 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((308 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 840
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 2112, 262144, 0, 2128, 262144, 0, 2144, 262144, 0, 3264, 1073741828, 0, 3264, 1073741828, 0, 3280, 1073741828, 0, 3280, 1073741828, 0, 3296, 1073741828, 0, 3296, 1073741828, 0, 3968, 1073741824, 0, 3984, 1073741824, 0, 4000, 1073741824, 0, 5184, 262144, 0, 5200, 262144, 0, 5216, 262144, 0, 6400, 1024, 0, 6416, 1024, 0, 6432, 1024, 0, 7616, 559240, 0, 7616, 559240, 0, 7616, 559240, 0, 7616, 559240, 0, 7616, 559240, 0, 8256, 17, 0, 8256, 17, 0, 11396, 64, 0, 11400, 64, 0, 11404, 64, 0, 11412, 64, 0, 11416, 64, 0, 11420, 64, 0, 11428, 64, 0, 11432, 64, 0, 11436, 64, 0, 11972, 4195328, 0, 11972, 4195328, 0, 11976, 4195328, 0, 11976, 4195328, 0, 11980, 4195328, 0, 11980, 4195328, 0, 11988, 4195328, 0, 11988, 4195328, 0, 11992, 4195328, 0, 11992, 4195328, 0, 11996, 4195328, 0, 11996, 4195328, 0, 12004, 4195328, 0, 12004, 4195328, 0, 12008, 4195328, 0, 12008, 4195328, 0, 12012, 4195328, 0, 12012, 4195328, 0, 12292, 67125252, 0, 12292, 67125252, 0, 12292, 67125252, 0, 12296, 67125252, 0, 12296, 67125252, 0, 12296, 67125252, 0, 12300, 67125252, 0, 12300, 67125252, 0, 12300, 67125252, 0, 12308, 67125252, 0, 12308, 67125252, 0, 12308, 67125252, 0, 12312, 67125252, 0, 12312, 67125252, 0, 12312, 67125252, 0, 12316, 67125252, 0, 12316, 67125252, 0, 12316, 67125252, 0, 12324, 67125252, 0, 12324, 67125252, 0, 12324, 67125252, 0, 12328, 67125252, 0, 12328, 67125252, 0, 12328, 67125252, 0, 12332, 67125252, 0, 12332, 67125252, 0, 12332, 67125252, 0, 13380, 1145044996, 0, 13380, 1145044996, 0, 13380, 1145044996, 0, 13380, 1145044996, 0, 13384, 1145044996, 0, 13384, 1145044996, 0, 13384, 1145044996, 0, 13384, 1145044996, 0, 13388, 1145044996, 0, 13388, 1145044996, 0, 13388, 1145044996, 0, 13388, 1145044996, 0, 13396, 1145044996, 0, 13396, 1145044996, 0, 13396, 1145044996, 0, 13396, 1145044996, 0, 13400, 1145044996, 0, 13400, 1145044996, 0, 13400, 1145044996, 0, 13400, 1145044996, 0, 13404, 1145044996, 0, 13404, 1145044996, 0, 13404, 1145044996, 0, 13404, 1145044996, 0, 13412, 1145044996, 0, 13412, 1145044996, 0, 13412, 1145044996, 0, 13412, 1145044996, 0, 13416, 1145044996, 0, 13416, 1145044996, 0, 13416, 1145044996, 0, 13416, 1145044996, 0, 13420, 1145044996, 0, 13420, 1145044996, 0, 13420, 1145044996, 0, 13420, 1145044996, 0, 13824, 559240, 0, 13824, 559240, 0, 13824, 559240, 0, 13824, 559240, 0, 13824, 559240, 0, 14912, 73, 0, 14912, 73, 0, 14912, 73, 0, 18240, 272696336, 0, 18240, 272696336, 0, 18240, 272696336, 0, 18240, 272696336, 0, 18240, 272696336, 0, 19728, 545392672, 0, 19728, 545392672, 0, 19728, 545392672, 0, 19728, 545392672, 0, 19728, 545392672, 0, 19744, 545392672, 0, 19744, 545392672, 0, 19744, 545392672, 0, 19744, 545392672, 0, 19744, 545392672, 0, 576, 17, 0, 576, 17, 0, 2112, 262144, 0, 2128, 262144, 0, 2144, 262144, 0, 3264, 1073741828, 0, 3264, 1073741828, 0, 3280, 1073741828, 0, 3280, 1073741828, 0, 3296, 1073741828, 0, 3296, 1073741828, 0, 3968, 1073741824, 0, 3984, 1073741824, 0, 4000, 1073741824, 0, 5184, 262144, 0, 5200, 262144, 0, 5216, 262144, 0, 6400, 1024, 0, 6416, 1024, 0, 6432, 1024, 0, 7616, 559240, 0, 7616, 559240, 0, 7616, 559240, 0, 7616, 559240, 0, 7616, 559240, 0, 8256, 17, 0, 8256, 17, 0, 11396, 64, 0, 11400, 64, 0, 11404, 64, 0, 11412, 64, 0, 11416, 64, 0, 11420, 64, 0, 11428, 64, 0, 11432, 64, 0, 11436, 64, 0, 11972, 4195328, 0, 11972, 4195328, 0, 11976, 4195328, 0, 11976, 4195328, 0, 11980, 4195328, 0, 11980, 4195328, 0, 11988, 4195328, 0, 11988, 4195328, 0, 11992, 4195328, 0, 11992, 4195328, 0, 11996, 4195328, 0, 11996, 4195328, 0, 12004, 4195328, 0, 12004, 4195328, 0, 12008, 4195328, 0, 12008, 4195328, 0, 12012, 4195328, 0, 12012, 4195328, 0, 12292, 67125252, 0, 12292, 67125252, 0, 12292, 67125252, 0, 12296, 67125252, 0, 12296, 67125252, 0, 12296, 67125252, 0, 12300, 67125252, 0, 12300, 67125252, 0, 12300, 67125252, 0, 12308, 67125252, 0, 12308, 67125252, 0, 12308, 67125252, 0, 12312, 67125252, 0, 12312, 67125252, 0, 12312, 67125252, 0, 12316, 67125252, 0, 12316, 67125252, 0, 12316, 67125252, 0, 12324, 67125252, 0, 12324, 67125252, 0, 12324, 67125252, 0, 12328, 67125252, 0, 12328, 67125252, 0, 12328, 67125252, 0, 12332, 67125252, 0, 12332, 67125252, 0, 12332, 67125252, 0, 13380, 1145044996, 0, 13380, 1145044996, 0, 13380, 1145044996, 0, 13380, 1145044996, 0, 13384, 1145044996, 0, 13384, 1145044996, 0, 13384, 1145044996, 0, 13384, 1145044996, 0, 13388, 1145044996, 0, 13388, 1145044996, 0, 13388, 1145044996, 0, 13388, 1145044996, 0, 13396, 1145044996, 0, 13396, 1145044996, 0, 13396, 1145044996, 0, 13396, 1145044996, 0, 13400, 1145044996, 0, 13400, 1145044996, 0, 13400, 1145044996, 0, 13400, 1145044996, 0, 13404, 1145044996, 0, 13404, 1145044996, 0, 13404, 1145044996, 0, 13404, 1145044996, 0, 13412, 1145044996, 0, 13412, 1145044996, 0, 13412, 1145044996, 0, 13412, 1145044996, 0, 13416, 1145044996, 0, 13416, 1145044996, 0, 13416, 1145044996, 0, 13416, 1145044996, 0, 13420, 1145044996, 0, 13420, 1145044996, 0, 13420, 1145044996, 0, 13420, 1145044996, 0, 13824, 559240, 0, 13824, 559240, 0, 13824, 559240, 0, 13824, 559240, 0, 13824, 559240, 0, 14912, 73, 0, 14912, 73, 0, 14912, 73, 0, 18240, 272696336, 0, 18240, 272696336, 0, 18240, 272696336, 0, 18240, 272696336, 0, 18240, 272696336, 0, 19728, 545392672, 0, 19728, 545392672, 0, 19728, 545392672, 0, 19728, 545392672, 0, 19728, 545392672, 0, 19744, 545392672, 0, 19744, 545392672, 0, 19744, 545392672, 0, 19744, 545392672, 0, 19744, 545392672, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
