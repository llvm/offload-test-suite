#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() >= 22)) {
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (22 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (31 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (40 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (54 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (63 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (72 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (77 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 27))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((98 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() >= 31)) {
        if ((WaveGetLaneIndex() < 15)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((110 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 22))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((121 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() == 28)) {
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (141 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if ((WaveGetLaneIndex() >= 26)) {
          if ((WaveGetLaneIndex() >= 31)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (151 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (156 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 3: {
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 22))) {
            result = (result + WaveActiveMax(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((179 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    if ((WaveGetLaneIndex() == 14)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (186 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
    if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 25))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((209 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  uint counter3 = 0;
  while ((counter3 < 3)) {
    counter3 = (counter3 + 1);
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((225 << 6) | (counter3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 1)) {
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 14))) {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 18))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((254 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 16))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((285 << 6) | (counter3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 17))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((300 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 26)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((307 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
      if ((WaveGetLaneIndex() < 6)) {
        if ((WaveGetLaneIndex() < 7)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((325 << 6) | (counter3 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 11)) {
          result = (result + WaveActiveMax(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((332 << 6) | (counter3 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 7)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((339 << 6) | (counter3 << 4)) | (i5 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((i5 == 1)) {
      break;
    }
  }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((351 << 6) | (counter3 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1140
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 6272, 2281701376, 0, 6272, 2281701376, 0, 6288, 2281701376, 0, 6288, 2281701376, 0, 7744, 2290089992, 0, 7744, 2290089992, 0, 7744, 2290089992, 0, 7744, 2290089992, 0, 7760, 2290089992, 0, 7760, 2290089992, 0, 7760, 2290089992, 0, 7760, 2290089992, 0, 13376, 41943056, 0, 13376, 41943056, 0, 13376, 41943056, 0, 13392, 41943056, 0, 13392, 41943056, 0, 13392, 41943056, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 20816, 61, 0, 20816, 61, 0, 20816, 61, 0, 20816, 61, 0, 20816, 61, 0, 20820, 61, 0, 20820, 61, 0, 20820, 61, 0, 20820, 61, 0, 20820, 61, 0, 20832, 61, 0, 20832, 61, 0, 20832, 61, 0, 20832, 61, 0, 20832, 61, 0, 20836, 61, 0, 20836, 61, 0, 20836, 61, 0, 20836, 61, 0, 20836, 61, 0, 20848, 61, 0, 20848, 61, 0, 20848, 61, 0, 20848, 61, 0, 20848, 61, 0, 20852, 61, 0, 20852, 61, 0, 20852, 61, 0, 20852, 61, 0, 20852, 61, 0, 21264, 61, 0, 21264, 61, 0, 21264, 61, 0, 21264, 61, 0, 21264, 61, 0, 21268, 61, 0, 21268, 61, 0, 21268, 61, 0, 21268, 61, 0, 21268, 61, 0, 21280, 61, 0, 21280, 61, 0, 21280, 61, 0, 21280, 61, 0, 21280, 61, 0, 21284, 61, 0, 21284, 61, 0, 21284, 61, 0, 21284, 61, 0, 21284, 61, 0, 21296, 61, 0, 21296, 61, 0, 21296, 61, 0, 21296, 61, 0, 21296, 61, 0, 21300, 61, 0, 21300, 61, 0, 21300, 61, 0, 21300, 61, 0, 21300, 61, 0, 21712, 128, 0, 21716, 128, 0, 21728, 128, 0, 21732, 128, 0, 21744, 128, 0, 21748, 128, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 576, 17, 0, 576, 17, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 4928, 1145324612, 0, 6272, 2281701376, 0, 6272, 2281701376, 0, 6288, 2281701376, 0, 6288, 2281701376, 0, 7744, 2290089992, 0, 7744, 2290089992, 0, 7744, 2290089992, 0, 7744, 2290089992, 0, 7760, 2290089992, 0, 7760, 2290089992, 0, 7760, 2290089992, 0, 7760, 2290089992, 0, 13376, 41943056, 0, 13376, 41943056, 0, 13376, 41943056, 0, 13392, 41943056, 0, 13392, 41943056, 0, 13392, 41943056, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14416, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14432, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 14448, 2863311530, 0, 20816, 61, 0, 20816, 61, 0, 20816, 61, 0, 20816, 61, 0, 20816, 61, 0, 20820, 61, 0, 20820, 61, 0, 20820, 61, 0, 20820, 61, 0, 20820, 61, 0, 20832, 61, 0, 20832, 61, 0, 20832, 61, 0, 20832, 61, 0, 20832, 61, 0, 20836, 61, 0, 20836, 61, 0, 20836, 61, 0, 20836, 61, 0, 20836, 61, 0, 20848, 61, 0, 20848, 61, 0, 20848, 61, 0, 20848, 61, 0, 20848, 61, 0, 20852, 61, 0, 20852, 61, 0, 20852, 61, 0, 20852, 61, 0, 20852, 61, 0, 21264, 61, 0, 21264, 61, 0, 21264, 61, 0, 21264, 61, 0, 21264, 61, 0, 21268, 61, 0, 21268, 61, 0, 21268, 61, 0, 21268, 61, 0, 21268, 61, 0, 21280, 61, 0, 21280, 61, 0, 21280, 61, 0, 21280, 61, 0, 21280, 61, 0, 21284, 61, 0, 21284, 61, 0, 21284, 61, 0, 21284, 61, 0, 21284, 61, 0, 21296, 61, 0, 21296, 61, 0, 21296, 61, 0, 21296, 61, 0, 21296, 61, 0, 21300, 61, 0, 21300, 61, 0, 21300, 61, 0, 21300, 61, 0, 21300, 61, 0, 21712, 128, 0, 21716, 128, 0, 21728, 128, 0, 21732, 128, 0, 21744, 128, 0, 21748, 128, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22480, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22496, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0, 22512, 1431655765, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
