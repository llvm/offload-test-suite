#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 15)) {
        if ((WaveGetLaneIndex() >= 23)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (19 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 21))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((39 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 10)) {
          if ((WaveGetLaneIndex() >= 17)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((51 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 21)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((58 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((81 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (86 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() >= 16)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (106 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (100 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (119 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 25))) {
            if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (145 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 24))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (164 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (169 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 22))) {
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 25))) {
          result = (result + WaveActiveMax(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (187 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 23))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (200 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 15)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (207 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 22))) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 24))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((233 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 11))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((252 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 31))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((267 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 27))) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((286 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((i1 == 1)) {
      break;
    }
  }
  break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (293 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 432
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [14912, 603979776, 0, 14912, 603979776, 0, 14928, 603979776, 0, 14928, 603979776, 0, 16128, 1050624, 0, 16128, 1050624, 0, 16144, 1050624, 0, 16144, 1050624, 0, 18304, 4, 0, 18320, 4, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 7616, 73, 0, 7616, 73, 0, 7616, 73, 0, 11968, 2449473536, 0, 11968, 2449473536, 0, 11968, 2449473536, 0, 12800, 2449473536, 0, 12800, 2449473536, 0, 12800, 2449473536, 0, 1216, 1, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 5200, 268500992, 0, 5200, 268500992, 0, 5216, 268500992, 0, 5216, 268500992, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 14912, 603979776, 0, 14912, 603979776, 0, 14928, 603979776, 0, 14928, 603979776, 0, 16128, 1050624, 0, 16128, 1050624, 0, 16144, 1050624, 0, 16144, 1050624, 0, 18304, 4, 0, 18320, 4, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6784, 4294901760, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 6400, 43690, 0, 7616, 73, 0, 7616, 73, 0, 7616, 73, 0, 11968, 2449473536, 0, 11968, 2449473536, 0, 11968, 2449473536, 0, 12800, 2449473536, 0, 12800, 2449473536, 0, 12800, 2449473536, 0, 1216, 1, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2512, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 2528, 2453667986, 0, 5200, 268500992, 0, 5200, 268500992, 0, 5216, 268500992, 0, 5216, 268500992, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0, 5504, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
