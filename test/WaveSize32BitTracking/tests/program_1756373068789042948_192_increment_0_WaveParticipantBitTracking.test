#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 31))) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (23 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 22))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (34 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 30))) {
        if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (68 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((83 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 6)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((90 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i0 == 1)) {
            continue;
          }
        }
      } else {
      if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 26))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (110 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (120 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (129 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
    break;
  }
  case 2: {
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((149 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() >= 19)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((164 << 6) | (counter1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((183 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (192 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (202 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (211 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (216 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 22))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((234 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 25))) {
          if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 26))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((268 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter5 = 0;
          while ((counter5 < 2)) {
            counter5 = (counter5 + 1);
            if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 1))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((290 << 6) | (counter4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter5 == 1)) {
              break;
            }
          }
          if (((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 16))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((304 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 24))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((321 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 528
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1472, 8, 0, 2176, 73, 0, 2176, 73, 0, 2176, 73, 0, 5312, 128, 0, 5328, 128, 0, 7040, 8192, 0, 7680, 16, 0, 9552, 536870948, 0, 9552, 536870948, 0, 9552, 536870948, 0, 9568, 536870948, 0, 9568, 536870948, 0, 9568, 536870948, 0, 10512, 613416960, 0, 10512, 613416960, 0, 10512, 613416960, 0, 10512, 613416960, 0, 10516, 613416960, 0, 10516, 613416960, 0, 10516, 613416960, 0, 10516, 613416960, 0, 10528, 613416960, 0, 10528, 613416960, 0, 10528, 613416960, 0, 10528, 613416960, 0, 10532, 613416960, 0, 10532, 613416960, 0, 10532, 613416960, 0, 10532, 613416960, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 12928, 17, 0, 12928, 17, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 1472, 8, 0, 2176, 73, 0, 2176, 73, 0, 2176, 73, 0, 5312, 128, 0, 5328, 128, 0, 7040, 8192, 0, 7680, 16, 0, 9552, 536870948, 0, 9552, 536870948, 0, 9552, 536870948, 0, 9568, 536870948, 0, 9568, 536870948, 0, 9568, 536870948, 0, 10512, 613416960, 0, 10512, 613416960, 0, 10512, 613416960, 0, 10512, 613416960, 0, 10516, 613416960, 0, 10516, 613416960, 0, 10516, 613416960, 0, 10516, 613416960, 0, 10528, 613416960, 0, 10528, 613416960, 0, 10528, 613416960, 0, 10528, 613416960, 0, 10532, 613416960, 0, 10532, 613416960, 0, 10532, 613416960, 0, 10532, 613416960, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11728, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11744, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 11760, 1431655765, 0, 12928, 17, 0, 12928, 17, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0, 13824, 1145324612, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
