#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((26 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 15)) {
          if ((WaveGetLaneIndex() >= 28)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((38 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((48 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((57 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((61 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if ((WaveGetLaneIndex() < 9)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((68 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 2))) {
          result = (result + WaveActiveSum(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((91 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 22))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((113 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter1 == 2)) {
            break;
          }
        }
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (121 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (125 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 21))) {
    if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 28))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (143 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (152 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 14))) {
        if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 26))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (187 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 21))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (204 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (213 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (218 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (222 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (231 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 492
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1664, 146, 0, 1664, 146, 0, 1664, 146, 0, 1680, 146, 0, 1680, 146, 0, 1680, 146, 0, 1696, 146, 0, 1696, 146, 0, 1696, 146, 0, 3072, 16, 0, 3088, 16, 0, 3104, 16, 0, 4352, 146, 0, 4352, 146, 0, 4352, 146, 0, 4368, 146, 0, 4368, 146, 0, 4368, 146, 0, 4384, 146, 0, 4384, 146, 0, 4384, 146, 0, 7236, 4194304, 0, 7240, 4194304, 0, 7252, 4194304, 0, 7256, 4194304, 0, 7268, 4194304, 0, 7272, 4194304, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9728, 1397760, 0, 9728, 1397760, 0, 9728, 1397760, 0, 9728, 1397760, 0, 9728, 1397760, 0, 9728, 1397760, 0, 13056, 262144, 0, 13632, 332800, 0, 13632, 332800, 0, 13632, 332800, 0, 13632, 332800, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 14784, 698880, 0, 14784, 698880, 0, 14784, 698880, 0, 14784, 698880, 0, 14784, 698880, 0, 14784, 698880, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 1664, 146, 0, 1664, 146, 0, 1664, 146, 0, 1680, 146, 0, 1680, 146, 0, 1680, 146, 0, 1696, 146, 0, 1696, 146, 0, 1696, 146, 0, 3072, 16, 0, 3088, 16, 0, 3104, 16, 0, 4352, 146, 0, 4352, 146, 0, 4352, 146, 0, 4368, 146, 0, 4368, 146, 0, 4368, 146, 0, 4384, 146, 0, 4384, 146, 0, 4384, 146, 0, 7236, 4194304, 0, 7240, 4194304, 0, 7252, 4194304, 0, 7256, 4194304, 0, 7268, 4194304, 0, 7272, 4194304, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 7744, 613566756, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9152, 4026532351, 0, 9728, 1397760, 0, 9728, 1397760, 0, 9728, 1397760, 0, 9728, 1397760, 0, 9728, 1397760, 0, 9728, 1397760, 0, 13056, 262144, 0, 13632, 332800, 0, 13632, 332800, 0, 13632, 332800, 0, 13632, 332800, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 13952, 2096640, 0, 14784, 698880, 0, 14784, 698880, 0, 14784, 698880, 0, 14784, 698880, 0, 14784, 698880, 0, 14784, 698880, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
