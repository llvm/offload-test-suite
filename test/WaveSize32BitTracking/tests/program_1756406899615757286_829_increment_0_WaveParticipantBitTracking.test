#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 21))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((31 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 24))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((50 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((65 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 8)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (82 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 2)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (89 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (94 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if ((WaveGetLaneIndex() == 2)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (117 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 0)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (113 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 19)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (107 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 21))) {
    if ((WaveGetLaneIndex() == 0)) {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (146 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (155 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (160 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (164 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((WaveGetLaneIndex() == 7)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (171 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 26))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (182 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 384
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2004, 2097664, 0, 2004, 2097664, 0, 2008, 2097664, 0, 2008, 2097664, 0, 2020, 2097664, 0, 2020, 2097664, 0, 2024, 2097664, 0, 2024, 2097664, 0, 2036, 2097664, 0, 2036, 2097664, 0, 2040, 2097664, 0, 2040, 2097664, 0, 3220, 17039872, 0, 3220, 17039872, 0, 3220, 17039872, 0, 3224, 17039872, 0, 3224, 17039872, 0, 3224, 17039872, 0, 3236, 17039872, 0, 3236, 17039872, 0, 3236, 17039872, 0, 3240, 17039872, 0, 3240, 17039872, 0, 3240, 17039872, 0, 3252, 17039872, 0, 3252, 17039872, 0, 3252, 17039872, 0, 3256, 17039872, 0, 3256, 17039872, 0, 3256, 17039872, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 7488, 4, 0, 7232, 1, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 9344, 1, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 1, 0, 2004, 2097664, 0, 2004, 2097664, 0, 2008, 2097664, 0, 2008, 2097664, 0, 2020, 2097664, 0, 2020, 2097664, 0, 2024, 2097664, 0, 2024, 2097664, 0, 2036, 2097664, 0, 2036, 2097664, 0, 2040, 2097664, 0, 2040, 2097664, 0, 3220, 17039872, 0, 3220, 17039872, 0, 3220, 17039872, 0, 3224, 17039872, 0, 3224, 17039872, 0, 3224, 17039872, 0, 3236, 17039872, 0, 3236, 17039872, 0, 3236, 17039872, 0, 3240, 17039872, 0, 3240, 17039872, 0, 3240, 17039872, 0, 3252, 17039872, 0, 3252, 17039872, 0, 3252, 17039872, 0, 3256, 17039872, 0, 3256, 17039872, 0, 3256, 17039872, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 6016, 613566756, 0, 7488, 4, 0, 7232, 1, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 6848, 4294443008, 0, 9344, 1, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 4227858434, 0, 11648, 1, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
