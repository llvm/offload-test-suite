#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 28))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (30 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 9)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (24 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 25))) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (20 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (40 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (49 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (54 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (61 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (65 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            if ((WaveGetLaneIndex() >= 18)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((88 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (97 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (111 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (120 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (129 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 330
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1536, 504, 0, 1536, 504, 0, 1536, 504, 0, 1536, 504, 0, 1536, 504, 0, 1536, 504, 0, 1280, 234881024, 0, 1280, 234881024, 0, 1280, 234881024, 0, 2560, 17, 0, 2560, 17, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3904, 559240, 0, 3904, 559240, 0, 3904, 559240, 0, 3904, 559240, 0, 3904, 559240, 0, 5632, 1090781184, 0, 5632, 1090781184, 0, 5632, 1090781184, 0, 5648, 1090781184, 0, 5648, 1090781184, 0, 5648, 1090781184, 0, 5664, 1090781184, 0, 5664, 1090781184, 0, 5664, 1090781184, 0, 6208, 272696336, 0, 6208, 272696336, 0, 6208, 272696336, 0, 6208, 272696336, 0, 6208, 272696336, 0, 7104, 68174084, 0, 7104, 68174084, 0, 7104, 68174084, 0, 7104, 68174084, 0, 7104, 68174084, 0, 7680, 68174084, 0, 7680, 68174084, 0, 7680, 68174084, 0, 7680, 68174084, 0, 7680, 68174084, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1920, 4026531847, 0, 1536, 504, 0, 1536, 504, 0, 1536, 504, 0, 1536, 504, 0, 1536, 504, 0, 1536, 504, 0, 1280, 234881024, 0, 1280, 234881024, 0, 1280, 234881024, 0, 2560, 17, 0, 2560, 17, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3456, 1145324612, 0, 3904, 559240, 0, 3904, 559240, 0, 3904, 559240, 0, 3904, 559240, 0, 3904, 559240, 0, 5632, 1090781184, 0, 5632, 1090781184, 0, 5632, 1090781184, 0, 5648, 1090781184, 0, 5648, 1090781184, 0, 5648, 1090781184, 0, 5664, 1090781184, 0, 5664, 1090781184, 0, 5664, 1090781184, 0, 6208, 272696336, 0, 6208, 272696336, 0, 6208, 272696336, 0, 6208, 272696336, 0, 6208, 272696336, 0, 7104, 68174084, 0, 7104, 68174084, 0, 7104, 68174084, 0, 7104, 68174084, 0, 7104, 68174084, 0, 7680, 68174084, 0, 7680, 68174084, 0, 7680, 68174084, 0, 7680, 68174084, 0, 7680, 68174084, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
