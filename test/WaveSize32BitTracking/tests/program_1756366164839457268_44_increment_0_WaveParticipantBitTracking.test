#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (28 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() < 7)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((43 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((60 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((69 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((74 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
        }
        if ((i0 == 1)) {
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (82 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 510
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1792, 73, 0, 1792, 73, 0, 1792, 73, 0, 2752, 18, 0, 2752, 18, 0, 2768, 18, 0, 2768, 18, 0, 4420, 272696336, 0, 4420, 272696336, 0, 4420, 272696336, 0, 4420, 272696336, 0, 4420, 272696336, 0, 4424, 272696336, 0, 4424, 272696336, 0, 4424, 272696336, 0, 4424, 272696336, 0, 4424, 272696336, 0, 4436, 272696336, 0, 4436, 272696336, 0, 4436, 272696336, 0, 4436, 272696336, 0, 4436, 272696336, 0, 4440, 272696336, 0, 4440, 272696336, 0, 4440, 272696336, 0, 4440, 272696336, 0, 4440, 272696336, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1792, 73, 0, 1792, 73, 0, 1792, 73, 0, 2752, 18, 0, 2752, 18, 0, 2768, 18, 0, 2768, 18, 0, 4420, 272696336, 0, 4420, 272696336, 0, 4420, 272696336, 0, 4420, 272696336, 0, 4420, 272696336, 0, 4424, 272696336, 0, 4424, 272696336, 0, 4424, 272696336, 0, 4424, 272696336, 0, 4424, 272696336, 0, 4436, 272696336, 0, 4436, 272696336, 0, 4436, 272696336, 0, 4436, 272696336, 0, 4436, 272696336, 0, 4440, 272696336, 0, 4440, 272696336, 0, 4440, 272696336, 0, 4440, 272696336, 0, 4440, 272696336, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4740, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4744, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4756, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 4760, 2454267026, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0, 5248, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
