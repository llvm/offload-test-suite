#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (23 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if ((WaveGetLaneIndex() == 20)) {
    if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 26))) {
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 31))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (54 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 7)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (63 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 23))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((87 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 31)) {
          if ((WaveGetLaneIndex() < 7)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((97 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 31))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((108 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          continue;
        }
        if ((i0 == 2)) {
          break;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (123 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((140 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 22)) {
          if ((WaveGetLaneIndex() < 3)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((150 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 24)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((157 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 5))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((180 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  case 3: {
    uint counter2 = 0;
    while ((counter2 < 3)) {
      counter2 = (counter2 + 1);
      if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 16))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((198 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 23))) {
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((224 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 23))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((239 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter2 == 2)) {
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 546
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 272696336, 0, 1152, 272696336, 0, 1152, 272696336, 0, 1152, 272696336, 0, 1152, 272696336, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 5568, 285212945, 0, 5568, 285212945, 0, 5568, 285212945, 0, 5568, 285212945, 0, 5568, 285212945, 0, 5584, 285212945, 0, 5584, 285212945, 0, 5584, 285212945, 0, 5584, 285212945, 0, 5584, 285212945, 0, 5600, 285212945, 0, 5600, 285212945, 0, 5600, 285212945, 0, 5600, 285212945, 0, 5600, 285212945, 0, 6912, 17, 0, 6912, 17, 0, 6928, 17, 0, 6928, 17, 0, 6944, 17, 0, 6944, 17, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 11520, 1048609, 0, 11520, 1048609, 0, 11520, 1048609, 0, 11536, 1048609, 0, 11536, 1048609, 0, 11536, 1048609, 0, 12688, 69632, 0, 12688, 69632, 0, 12704, 69632, 0, 12704, 69632, 0, 15312, 8392768, 0, 15312, 8392768, 0, 15312, 8392768, 0, 15328, 8392768, 0, 15328, 8392768, 0, 15328, 8392768, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 1152, 272696336, 0, 1152, 272696336, 0, 1152, 272696336, 0, 1152, 272696336, 0, 1152, 272696336, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 1472, 613566756, 0, 5568, 285212945, 0, 5568, 285212945, 0, 5568, 285212945, 0, 5568, 285212945, 0, 5568, 285212945, 0, 5584, 285212945, 0, 5584, 285212945, 0, 5584, 285212945, 0, 5584, 285212945, 0, 5584, 285212945, 0, 5600, 285212945, 0, 5600, 285212945, 0, 5600, 285212945, 0, 5600, 285212945, 0, 5600, 285212945, 0, 6912, 17, 0, 6912, 17, 0, 6928, 17, 0, 6928, 17, 0, 6944, 17, 0, 6944, 17, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 7872, 286331153, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8960, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 8976, 572662306, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10048, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 10064, 1996488704, 0, 11520, 1048609, 0, 11520, 1048609, 0, 11520, 1048609, 0, 11536, 1048609, 0, 11536, 1048609, 0, 11536, 1048609, 0, 12688, 69632, 0, 12688, 69632, 0, 12704, 69632, 0, 12704, 69632, 0, 15312, 8392768, 0, 15312, 8392768, 0, 15312, 8392768, 0, 15328, 8392768, 0, 15328, 8392768, 0, 15328, 8392768, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
