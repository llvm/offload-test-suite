#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 0))) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (29 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 20))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (25 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() == 28)) {
        if ((WaveGetLaneIndex() == 3)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (44 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 2)) {
          counter0 = (counter0 + 1);
          if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 7))) {
            result = (result + WaveActiveMax(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((66 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (75 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 16))) {
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 26))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (105 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 22))) {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 28))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (123 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 9))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (142 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() == 1)) {
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            uint counter1 = 0;
            while ((counter1 < 3)) {
              counter1 = (counter1 + 1);
              if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 14))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((181 << 6) | (counter1 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 20))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((196 << 6) | (counter1 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (205 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if ((WaveGetLaneIndex() == 23)) {
              if ((WaveGetLaneIndex() == 29)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (215 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() == 8)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (222 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (229 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (233 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (242 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (247 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (251 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 288
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1856, 134218753, 0, 1856, 134218753, 0, 1856, 134218753, 0, 1600, 1056776, 0, 1600, 1056776, 0, 1600, 1056776, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 6720, 65540, 0, 6720, 65540, 0, 7872, 2147483652, 0, 7872, 2147483652, 0, 9088, 65536, 0, 15488, 272696336, 0, 15488, 272696336, 0, 15488, 272696336, 0, 15488, 272696336, 0, 15488, 272696336, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 1856, 134218753, 0, 1856, 134218753, 0, 1856, 134218753, 0, 1600, 1056776, 0, 1600, 1056776, 0, 1600, 1056776, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 4800, 1363481681, 0, 6720, 65540, 0, 6720, 65540, 0, 7872, 2147483652, 0, 7872, 2147483652, 0, 9088, 65536, 0, 15488, 272696336, 0, 15488, 272696336, 0, 15488, 272696336, 0, 15488, 272696336, 0, 15488, 272696336, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0, 15808, 3067833782, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
