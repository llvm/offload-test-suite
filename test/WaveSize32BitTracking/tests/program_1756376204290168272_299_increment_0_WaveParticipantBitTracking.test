#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter0 = 0;
          while ((counter0 < 2)) {
            counter0 = (counter0 + 1);
            if ((WaveGetLaneIndex() < 1)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((19 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            uint counter1 = 0;
            while ((counter1 < 2)) {
              counter1 = (counter1 + 1);
              if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 21))) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((43 << 6) | (counter0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 25))) {
                result = (result + WaveActiveSum(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((62 << 6) | (counter0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((counter1 == 1)) {
                break;
              }
            }
            if ((WaveGetLaneIndex() < 3)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((72 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter0 == 1)) {
              break;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (84 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 30))) {
            if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMax(6));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (110 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 20))) {
              if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 22))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (144 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() >= 28)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((158 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 26))) {
          if (((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((176 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
            if ((WaveGetLaneIndex() >= 19)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((191 << 6) | (counter2 << 4)) | (i3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        if ((counter2 == 1)) {
          break;
        }
      }
      break;
    }
  case 2: {
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if ((WaveGetLaneIndex() < 6)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((208 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter5 = 0;
        while ((counter5 < 3)) {
          counter5 = (counter5 + 1);
          if ((WaveGetLaneIndex() >= 16)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((222 << 6) | (counter4 << 4)) | (counter5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 11)) {
            if ((WaveGetLaneIndex() == 31)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((234 << 6) | (counter4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() < 6)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((241 << 6) | (counter4 << 4)) | (counter5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 14)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((248 << 6) | (counter4 << 4)) | (counter5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((counter4 == 2)) {
        break;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (255 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 426
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1232, 1, 0, 2772, 2097152, 0, 3988, 4097, 0, 3988, 4097, 0, 4624, 1, 0, 10128, 2415919104, 0, 10128, 2415919104, 0, 13328, 36, 0, 13328, 36, 0, 13344, 36, 0, 13344, 36, 0, 14228, 613548032, 0, 14228, 613548032, 0, 14228, 613548032, 0, 14228, 613548032, 0, 14228, 613548032, 0, 14232, 613548032, 0, 14232, 613548032, 0, 14232, 613548032, 0, 14232, 613548032, 0, 14232, 613548032, 0, 14236, 613548032, 0, 14236, 613548032, 0, 14236, 613548032, 0, 14236, 613548032, 0, 14236, 613548032, 0, 14244, 613548032, 0, 14244, 613548032, 0, 14244, 613548032, 0, 14244, 613548032, 0, 14244, 613548032, 0, 14248, 613548032, 0, 14248, 613548032, 0, 14248, 613548032, 0, 14248, 613548032, 0, 14248, 613548032, 0, 14252, 613548032, 0, 14252, 613548032, 0, 14252, 613548032, 0, 14252, 613548032, 0, 14252, 613548032, 0, 15444, 36, 0, 15444, 36, 0, 15448, 36, 0, 15448, 36, 0, 15452, 36, 0, 15452, 36, 0, 15460, 36, 0, 15460, 36, 0, 15464, 36, 0, 15464, 36, 0, 15468, 36, 0, 15468, 36, 0, 15892, 292, 0, 15892, 292, 0, 15892, 292, 0, 15896, 292, 0, 15896, 292, 0, 15896, 292, 0, 15900, 292, 0, 15900, 292, 0, 15900, 292, 0, 15908, 292, 0, 15908, 292, 0, 15908, 292, 0, 15912, 292, 0, 15912, 292, 0, 15912, 292, 0, 15916, 292, 0, 15916, 292, 0, 15916, 292, 0, 1232, 1, 0, 2772, 2097152, 0, 3988, 4097, 0, 3988, 4097, 0, 4624, 1, 0, 10128, 2415919104, 0, 10128, 2415919104, 0, 13328, 36, 0, 13328, 36, 0, 13344, 36, 0, 13344, 36, 0, 14228, 613548032, 0, 14228, 613548032, 0, 14228, 613548032, 0, 14228, 613548032, 0, 14228, 613548032, 0, 14232, 613548032, 0, 14232, 613548032, 0, 14232, 613548032, 0, 14232, 613548032, 0, 14232, 613548032, 0, 14236, 613548032, 0, 14236, 613548032, 0, 14236, 613548032, 0, 14236, 613548032, 0, 14236, 613548032, 0, 14244, 613548032, 0, 14244, 613548032, 0, 14244, 613548032, 0, 14244, 613548032, 0, 14244, 613548032, 0, 14248, 613548032, 0, 14248, 613548032, 0, 14248, 613548032, 0, 14248, 613548032, 0, 14248, 613548032, 0, 14252, 613548032, 0, 14252, 613548032, 0, 14252, 613548032, 0, 14252, 613548032, 0, 14252, 613548032, 0, 15444, 36, 0, 15444, 36, 0, 15448, 36, 0, 15448, 36, 0, 15452, 36, 0, 15452, 36, 0, 15460, 36, 0, 15460, 36, 0, 15464, 36, 0, 15464, 36, 0, 15468, 36, 0, 15468, 36, 0, 15892, 292, 0, 15892, 292, 0, 15892, 292, 0, 15896, 292, 0, 15896, 292, 0, 15896, 292, 0, 15900, 292, 0, 15900, 292, 0, 15900, 292, 0, 15908, 292, 0, 15908, 292, 0, 15908, 292, 0, 15912, 292, 0, 15912, 292, 0, 15912, 292, 0, 15916, 292, 0, 15916, 292, 0, 15916, 292, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
