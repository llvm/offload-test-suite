#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (18 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 5))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((44 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 0))) {
          if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 6))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((78 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((101 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 2)) {
          break;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 1))) {
            if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 3))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (149 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMin(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (164 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (180 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (185 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (190 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (194 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if ((WaveGetLaneIndex() < 16)) {
    if ((WaveGetLaneIndex() < 15)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (204 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (217 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (226 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (231 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (240 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (244 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 300
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 2816, 1073741832, 0, 2816, 1073741832, 0, 2832, 1073741832, 0, 2832, 1073741832, 0, 2848, 1073741832, 0, 2848, 1073741832, 0, 6464, 64, 0, 6480, 64, 0, 6496, 64, 0, 11520, 272696336, 0, 11520, 272696336, 0, 11520, 272696336, 0, 11520, 272696336, 0, 11520, 272696336, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13888, 65, 0, 13888, 65, 0, 14464, 1040, 0, 14464, 1040, 0, 14784, 16644, 0, 14784, 16644, 0, 14784, 16644, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 2816, 1073741832, 0, 2816, 1073741832, 0, 2832, 1073741832, 0, 2832, 1073741832, 0, 2848, 1073741832, 0, 2848, 1073741832, 0, 6464, 64, 0, 6480, 64, 0, 6496, 64, 0, 11520, 272696336, 0, 11520, 272696336, 0, 11520, 272696336, 0, 11520, 272696336, 0, 11520, 272696336, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 12160, 613566756, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13056, 32767, 0, 13888, 65, 0, 13888, 65, 0, 14464, 1040, 0, 14464, 1040, 0, 14784, 16644, 0, 14784, 16644, 0, 14784, 16644, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
