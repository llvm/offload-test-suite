#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 18)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (41 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 24))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (35 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (31 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (27 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 24))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (82 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 19))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (76 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 23))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (72 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (99 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() >= 23)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((114 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 19)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((121 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
            if ((WaveGetLaneIndex() == 3)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((139 << 6) | (i1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (148 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if ((WaveGetLaneIndex() >= 17)) {
            if ((WaveGetLaneIndex() < 1)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (160 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
    }
  case 2: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((176 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 15)) {
          if ((WaveGetLaneIndex() == 24)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((186 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((195 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (202 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (206 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 576
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2624, 262144, 0, 2240, 16778272, 0, 2240, 16778272, 0, 2240, 16778272, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 5248, 16908292, 0, 5248, 16908292, 0, 5248, 16908292, 0, 4864, 524288, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 7296, 285212672, 0, 7296, 285212672, 0, 7312, 285212672, 0, 7312, 285212672, 0, 7328, 285212672, 0, 7328, 285212672, 0, 7744, 286261248, 0, 7744, 286261248, 0, 7744, 286261248, 0, 7760, 286261248, 0, 7760, 286261248, 0, 7760, 286261248, 0, 7776, 286261248, 0, 7776, 286261248, 0, 7776, 286261248, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12928, 559240, 0, 12928, 559240, 0, 12928, 559240, 0, 12928, 559240, 0, 12928, 559240, 0, 2624, 262144, 0, 2240, 16778272, 0, 2240, 16778272, 0, 2240, 16778272, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 1984, 1414615381, 0, 5248, 16908292, 0, 5248, 16908292, 0, 5248, 16908292, 0, 4864, 524288, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 4608, 4269801723, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 6336, 286331153, 0, 7296, 285212672, 0, 7296, 285212672, 0, 7312, 285212672, 0, 7312, 285212672, 0, 7328, 285212672, 0, 7328, 285212672, 0, 7744, 286261248, 0, 7744, 286261248, 0, 7744, 286261248, 0, 7760, 286261248, 0, 7760, 286261248, 0, 7760, 286261248, 0, 7776, 286261248, 0, 7776, 286261248, 0, 7776, 286261248, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11280, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 11296, 1145324612, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12496, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12512, 572662306, 0, 12928, 559240, 0, 12928, 559240, 0, 12928, 559240, 0, 12928, 559240, 0, 12928, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
