#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((24 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (33 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveMax(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((57 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 31))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((68 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
          if ((i1 == 1)) {
            break;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (83 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (92 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() >= 16)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((106 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 9)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((115 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (124 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (128 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 330
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 4352, 2147483648, 0, 4368, 2147483648, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 7376, 341, 0, 7376, 341, 0, 7376, 341, 0, 7376, 341, 0, 7376, 341, 0, 7392, 341, 0, 7392, 341, 0, 7392, 341, 0, 7392, 341, 0, 7392, 341, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 2112, 1363481681, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3648, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 3664, 2852126890, 0, 4352, 2147483648, 0, 4368, 2147483648, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6800, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 6816, 1431633920, 0, 7376, 341, 0, 7376, 341, 0, 7376, 341, 0, 7376, 341, 0, 7376, 341, 0, 7392, 341, 0, 7392, 341, 0, 7392, 341, 0, 7392, 341, 0, 7392, 341, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
