#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 27))) {
      if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 31))) {
        result = (result + WaveActiveMin(10));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((32 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if ((WaveGetLaneIndex() < 13)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((((55 << 6) | (counter0 << 4)) | (i1 << 2)) | i2);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() < 13)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((62 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 26))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((77 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 30))) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((96 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter0 == 2)) {
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 16))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((124 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 27)) {
          if ((WaveGetLaneIndex() >= 30)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((134 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 17))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((157 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (166 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 24))) {
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (200 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter4 = 0;
        while ((counter4 < 2)) {
          counter4 = (counter4 + 1);
          if ((WaveGetLaneIndex() == 26)) {
            result = (result + WaveActiveMin(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((214 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 29))) {
          result = (result + WaveActiveMax(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (233 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (240 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (244 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if ((WaveGetLaneIndex() < 15)) {
    if ((WaveGetLaneIndex() < 3)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (254 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 29))) {
      if ((WaveGetLaneIndex() == 25)) {
        if ((WaveGetLaneIndex() == 25)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (271 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 23)) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (278 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 24))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (289 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  } else {
  if ((WaveGetLaneIndex() >= 24)) {
    for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
      if ((WaveGetLaneIndex() == 28)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((307 << 6) | (i5 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (318 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 534
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3536, 514, 0, 3536, 514, 0, 3537, 514, 0, 3537, 514, 0, 3538, 514, 0, 3538, 514, 0, 3540, 514, 0, 3540, 514, 0, 3541, 514, 0, 3541, 514, 0, 3542, 514, 0, 3542, 514, 0, 3544, 514, 0, 3544, 514, 0, 3545, 514, 0, 3545, 514, 0, 3546, 514, 0, 3546, 514, 0, 3552, 514, 0, 3552, 514, 0, 3553, 514, 0, 3553, 514, 0, 3554, 514, 0, 3554, 514, 0, 3556, 514, 0, 3556, 514, 0, 3557, 514, 0, 3557, 514, 0, 3558, 514, 0, 3558, 514, 0, 3560, 514, 0, 3560, 514, 0, 3561, 514, 0, 3561, 514, 0, 3562, 514, 0, 3562, 514, 0, 3984, 514, 0, 3984, 514, 0, 3988, 514, 0, 3988, 514, 0, 3992, 514, 0, 3992, 514, 0, 4000, 514, 0, 4000, 514, 0, 4004, 514, 0, 4004, 514, 0, 4008, 514, 0, 4008, 514, 0, 6160, 1082138752, 0, 6160, 1082138752, 0, 6160, 1082138752, 0, 6160, 1082138752, 0, 6176, 1082138752, 0, 6176, 1082138752, 0, 6176, 1082138752, 0, 6176, 1082138752, 0, 7952, 65536, 0, 7968, 65536, 0, 7984, 65536, 0, 10064, 268439552, 0, 10064, 268439552, 0, 10080, 268439552, 0, 10080, 268439552, 0, 10096, 268439552, 0, 10096, 268439552, 0, 15360, 559240, 0, 15360, 559240, 0, 15360, 559240, 0, 15360, 559240, 0, 15360, 559240, 0, 16256, 7, 0, 16256, 7, 0, 16256, 7, 0, 18496, 15, 0, 18496, 15, 0, 18496, 15, 0, 18496, 15, 0, 19648, 268435456, 0, 19664, 268435456, 0, 19680, 268435456, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 3536, 514, 0, 3536, 514, 0, 3537, 514, 0, 3537, 514, 0, 3538, 514, 0, 3538, 514, 0, 3540, 514, 0, 3540, 514, 0, 3541, 514, 0, 3541, 514, 0, 3542, 514, 0, 3542, 514, 0, 3544, 514, 0, 3544, 514, 0, 3545, 514, 0, 3545, 514, 0, 3546, 514, 0, 3546, 514, 0, 3552, 514, 0, 3552, 514, 0, 3553, 514, 0, 3553, 514, 0, 3554, 514, 0, 3554, 514, 0, 3556, 514, 0, 3556, 514, 0, 3557, 514, 0, 3557, 514, 0, 3558, 514, 0, 3558, 514, 0, 3560, 514, 0, 3560, 514, 0, 3561, 514, 0, 3561, 514, 0, 3562, 514, 0, 3562, 514, 0, 3984, 514, 0, 3984, 514, 0, 3988, 514, 0, 3988, 514, 0, 3992, 514, 0, 3992, 514, 0, 4000, 514, 0, 4000, 514, 0, 4004, 514, 0, 4004, 514, 0, 4008, 514, 0, 4008, 514, 0, 6160, 1082138752, 0, 6160, 1082138752, 0, 6160, 1082138752, 0, 6160, 1082138752, 0, 6176, 1082138752, 0, 6176, 1082138752, 0, 6176, 1082138752, 0, 6176, 1082138752, 0, 7952, 65536, 0, 7968, 65536, 0, 7984, 65536, 0, 10064, 268439552, 0, 10064, 268439552, 0, 10080, 268439552, 0, 10080, 268439552, 0, 10096, 268439552, 0, 10096, 268439552, 0, 15360, 559240, 0, 15360, 559240, 0, 15360, 559240, 0, 15360, 559240, 0, 15360, 559240, 0, 16256, 7, 0, 16256, 7, 0, 16256, 7, 0, 18496, 15, 0, 18496, 15, 0, 18496, 15, 0, 18496, 15, 0, 19648, 268435456, 0, 19664, 268435456, 0, 19680, 268435456, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0, 20352, 2863300608, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
