#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 5))) {
    if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 25))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (29 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() >= 28)) {
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 27))) {
        if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 30))) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (58 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (79 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (89 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (98 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (102 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 27))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((124 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((155 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 28))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((166 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() >= 28)) {
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if ((WaveGetLaneIndex() >= 20)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((184 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() < 9)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (191 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (200 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((216 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((225 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter3 == 1)) {
          break;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (237 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (242 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 3: {
    for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
      if ((WaveGetLaneIndex() >= 17)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((257 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 24))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((276 << 6) | (i4 << 4)) | (i5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i5 == 1)) {
          continue;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 600
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5696, 85, 0, 5696, 85, 0, 5696, 85, 0, 5696, 85, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 7936, 268435729, 0, 7936, 268435729, 0, 7936, 268435729, 0, 7936, 268435729, 0, 7952, 268435729, 0, 7952, 268435729, 0, 7952, 268435729, 0, 7952, 268435729, 0, 7968, 268435729, 0, 7968, 268435729, 0, 7968, 268435729, 0, 7968, 268435729, 0, 9920, 1048576, 0, 9924, 1048576, 0, 9936, 1048576, 0, 9940, 1048576, 0, 9952, 1048576, 0, 9956, 1048576, 0, 10624, 268435457, 0, 10624, 268435457, 0, 10640, 268435457, 0, 10640, 268435457, 0, 10656, 268435457, 0, 10656, 268435457, 0, 11776, 536870912, 0, 11792, 536870912, 0, 11808, 536870912, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 16448, 2290614272, 0, 16448, 2290614272, 0, 16448, 2290614272, 0, 16448, 2290614272, 0, 16464, 2290614272, 0, 16464, 2290614272, 0, 16464, 2290614272, 0, 16464, 2290614272, 0, 16480, 2290614272, 0, 16480, 2290614272, 0, 16480, 2290614272, 0, 16480, 2290614272, 0, 17664, 2281701376, 0, 17664, 2281701376, 0, 17668, 2281701376, 0, 17668, 2281701376, 0, 17680, 2281701376, 0, 17680, 2281701376, 0, 17684, 2281701376, 0, 17684, 2281701376, 0, 17696, 2281701376, 0, 17696, 2281701376, 0, 17700, 2281701376, 0, 17700, 2281701376, 0, 5696, 85, 0, 5696, 85, 0, 5696, 85, 0, 5696, 85, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 6272, 1431655765, 0, 7936, 268435729, 0, 7936, 268435729, 0, 7936, 268435729, 0, 7936, 268435729, 0, 7952, 268435729, 0, 7952, 268435729, 0, 7952, 268435729, 0, 7952, 268435729, 0, 7968, 268435729, 0, 7968, 268435729, 0, 7968, 268435729, 0, 7968, 268435729, 0, 9920, 1048576, 0, 9924, 1048576, 0, 9936, 1048576, 0, 9940, 1048576, 0, 9952, 1048576, 0, 9956, 1048576, 0, 10624, 268435457, 0, 10624, 268435457, 0, 10640, 268435457, 0, 10640, 268435457, 0, 10656, 268435457, 0, 10656, 268435457, 0, 11776, 536870912, 0, 11792, 536870912, 0, 11808, 536870912, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 12800, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 14416, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15168, 35791394, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 15488, 1145324612, 0, 16448, 2290614272, 0, 16448, 2290614272, 0, 16448, 2290614272, 0, 16448, 2290614272, 0, 16464, 2290614272, 0, 16464, 2290614272, 0, 16464, 2290614272, 0, 16464, 2290614272, 0, 16480, 2290614272, 0, 16480, 2290614272, 0, 16480, 2290614272, 0, 16480, 2290614272, 0, 17664, 2281701376, 0, 17664, 2281701376, 0, 17668, 2281701376, 0, 17668, 2281701376, 0, 17680, 2281701376, 0, 17680, 2281701376, 0, 17684, 2281701376, 0, 17684, 2281701376, 0, 17696, 2281701376, 0, 17696, 2281701376, 0, 17700, 2281701376, 0, 17700, 2281701376, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
