#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 6))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((32 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 10)) {
          if ((WaveGetLaneIndex() == 28)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((42 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 26)) {
            result = (result + WaveActiveSum(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((49 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((58 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 3))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((73 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (83 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 23)) {
        if ((WaveGetLaneIndex() == 18)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (93 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 16)) {
          if ((WaveGetLaneIndex() < 16)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (103 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 12)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (110 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 29))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (125 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((141 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((150 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 27))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (161 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (165 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (175 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (184 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (189 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 666
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 4672, 8, 0, 4688, 8, 0, 4704, 8, 0, 5312, 85, 0, 5312, 85, 0, 5312, 85, 0, 5312, 85, 0, 8000, 536879112, 0, 8000, 536879112, 0, 8000, 536879112, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 10304, 134217728, 0, 11200, 73, 0, 11200, 73, 0, 11200, 73, 0, 11776, 272696336, 0, 11776, 272696336, 0, 11776, 272696336, 0, 11776, 272696336, 0, 11776, 272696336, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3712, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3728, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 3744, 2863311530, 0, 4672, 8, 0, 4688, 8, 0, 4704, 8, 0, 5312, 85, 0, 5312, 85, 0, 5312, 85, 0, 5312, 85, 0, 8000, 536879112, 0, 8000, 536879112, 0, 8000, 536879112, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9616, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 9632, 2854922922, 0, 10304, 134217728, 0, 11200, 73, 0, 11200, 73, 0, 11200, 73, 0, 11776, 272696336, 0, 11776, 272696336, 0, 11776, 272696336, 0, 11776, 272696336, 0, 11776, 272696336, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0, 12096, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
