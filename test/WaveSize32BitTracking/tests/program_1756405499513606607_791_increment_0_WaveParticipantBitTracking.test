#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 1)) {
    if ((WaveGetLaneIndex() >= 26)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (11 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (21 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 10))) {
          if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 5))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (47 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 23))) {
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 26))) {
              result = (result + WaveActiveSum(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (65 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    case 2: {
        if ((WaveGetLaneIndex() == 12)) {
          if ((WaveGetLaneIndex() == 3)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (75 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
            if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 24))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((102 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i0 == 1)) {
              continue;
            }
          }
          if ((WaveGetLaneIndex() == 6)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (112 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (116 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
  } else {
  if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 21))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (133 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 20))) {
    result = (result + WaveActiveMax(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (156 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  uint counter1 = 0;
  while ((counter1 < 2)) {
    counter1 = (counter1 + 1);
    if ((WaveGetLaneIndex() == 6)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((170 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
      if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 24))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((189 << 6) | (counter1 << 4)) | (i2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((199 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((208 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((213 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((220 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((224 << 6) | (counter1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 21))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((237 << 6) | (counter1 << 4)) | (i2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        continue;
      }
    }
    if ((WaveGetLaneIndex() == 12)) {
      result = (result + WaveActiveMax(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((247 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter1 == 1)) {
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 840
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1344, 1, 0, 8512, 10485760, 0, 8512, 10485760, 0, 9984, 1074872324, 0, 9984, 1074872324, 0, 9984, 1074872324, 0, 9984, 1074872324, 0, 9984, 1074872324, 0, 10896, 64, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12752, 17, 0, 12752, 17, 0, 12756, 17, 0, 12756, 17, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15824, 4096, 0, 1344, 1, 0, 8512, 10485760, 0, 8512, 10485760, 0, 9984, 1074872324, 0, 9984, 1074872324, 0, 9984, 1074872324, 0, 9984, 1074872324, 0, 9984, 1074872324, 0, 10896, 64, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12112, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12116, 4278190143, 0, 12752, 17, 0, 12752, 17, 0, 12756, 17, 0, 12756, 17, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13648, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 13652, 1717986918, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14096, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 14100, 978670, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15184, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15188, 4292870271, 0, 15824, 4096, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
