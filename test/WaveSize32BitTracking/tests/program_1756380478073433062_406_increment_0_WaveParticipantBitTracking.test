#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 16)) {
        if ((WaveGetLaneIndex() < 13)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 22))) {
            result = (result + WaveActiveSum(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((30 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() < 5)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (37 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (47 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((WaveGetLaneIndex() < 2)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((63 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (68 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 2: {
      for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 6))) {
          if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 13))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((110 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 4))) {
            result = (result + WaveActiveMin(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((125 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((134 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 27))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((145 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 2)) {
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 216
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 4681, 0, 768, 4681, 0, 768, 4681, 0, 768, 4681, 0, 768, 4681, 0, 1936, 9, 0, 1936, 9, 0, 1952, 9, 0, 1952, 9, 0, 1968, 9, 0, 1968, 9, 0, 2368, 9, 0, 2368, 9, 0, 4048, 2, 0, 4064, 2, 0, 8576, 537004064, 0, 8576, 537004064, 0, 8576, 537004064, 0, 8576, 537004064, 0, 8592, 537004064, 0, 8592, 537004064, 0, 8592, 537004064, 0, 8592, 537004064, 0, 8608, 537004064, 0, 8608, 537004064, 0, 8608, 537004064, 0, 8608, 537004064, 0, 9280, 536870948, 0, 9280, 536870948, 0, 9280, 536870948, 0, 9296, 536870948, 0, 9296, 536870948, 0, 9296, 536870948, 0, 9312, 536870948, 0, 9312, 536870948, 0, 9312, 536870948, 0, 768, 4681, 0, 768, 4681, 0, 768, 4681, 0, 768, 4681, 0, 768, 4681, 0, 1936, 9, 0, 1936, 9, 0, 1952, 9, 0, 1952, 9, 0, 1968, 9, 0, 1968, 9, 0, 2368, 9, 0, 2368, 9, 0, 4048, 2, 0, 4064, 2, 0, 8576, 537004064, 0, 8576, 537004064, 0, 8576, 537004064, 0, 8576, 537004064, 0, 8592, 537004064, 0, 8592, 537004064, 0, 8592, 537004064, 0, 8592, 537004064, 0, 8608, 537004064, 0, 8608, 537004064, 0, 8608, 537004064, 0, 8608, 537004064, 0, 9280, 536870948, 0, 9280, 536870948, 0, 9280, 536870948, 0, 9296, 536870948, 0, 9296, 536870948, 0, 9296, 536870948, 0, 9312, 536870948, 0, 9312, 536870948, 0, 9312, 536870948, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
