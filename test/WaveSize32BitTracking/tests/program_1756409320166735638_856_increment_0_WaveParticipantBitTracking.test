#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 15)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((17 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() == 27)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((32 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 6)) {
            if ((WaveGetLaneIndex() < 14)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((42 << 6) | (i0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 21))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((55 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 15)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((62 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 19)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((69 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (78 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (83 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (90 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 378
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2688, 17, 0, 2688, 17, 0, 2692, 17, 0, 2692, 17, 0, 2696, 17, 0, 2696, 17, 0, 2704, 17, 0, 2704, 17, 0, 2708, 17, 0, 2708, 17, 0, 2712, 17, 0, 2712, 17, 0, 2720, 17, 0, 2720, 17, 0, 2724, 17, 0, 2724, 17, 0, 2728, 17, 0, 2728, 17, 0, 3520, 285212928, 0, 3520, 285212928, 0, 3520, 285212928, 0, 3524, 285212928, 0, 3524, 285212928, 0, 3524, 285212928, 0, 3528, 285212928, 0, 3528, 285212928, 0, 3528, 285212928, 0, 3536, 285212928, 0, 3536, 285212928, 0, 3536, 285212928, 0, 3540, 285212928, 0, 3540, 285212928, 0, 3540, 285212928, 0, 3544, 285212928, 0, 3544, 285212928, 0, 3544, 285212928, 0, 3552, 285212928, 0, 3552, 285212928, 0, 3552, 285212928, 0, 3556, 285212928, 0, 3556, 285212928, 0, 3556, 285212928, 0, 3560, 285212928, 0, 3560, 285212928, 0, 3560, 285212928, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 2688, 17, 0, 2688, 17, 0, 2692, 17, 0, 2692, 17, 0, 2696, 17, 0, 2696, 17, 0, 2704, 17, 0, 2704, 17, 0, 2708, 17, 0, 2708, 17, 0, 2712, 17, 0, 2712, 17, 0, 2720, 17, 0, 2720, 17, 0, 2724, 17, 0, 2724, 17, 0, 2728, 17, 0, 2728, 17, 0, 3520, 285212928, 0, 3520, 285212928, 0, 3520, 285212928, 0, 3524, 285212928, 0, 3524, 285212928, 0, 3524, 285212928, 0, 3528, 285212928, 0, 3528, 285212928, 0, 3528, 285212928, 0, 3536, 285212928, 0, 3536, 285212928, 0, 3536, 285212928, 0, 3540, 285212928, 0, 3540, 285212928, 0, 3540, 285212928, 0, 3544, 285212928, 0, 3544, 285212928, 0, 3544, 285212928, 0, 3552, 285212928, 0, 3552, 285212928, 0, 3552, 285212928, 0, 3556, 285212928, 0, 3556, 285212928, 0, 3556, 285212928, 0, 3560, 285212928, 0, 3560, 285212928, 0, 3560, 285212928, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5312, 1145324612, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0, 5760, 838860, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
