#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 25))) {
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 24))) {
          result = (result + WaveActiveMax(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (24 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 0)) {
          if ((WaveGetLaneIndex() == 19)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (34 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 14)) {
            if ((WaveGetLaneIndex() >= 27)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (46 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() == 21)) {
            result = (result + WaveActiveMin(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (53 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 31))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (72 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 25)) {
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if ((WaveGetLaneIndex() == 18)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((89 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 5)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((96 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 0))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (119 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (128 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() < 7)) {
    if ((WaveGetLaneIndex() < 2)) {
      result = (result + WaveActiveMin(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (138 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() >= 17)) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (145 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25))) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (164 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 22))) {
    if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 31))) {
      result = (result + WaveActiveSum(7));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (182 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      if ((WaveGetLaneIndex() >= 31)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((196 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() >= 23)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((205 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 30))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (216 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (226 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 23))) {
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 17))) {
              if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 27))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (270 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 3))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (293 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (302 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (307 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((324 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((333 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (337 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
      } else {
      if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 8))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (354 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
        if ((WaveGetLaneIndex() == 12)) {
          if ((WaveGetLaneIndex() == 17)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((372 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((i3 == 1)) {
          continue;
        }
      }
    }
    break;
  }
  case 2: {
    for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
      if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 28))) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((398 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter5 = 0;
      while ((counter5 < 3)) {
        counter5 = (counter5 + 1);
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 21))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((418 << 6) | (i4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 22))) {
          if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 26))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((440 << 6) | (i4 << 4)) | (counter5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 31))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((451 << 6) | (i4 << 4)) | (counter5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 27)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((458 << 6) | (i4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 25))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((469 << 6) | (i4 << 4)) | (counter5 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter5 == 2)) {
        break;
      }
    }
    if ((i4 == 2)) {
      break;
    }
  }
  break;
  }
  case 3: {
    if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 24))) {
      if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (497 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (501 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 528
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [7616, 1048833, 0, 7616, 1048833, 0, 7616, 1048833, 0, 8832, 3, 0, 8832, 3, 0, 10496, 33620224, 0, 10496, 33620224, 0, 10496, 33620224, 0, 11648, 2147483648, 0, 12560, 2147483648, 0, 12576, 2147483648, 0, 12592, 2147483648, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13824, 3221225472, 0, 13824, 3221225472, 0, 14464, 17, 0, 14464, 17, 0, 25472, 1024, 0, 25488, 1024, 0, 25504, 1024, 0, 26756, 1145044992, 0, 26756, 1145044992, 0, 26756, 1145044992, 0, 26760, 1145044992, 0, 26760, 1145044992, 0, 26760, 1145044992, 0, 26772, 1145044992, 0, 26772, 1145044992, 0, 26772, 1145044992, 0, 26776, 1145044992, 0, 26776, 1145044992, 0, 26776, 1145044992, 0, 26788, 1145044992, 0, 26788, 1145044992, 0, 26788, 1145044992, 0, 26792, 1145044992, 0, 26792, 1145044992, 0, 26792, 1145044992, 0, 30020, 1140850756, 0, 30020, 1140850756, 0, 30020, 1140850756, 0, 30020, 1140850756, 0, 30024, 1140850756, 0, 30024, 1140850756, 0, 30024, 1140850756, 0, 30024, 1140850756, 0, 30036, 1140850756, 0, 30036, 1140850756, 0, 30036, 1140850756, 0, 30036, 1140850756, 0, 30040, 1140850756, 0, 30040, 1140850756, 0, 30040, 1140850756, 0, 30040, 1140850756, 0, 30052, 1140850756, 0, 30052, 1140850756, 0, 30052, 1140850756, 0, 30052, 1140850756, 0, 30056, 1140850756, 0, 30056, 1140850756, 0, 30056, 1140850756, 0, 30056, 1140850756, 0, 7616, 1048833, 0, 7616, 1048833, 0, 7616, 1048833, 0, 8832, 3, 0, 8832, 3, 0, 10496, 33620224, 0, 10496, 33620224, 0, 10496, 33620224, 0, 11648, 2147483648, 0, 12560, 2147483648, 0, 12576, 2147483648, 0, 12592, 2147483648, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13136, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13152, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13168, 4286578688, 0, 13824, 3221225472, 0, 13824, 3221225472, 0, 14464, 17, 0, 14464, 17, 0, 25472, 1024, 0, 25488, 1024, 0, 25504, 1024, 0, 26756, 1145044992, 0, 26756, 1145044992, 0, 26756, 1145044992, 0, 26760, 1145044992, 0, 26760, 1145044992, 0, 26760, 1145044992, 0, 26772, 1145044992, 0, 26772, 1145044992, 0, 26772, 1145044992, 0, 26776, 1145044992, 0, 26776, 1145044992, 0, 26776, 1145044992, 0, 26788, 1145044992, 0, 26788, 1145044992, 0, 26788, 1145044992, 0, 26792, 1145044992, 0, 26792, 1145044992, 0, 26792, 1145044992, 0, 30020, 1140850756, 0, 30020, 1140850756, 0, 30020, 1140850756, 0, 30020, 1140850756, 0, 30024, 1140850756, 0, 30024, 1140850756, 0, 30024, 1140850756, 0, 30024, 1140850756, 0, 30036, 1140850756, 0, 30036, 1140850756, 0, 30036, 1140850756, 0, 30036, 1140850756, 0, 30040, 1140850756, 0, 30040, 1140850756, 0, 30040, 1140850756, 0, 30040, 1140850756, 0, 30052, 1140850756, 0, 30052, 1140850756, 0, 30052, 1140850756, 0, 30052, 1140850756, 0, 30056, 1140850756, 0, 30056, 1140850756, 0, 30056, 1140850756, 0, 30056, 1140850756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
