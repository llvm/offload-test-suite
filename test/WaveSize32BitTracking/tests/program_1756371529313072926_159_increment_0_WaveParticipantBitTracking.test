#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 21))) {
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() >= 28)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((26 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (35 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 21))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (48 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  uint counter1 = 0;
  while ((counter1 < 2)) {
    counter1 = (counter1 + 1);
    if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 31))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((78 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 13)) {
      if ((WaveGetLaneIndex() == 8)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((88 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 31))) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((113 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 21))) {
    result = (result + WaveActiveSum(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (128 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 228
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1664, 1342177280, 0, 1664, 1342177280, 0, 1680, 1342177280, 0, 1680, 1342177280, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 5008, 8192, 0, 5024, 8192, 0, 7248, 139264, 0, 7248, 139264, 0, 7264, 139264, 0, 7264, 139264, 0, 8192, 262144, 0, 1664, 1342177280, 0, 1664, 1342177280, 0, 1680, 1342177280, 0, 1680, 1342177280, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 2240, 1430257749, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 3072, 4292870271, 0, 5008, 8192, 0, 5024, 8192, 0, 7248, 139264, 0, 7248, 139264, 0, 7264, 139264, 0, 7264, 139264, 0, 8192, 262144, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
