#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() == 7)) {
        if ((WaveGetLaneIndex() == 28)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (12 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 12))) {
          if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveSum(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (50 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 7)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (57 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (66 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 28))) {
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 28))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((91 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((102 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  case 1: {
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((119 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if ((WaveGetLaneIndex() >= 28)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((134 << 6) | (i1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((148 << 6) | (i1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((157 << 6) | (i1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((178 << 6) | (i1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((i2 == 1)) {
        break;
      }
    }
  }
  break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (185 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1164
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 5840, 1342177301, 0, 5840, 1342177301, 0, 5840, 1342177301, 0, 5840, 1342177301, 0, 5840, 1342177301, 0, 5856, 1342177301, 0, 5856, 1342177301, 0, 5856, 1342177301, 0, 5856, 1342177301, 0, 5856, 1342177301, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 8576, 2684354560, 0, 8576, 2684354560, 0, 8580, 2684354560, 0, 8580, 2684354560, 0, 8592, 2684354560, 0, 8592, 2684354560, 0, 8596, 2684354560, 0, 8596, 2684354560, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 4224, 1431655765, 0, 5840, 1342177301, 0, 5840, 1342177301, 0, 5840, 1342177301, 0, 5840, 1342177301, 0, 5840, 1342177301, 0, 5856, 1342177301, 0, 5856, 1342177301, 0, 5856, 1342177301, 0, 5856, 1342177301, 0, 5856, 1342177301, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7616, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 7632, 2863311530, 0, 8576, 2684354560, 0, 8576, 2684354560, 0, 8580, 2684354560, 0, 8580, 2684354560, 0, 8592, 2684354560, 0, 8592, 2684354560, 0, 8596, 2684354560, 0, 8596, 2684354560, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9472, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9476, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9488, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 9492, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10048, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10052, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10064, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0, 10068, 2863311530, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
