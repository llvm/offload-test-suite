#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            if ((WaveGetLaneIndex() < 2)) {
              if ((WaveGetLaneIndex() >= 25)) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((23 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() < 13)) {
                result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((32 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((41 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i0 == 2)) {
              break;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (53 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (58 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (67 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 282
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2048, 1, 0, 2064, 1, 0, 2080, 1, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 3392, 272696336, 0, 3392, 272696336, 0, 3392, 272696336, 0, 3392, 272696336, 0, 3392, 272696336, 0, 3712, 68174084, 0, 3712, 68174084, 0, 3712, 68174084, 0, 3712, 68174084, 0, 3712, 68174084, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 2048, 1, 0, 2064, 1, 0, 2080, 1, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2624, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2640, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 2656, 1090785345, 0, 3392, 272696336, 0, 3392, 272696336, 0, 3392, 272696336, 0, 3392, 272696336, 0, 3392, 272696336, 0, 3712, 68174084, 0, 3712, 68174084, 0, 3712, 68174084, 0, 3712, 68174084, 0, 3712, 68174084, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0, 4288, 1431655765, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
