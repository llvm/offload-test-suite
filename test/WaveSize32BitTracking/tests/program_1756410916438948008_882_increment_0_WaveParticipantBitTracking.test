#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 31))) {
    if ((WaveGetLaneIndex() == 29)) {
      if ((WaveGetLaneIndex() == 18)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (26 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() == 20)) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((40 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 1))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((66 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter1 == 1)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() == 31)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((76 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  } else {
  if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 25))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (89 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
    if ((WaveGetLaneIndex() == 19)) {
      if ((WaveGetLaneIndex() == 12)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((107 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((123 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 22))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (136 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 198
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 7876, 524288, 0, 7880, 524288, 0, 7892, 524288, 0, 7896, 524288, 0, 7908, 524288, 0, 7912, 524288, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 5696, 2113929599, 0, 7876, 524288, 0, 7880, 524288, 0, 7892, 524288, 0, 7896, 524288, 0, 7908, 524288, 0, 7912, 524288, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0, 8704, 2134900767, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
