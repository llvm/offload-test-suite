#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 20)) {
        if ((WaveGetLaneIndex() == 27)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (21 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            uint counter0 = 0;
            while ((counter0 < 3)) {
              counter0 = (counter0 + 1);
              if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 4))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((50 << 6) | (counter0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 1: {
            if ((WaveGetLaneIndex() >= 16)) {
              if ((WaveGetLaneIndex() >= 16)) {
                result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (62 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (67 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 17))) {
              if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 28))) {
                result = (result + WaveActiveSum(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (85 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 28))) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (100 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 18))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (119 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (123 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((WaveGetLaneIndex() == 15)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (132 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 0))) {
        result = (result + WaveActiveSum(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((163 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 31))) {
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 21))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((193 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter2 = 0;
        while ((counter2 < 3)) {
          counter2 = (counter2 + 1);
          if ((WaveGetLaneIndex() == 6)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((207 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 21)) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((214 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 22))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((229 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 31)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((236 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((253 << 6) | (i1 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((262 << 6) | (i1 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 0))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((279 << 6) | (i1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (289 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() < 6)) {
        if ((WaveGetLaneIndex() >= 31)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (299 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (309 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (318 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (323 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (330 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (334 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 372
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 10432, 2048, 0, 10448, 2048, 0, 10464, 2048, 0, 16192, 545261600, 0, 16192, 545261600, 0, 16192, 545261600, 0, 16192, 545261600, 0, 16196, 545261600, 0, 16196, 545261600, 0, 16196, 545261600, 0, 16196, 545261600, 0, 16208, 545261600, 0, 16208, 545261600, 0, 16208, 545261600, 0, 16208, 545261600, 0, 16212, 545261600, 0, 16212, 545261600, 0, 16212, 545261600, 0, 16212, 545261600, 0, 16224, 545261600, 0, 16224, 545261600, 0, 16224, 545261600, 0, 16224, 545261600, 0, 16228, 545261600, 0, 16228, 545261600, 0, 16228, 545261600, 0, 16228, 545261600, 0, 16768, 545261600, 0, 16768, 545261600, 0, 16768, 545261600, 0, 16768, 545261600, 0, 16772, 545261600, 0, 16772, 545261600, 0, 16772, 545261600, 0, 16772, 545261600, 0, 16784, 545261600, 0, 16784, 545261600, 0, 16784, 545261600, 0, 16784, 545261600, 0, 16788, 545261600, 0, 16788, 545261600, 0, 16788, 545261600, 0, 16788, 545261600, 0, 16800, 545261600, 0, 16800, 545261600, 0, 16800, 545261600, 0, 16800, 545261600, 0, 16804, 545261600, 0, 16804, 545261600, 0, 16804, 545261600, 0, 16804, 545261600, 0, 17856, 4, 0, 17872, 4, 0, 17888, 4, 0, 18496, 85, 0, 18496, 85, 0, 18496, 85, 0, 18496, 85, 0, 21120, 8, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 10432, 2048, 0, 10448, 2048, 0, 10464, 2048, 0, 16192, 545261600, 0, 16192, 545261600, 0, 16192, 545261600, 0, 16192, 545261600, 0, 16196, 545261600, 0, 16196, 545261600, 0, 16196, 545261600, 0, 16196, 545261600, 0, 16208, 545261600, 0, 16208, 545261600, 0, 16208, 545261600, 0, 16208, 545261600, 0, 16212, 545261600, 0, 16212, 545261600, 0, 16212, 545261600, 0, 16212, 545261600, 0, 16224, 545261600, 0, 16224, 545261600, 0, 16224, 545261600, 0, 16224, 545261600, 0, 16228, 545261600, 0, 16228, 545261600, 0, 16228, 545261600, 0, 16228, 545261600, 0, 16768, 545261600, 0, 16768, 545261600, 0, 16768, 545261600, 0, 16768, 545261600, 0, 16772, 545261600, 0, 16772, 545261600, 0, 16772, 545261600, 0, 16772, 545261600, 0, 16784, 545261600, 0, 16784, 545261600, 0, 16784, 545261600, 0, 16784, 545261600, 0, 16788, 545261600, 0, 16788, 545261600, 0, 16788, 545261600, 0, 16788, 545261600, 0, 16800, 545261600, 0, 16800, 545261600, 0, 16800, 545261600, 0, 16800, 545261600, 0, 16804, 545261600, 0, 16804, 545261600, 0, 16804, 545261600, 0, 16804, 545261600, 0, 17856, 4, 0, 17872, 4, 0, 17888, 4, 0, 18496, 85, 0, 18496, 85, 0, 18496, 85, 0, 18496, 85, 0, 21120, 8, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
