#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 3)) {
    counter0 = (counter0 + 1);
    if ((WaveGetLaneIndex() == 4)) {
      result = (result + WaveActiveMin(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((13 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() & 1) == 0)) {
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((28 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      case 1: {
          if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 27))) {
            if (((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 24))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((54 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 20))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((65 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          uint counter1 = 0;
          while ((counter1 < 3)) {
            counter1 = (counter1 + 1);
            if ((WaveGetLaneIndex() == 21)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((79 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 2)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((86 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((93 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((102 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 20)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((109 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter0 == 2)) {
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (122 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (132 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 31))) {
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 22))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (152 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (157 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  }
  if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 24))) {
    if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28))) {
      result = (result + WaveActiveMax(9));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (187 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 27))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (208 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 31))) {
    if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
      switch ((WaveGetLaneIndex() % 2)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (240 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (249 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (253 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 22))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (264 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 23))) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (279 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 444
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [848, 16, 0, 864, 16, 0, 1808, 17, 0, 1808, 17, 0, 1824, 17, 0, 1824, 17, 0, 5524, 4, 0, 5528, 4, 0, 5532, 4, 0, 5540, 4, 0, 5544, 4, 0, 5548, 4, 0, 5968, 279620, 0, 5968, 279620, 0, 5968, 279620, 0, 5968, 279620, 0, 5968, 279620, 0, 5984, 279620, 0, 5984, 279620, 0, 5984, 279620, 0, 5984, 279620, 0, 5984, 279620, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6992, 1048576, 0, 7008, 1048576, 0, 7808, 85, 0, 7808, 85, 0, 7808, 85, 0, 7808, 85, 0, 8448, 8, 0, 9728, 2147483650, 0, 9728, 2147483650, 0, 10048, 545392672, 0, 10048, 545392672, 0, 10048, 545392672, 0, 10048, 545392672, 0, 10048, 545392672, 0, 15360, 1, 0, 16896, 2147483649, 0, 16896, 2147483649, 0, 17856, 8912898, 0, 17856, 8912898, 0, 17856, 8912898, 0, 848, 16, 0, 864, 16, 0, 1808, 17, 0, 1808, 17, 0, 1824, 17, 0, 1824, 17, 0, 5524, 4, 0, 5528, 4, 0, 5532, 4, 0, 5540, 4, 0, 5544, 4, 0, 5548, 4, 0, 5968, 279620, 0, 5968, 279620, 0, 5968, 279620, 0, 5968, 279620, 0, 5968, 279620, 0, 5984, 279620, 0, 5984, 279620, 0, 5984, 279620, 0, 5984, 279620, 0, 5984, 279620, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6544, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6560, 1431655765, 0, 6992, 1048576, 0, 7008, 1048576, 0, 7808, 85, 0, 7808, 85, 0, 7808, 85, 0, 7808, 85, 0, 8448, 8, 0, 9728, 2147483650, 0, 9728, 2147483650, 0, 10048, 545392672, 0, 10048, 545392672, 0, 10048, 545392672, 0, 10048, 545392672, 0, 10048, 545392672, 0, 15360, 1, 0, 16896, 2147483649, 0, 16896, 2147483649, 0, 17856, 8912898, 0, 17856, 8912898, 0, 17856, 8912898, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
