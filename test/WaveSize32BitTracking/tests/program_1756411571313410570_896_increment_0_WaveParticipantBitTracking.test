#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (19 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((38 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 26))) {
              if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 30))) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((56 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 22))) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((69 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((78 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 27))) {
            if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 27))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (96 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() >= 24)) {
              if ((WaveGetLaneIndex() < 10)) {
                result = (result + WaveActiveSum(WaveGetLaneIndex()));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (106 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() < 10)) {
                result = (result + WaveActiveMin(8));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (113 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 22))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (124 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() < 1)) {
            if ((WaveGetLaneIndex() >= 19)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (134 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() < 4)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (141 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (150 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    }
    break;
  }
  }
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 27))) {
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((173 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((182 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 558
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1216, 73, 0, 1216, 73, 0, 1216, 73, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 3584, 2147483650, 0, 3584, 2147483650, 0, 3600, 2147483650, 0, 3600, 2147483650, 0, 3616, 2147483650, 0, 3616, 2147483650, 0, 4416, 2415919106, 0, 4416, 2415919106, 0, 4416, 2415919106, 0, 4432, 2415919106, 0, 4432, 2415919106, 0, 4432, 2415919106, 0, 4448, 2415919106, 0, 4448, 2415919106, 0, 4448, 2415919106, 0, 4992, 272696336, 0, 4992, 272696336, 0, 4992, 272696336, 0, 4992, 272696336, 0, 4992, 272696336, 0, 5008, 272696336, 0, 5008, 272696336, 0, 5008, 272696336, 0, 5008, 272696336, 0, 5008, 272696336, 0, 5024, 272696336, 0, 5024, 272696336, 0, 5024, 272696336, 0, 5024, 272696336, 0, 5024, 272696336, 0, 6144, 536870916, 0, 6144, 536870916, 0, 7936, 536870948, 0, 7936, 536870948, 0, 7936, 536870948, 0, 9600, 68173824, 0, 9600, 68173824, 0, 9600, 68173824, 0, 11088, 2818572298, 0, 11088, 2818572298, 0, 11088, 2818572298, 0, 11088, 2818572298, 0, 11088, 2818572298, 0, 11104, 2818572298, 0, 11104, 2818572298, 0, 11104, 2818572298, 0, 11104, 2818572298, 0, 11104, 2818572298, 0, 11120, 2818572298, 0, 11120, 2818572298, 0, 11120, 2818572298, 0, 11120, 2818572298, 0, 11120, 2818572298, 0, 11664, 1342177301, 0, 11664, 1342177301, 0, 11664, 1342177301, 0, 11664, 1342177301, 0, 11664, 1342177301, 0, 11680, 1342177301, 0, 11680, 1342177301, 0, 11680, 1342177301, 0, 11680, 1342177301, 0, 11680, 1342177301, 0, 11696, 1342177301, 0, 11696, 1342177301, 0, 11696, 1342177301, 0, 11696, 1342177301, 0, 11696, 1342177301, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1216, 73, 0, 1216, 73, 0, 1216, 73, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2432, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2448, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 2464, 2181570690, 0, 3584, 2147483650, 0, 3584, 2147483650, 0, 3600, 2147483650, 0, 3600, 2147483650, 0, 3616, 2147483650, 0, 3616, 2147483650, 0, 4416, 2415919106, 0, 4416, 2415919106, 0, 4416, 2415919106, 0, 4432, 2415919106, 0, 4432, 2415919106, 0, 4432, 2415919106, 0, 4448, 2415919106, 0, 4448, 2415919106, 0, 4448, 2415919106, 0, 4992, 272696336, 0, 4992, 272696336, 0, 4992, 272696336, 0, 4992, 272696336, 0, 4992, 272696336, 0, 5008, 272696336, 0, 5008, 272696336, 0, 5008, 272696336, 0, 5008, 272696336, 0, 5008, 272696336, 0, 5024, 272696336, 0, 5024, 272696336, 0, 5024, 272696336, 0, 5024, 272696336, 0, 5024, 272696336, 0, 6144, 536870916, 0, 6144, 536870916, 0, 7936, 536870948, 0, 7936, 536870948, 0, 7936, 536870948, 0, 9600, 68173824, 0, 9600, 68173824, 0, 9600, 68173824, 0, 11088, 2818572298, 0, 11088, 2818572298, 0, 11088, 2818572298, 0, 11088, 2818572298, 0, 11088, 2818572298, 0, 11104, 2818572298, 0, 11104, 2818572298, 0, 11104, 2818572298, 0, 11104, 2818572298, 0, 11104, 2818572298, 0, 11120, 2818572298, 0, 11120, 2818572298, 0, 11120, 2818572298, 0, 11120, 2818572298, 0, 11120, 2818572298, 0, 11664, 1342177301, 0, 11664, 1342177301, 0, 11664, 1342177301, 0, 11664, 1342177301, 0, 11664, 1342177301, 0, 11680, 1342177301, 0, 11680, 1342177301, 0, 11680, 1342177301, 0, 11680, 1342177301, 0, 11680, 1342177301, 0, 11696, 1342177301, 0, 11696, 1342177301, 0, 11696, 1342177301, 0, 11696, 1342177301, 0, 11696, 1342177301, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
