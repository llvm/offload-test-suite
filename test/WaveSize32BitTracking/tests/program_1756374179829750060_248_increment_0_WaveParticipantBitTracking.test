#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (13 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((WaveGetLaneIndex() >= 30)) {
    result = (result + WaveActiveMax(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (20 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (30 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (39 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 29))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((70 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() >= 18)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((84 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 12))) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((107 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  if ((WaveGetLaneIndex() >= 17)) {
    result = (result + WaveActiveMin(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (114 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (160 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 27))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (154 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 7)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (150 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 30)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (146 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter2 = 0;
          while ((counter2 < 3)) {
            counter2 = (counter2 + 1);
            if ((WaveGetLaneIndex() == 15)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((180 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
            if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 20))) {
              result = (result + WaveActiveMin(8));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((207 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          uint counter4 = 0;
          while ((counter4 < 3)) {
            counter4 = (counter4 + 1);
            if ((WaveGetLaneIndex() == 6)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((221 << 6) | (counter4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 1)) {
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (231 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 0))) {
          if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 21))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (261 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 15))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (284 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (293 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (303 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (312 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (317 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 462
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 1280, 1073741824, 0, 1920, 65, 0, 1920, 65, 0, 2496, 272696336, 0, 2496, 272696336, 0, 2496, 272696336, 0, 2496, 272696336, 0, 2496, 272696336, 0, 4480, 16384, 0, 4496, 16384, 0, 4512, 16384, 0, 5380, 68157440, 0, 5380, 68157440, 0, 5384, 68157440, 0, 5384, 68157440, 0, 5396, 68157440, 0, 5396, 68157440, 0, 5400, 68157440, 0, 5400, 68157440, 0, 5412, 68157440, 0, 5412, 68157440, 0, 5416, 68157440, 0, 5416, 68157440, 0, 6848, 4, 0, 6864, 4, 0, 6880, 4, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 9856, 4096, 0, 9600, 85, 0, 9600, 85, 0, 9600, 85, 0, 9600, 85, 0, 9344, 1073741824, 0, 19392, 8, 0, 20288, 545392672, 0, 20288, 545392672, 0, 20288, 545392672, 0, 20288, 545392672, 0, 20288, 545392672, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 832, 2863311530, 0, 1280, 1073741824, 0, 1920, 65, 0, 1920, 65, 0, 2496, 272696336, 0, 2496, 272696336, 0, 2496, 272696336, 0, 2496, 272696336, 0, 2496, 272696336, 0, 4480, 16384, 0, 4496, 16384, 0, 4512, 16384, 0, 5380, 68157440, 0, 5380, 68157440, 0, 5384, 68157440, 0, 5384, 68157440, 0, 5396, 68157440, 0, 5396, 68157440, 0, 5400, 68157440, 0, 5400, 68157440, 0, 5412, 68157440, 0, 5412, 68157440, 0, 5416, 68157440, 0, 5416, 68157440, 0, 6848, 4, 0, 6864, 4, 0, 6880, 4, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 7296, 1431568384, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 10240, 2863311530, 0, 9856, 4096, 0, 9600, 85, 0, 9600, 85, 0, 9600, 85, 0, 9600, 85, 0, 9344, 1073741824, 0, 19392, 8, 0, 20288, 545392672, 0, 20288, 545392672, 0, 20288, 545392672, 0, 20288, 545392672, 0, 20288, 545392672, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
