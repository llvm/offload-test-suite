#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() >= 26)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (66 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 9))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (62 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 22))) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (56 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 17))) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (52 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 10)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (48 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (82 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 31))) {
      if ((WaveGetLaneIndex() == 4)) {
        if ((WaveGetLaneIndex() == 2)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (101 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 23))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (112 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (121 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 222
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4224, 4227858432, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 3968, 33688128, 0, 3968, 33688128, 0, 3968, 33688128, 0, 3968, 33688128, 0, 3968, 33688128, 0, 3584, 4210692, 0, 3584, 4210692, 0, 3584, 4210692, 0, 3328, 8, 0, 3072, 435, 0, 3072, 435, 0, 3072, 435, 0, 3072, 435, 0, 3072, 435, 0, 3072, 435, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 4224, 4227858432, 0, 3968, 33688128, 0, 3968, 33688128, 0, 3968, 33688128, 0, 3968, 33688128, 0, 3968, 33688128, 0, 3584, 4210692, 0, 3584, 4210692, 0, 3584, 4210692, 0, 3328, 8, 0, 3072, 435, 0, 3072, 435, 0, 3072, 435, 0, 3072, 435, 0, 3072, 435, 0, 3072, 435, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0, 5248, 1431655765, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
