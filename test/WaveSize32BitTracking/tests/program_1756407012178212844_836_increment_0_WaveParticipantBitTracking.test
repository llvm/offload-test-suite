#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() < 1)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((18 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 9))) {
          if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((52 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 11))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((71 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 22))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((84 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() >= 20)) {
        result = (result + WaveActiveMin(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((91 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 13))) {
      if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 6))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (125 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMin(10));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((155 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 10))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((178 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    } else {
    if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 25))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (193 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 4)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (203 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (212 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (217 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 3: {
        if ((WaveGetLaneIndex() < 20)) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (224 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (228 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
  }
  }
  case 2: {
    uint counter2 = 0;
    while ((counter2 < 2)) {
      counter2 = (counter2 + 1);
      if ((WaveGetLaneIndex() < 9)) {
        result = (result + WaveActiveMin(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((242 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 7)) {
        if ((WaveGetLaneIndex() == 3)) {
          result = (result + WaveActiveSum(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((252 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 25))) {
        result = (result + WaveActiveMin(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((263 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  }
  case 3: {
    uint counter3 = 0;
    while ((counter3 < 2)) {
      counter3 = (counter3 + 1);
      if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 31))) {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 22))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((304 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() < 1)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((311 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((320 << 6) | (counter3 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((counter3 == 1)) {
      break;
    }
  }
  break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (327 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (343 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (353 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (362 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
          if ((WaveGetLaneIndex() == 21)) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((377 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 1)) {
            continue;
          }
        }
        break;
      }
    }
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (389 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (402 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((419 << 6) | (i5 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((428 << 6) | (i5 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 27))) {
                if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 4))) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (465 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 30))) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (484 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (493 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (498 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (507 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              for (uint i6 = 0; (i6 < 3); i6 = (i6 + 1)) {
                if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 24))) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((532 << 6) | (i6 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 24))) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((543 << 6) | (i6 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((i6 == 2)) {
                  break;
                }
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 29))) {
                if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 28))) {
                  result = (result + WaveActiveMin(1));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (564 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              } else {
              if (((WaveGetLaneIndex() & 1) == 1)) {
                result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (575 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if (((WaveGetLaneIndex() & 1) == 0)) {
                result = (result + WaveActiveMax(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (584 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        case 2: {
            if ((WaveGetLaneIndex() >= 21)) {
              if ((WaveGetLaneIndex() >= 23)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (596 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
            break;
          }
        }
        break;
      }
    case 1: {
        for (uint i7 = 0; (i7 < 3); i7 = (i7 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((613 << 6) | (i7 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i8 = 0; (i8 < 2); i8 = (i8 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((630 << 6) | (i7 << 4)) | (i8 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((639 << 6) | (i7 << 4)) | (i8 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((648 << 6) | (i7 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 13))) {
              if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 9))) {
                result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (683 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 27))) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (694 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 26))) {
            if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 31))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (724 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (743 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (748 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  }
  break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (752 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 498
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1168, 1, 0, 1184, 1, 0, 5392, 285212672, 0, 5392, 285212672, 0, 5408, 285212672, 0, 5408, 285212672, 0, 5840, 286261248, 0, 5840, 286261248, 0, 5840, 286261248, 0, 5856, 286261248, 0, 5856, 286261248, 0, 5856, 286261248, 0, 8000, 8192, 0, 9936, 33554432, 0, 9952, 33554432, 0, 9968, 33554432, 0, 15504, 102, 0, 15504, 102, 0, 15504, 102, 0, 15504, 102, 0, 15520, 102, 0, 15520, 102, 0, 15520, 102, 0, 15520, 102, 0, 16848, 33554432, 0, 16864, 33554432, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 22592, 65, 0, 22592, 65, 0, 23168, 272696336, 0, 23168, 272696336, 0, 23168, 272696336, 0, 23168, 272696336, 0, 23168, 272696336, 0, 25728, 73, 0, 25728, 73, 0, 25728, 73, 0, 32448, 272696336, 0, 32448, 272696336, 0, 32448, 272696336, 0, 32448, 272696336, 0, 32448, 272696336, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 1168, 1, 0, 1184, 1, 0, 5392, 285212672, 0, 5392, 285212672, 0, 5408, 285212672, 0, 5408, 285212672, 0, 5840, 286261248, 0, 5840, 286261248, 0, 5840, 286261248, 0, 5856, 286261248, 0, 5856, 286261248, 0, 5856, 286261248, 0, 8000, 8192, 0, 9936, 33554432, 0, 9952, 33554432, 0, 9968, 33554432, 0, 15504, 102, 0, 15504, 102, 0, 15504, 102, 0, 15504, 102, 0, 15520, 102, 0, 15520, 102, 0, 15520, 102, 0, 15520, 102, 0, 16848, 33554432, 0, 16864, 33554432, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 20496, 2863311530, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 21952, 1431655765, 0, 22592, 65, 0, 22592, 65, 0, 23168, 272696336, 0, 23168, 272696336, 0, 23168, 272696336, 0, 23168, 272696336, 0, 23168, 272696336, 0, 25728, 73, 0, 25728, 73, 0, 25728, 73, 0, 32448, 272696336, 0, 32448, 272696336, 0, 32448, 272696336, 0, 32448, 272696336, 0, 32448, 272696336, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0, 47872, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
