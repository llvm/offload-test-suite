#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 14)) {
    if ((WaveGetLaneIndex() == 15)) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (9 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() == 0)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((23 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 25))) {
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((57 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((64 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (74 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (83 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (88 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (95 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if ((WaveGetLaneIndex() < 11)) {
    if ((WaveGetLaneIndex() < 9)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (105 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 27))) {
          if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 16))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (134 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 1))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (149 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (174 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 31))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((192 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 23))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((203 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  if ((WaveGetLaneIndex() >= 20)) {
    result = (result + WaveActiveMax(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (210 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 438
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4736, 17, 0, 4736, 17, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 9536, 1024, 0, 12304, 682, 0, 12304, 682, 0, 12304, 682, 0, 12304, 682, 0, 12304, 682, 0, 12320, 682, 0, 12320, 682, 0, 12320, 682, 0, 12320, 682, 0, 12320, 682, 0, 12336, 682, 0, 12336, 682, 0, 12336, 682, 0, 12336, 682, 0, 12336, 682, 0, 13008, 682, 0, 13008, 682, 0, 13008, 682, 0, 13008, 682, 0, 13008, 682, 0, 13024, 682, 0, 13024, 682, 0, 13024, 682, 0, 13024, 682, 0, 13024, 682, 0, 13040, 682, 0, 13040, 682, 0, 13040, 682, 0, 13040, 682, 0, 13040, 682, 0, 4736, 17, 0, 4736, 17, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 5632, 1717986918, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6080, 978670, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 6720, 511, 0, 9536, 1024, 0, 12304, 682, 0, 12304, 682, 0, 12304, 682, 0, 12304, 682, 0, 12304, 682, 0, 12320, 682, 0, 12320, 682, 0, 12320, 682, 0, 12320, 682, 0, 12320, 682, 0, 12336, 682, 0, 12336, 682, 0, 12336, 682, 0, 12336, 682, 0, 12336, 682, 0, 13008, 682, 0, 13008, 682, 0, 13008, 682, 0, 13008, 682, 0, 13008, 682, 0, 13024, 682, 0, 13024, 682, 0, 13024, 682, 0, 13024, 682, 0, 13024, 682, 0, 13040, 682, 0, 13040, 682, 0, 13040, 682, 0, 13040, 682, 0, 13040, 682, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
