#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() == 2)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((16 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if ((WaveGetLaneIndex() == 22)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((30 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((40 << 6) | (counter0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((49 << 6) | (counter0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((53 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if ((WaveGetLaneIndex() == 1)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((60 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 16)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((69 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter0 == 1)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 10))) {
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (93 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (102 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (107 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (114 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        default: {
            result = (result + WaveActiveSum(99));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (118 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
            break;
          }
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (122 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 396
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1040, 4, 0, 1940, 4194304, 0, 1944, 4194304, 0, 1948, 4194304, 0, 2580, 85, 0, 2580, 85, 0, 2580, 85, 0, 2580, 85, 0, 2584, 85, 0, 2584, 85, 0, 2584, 85, 0, 2584, 85, 0, 2588, 85, 0, 2588, 85, 0, 2588, 85, 0, 2588, 85, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 4432, 65536, 0, 6848, 32, 0, 1040, 4, 0, 1940, 4194304, 0, 1944, 4194304, 0, 1948, 4194304, 0, 2580, 85, 0, 2580, 85, 0, 2580, 85, 0, 2580, 85, 0, 2584, 85, 0, 2584, 85, 0, 2584, 85, 0, 2584, 85, 0, 2588, 85, 0, 2588, 85, 0, 2588, 85, 0, 2588, 85, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3156, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3160, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 3164, 1431655765, 0, 4432, 65536, 0, 6848, 32, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
