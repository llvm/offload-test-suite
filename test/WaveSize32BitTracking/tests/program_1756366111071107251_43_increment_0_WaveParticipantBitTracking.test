#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() == 3)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((25 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 2)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 24))) {
            if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 27))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((52 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 27))) {
              result = (result + WaveActiveMax(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((63 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((82 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 26))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((103 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (107 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((129 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 31))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((149 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((163 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveSum(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((174 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (183 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (188 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (192 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 27))) {
    if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 11))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (226 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter4 = 0;
    while ((counter4 < 2)) {
      counter4 = (counter4 + 1);
      if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 18))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((244 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter5 = 0;
      while ((counter5 < 2)) {
        counter5 = (counter5 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((260 << 6) | (counter4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((269 << 6) | (counter4 << 4)) | (counter5 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 28))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((290 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 24))) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (313 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() >= 30)) {
        if ((WaveGetLaneIndex() >= 26)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (328 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 29))) {
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMin(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (362 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (367 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (374 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (378 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1134
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1616, 8, 0, 1632, 8, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 4052, 2818572298, 0, 4052, 2818572298, 0, 4052, 2818572298, 0, 4052, 2818572298, 0, 4052, 2818572298, 0, 4056, 2818572298, 0, 4056, 2818572298, 0, 4056, 2818572298, 0, 4056, 2818572298, 0, 4056, 2818572298, 0, 4068, 2818572298, 0, 4068, 2818572298, 0, 4068, 2818572298, 0, 4068, 2818572298, 0, 4068, 2818572298, 0, 4072, 2818572298, 0, 4072, 2818572298, 0, 4072, 2818572298, 0, 4072, 2818572298, 0, 4072, 2818572298, 0, 6612, 2097152, 0, 6616, 2097152, 0, 6628, 2097152, 0, 6632, 2097152, 0, 8256, 136348168, 0, 8256, 136348168, 0, 8256, 136348168, 0, 8256, 136348168, 0, 8256, 136348168, 0, 8272, 136348168, 0, 8272, 136348168, 0, 8272, 136348168, 0, 8272, 136348168, 0, 8272, 136348168, 0, 9540, 73, 0, 9540, 73, 0, 9540, 73, 0, 9544, 73, 0, 9544, 73, 0, 9544, 73, 0, 9556, 73, 0, 9556, 73, 0, 9556, 73, 0, 9560, 73, 0, 9560, 73, 0, 9560, 73, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 11140, 1207959625, 0, 11140, 1207959625, 0, 11140, 1207959625, 0, 11140, 1207959625, 0, 11140, 1207959625, 0, 11144, 1207959625, 0, 11144, 1207959625, 0, 11144, 1207959625, 0, 11144, 1207959625, 0, 11144, 1207959625, 0, 11156, 1207959625, 0, 11156, 1207959625, 0, 11156, 1207959625, 0, 11156, 1207959625, 0, 11156, 1207959625, 0, 11160, 1207959625, 0, 11160, 1207959625, 0, 11160, 1207959625, 0, 11160, 1207959625, 0, 11160, 1207959625, 0, 11712, 272696336, 0, 11712, 272696336, 0, 11712, 272696336, 0, 11712, 272696336, 0, 11712, 272696336, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 16660, 671219712, 0, 16660, 671219712, 0, 16660, 671219712, 0, 16664, 671219712, 0, 16664, 671219712, 0, 16664, 671219712, 0, 16676, 671219712, 0, 16676, 671219712, 0, 16676, 671219712, 0, 16680, 671219712, 0, 16680, 671219712, 0, 16680, 671219712, 0, 17236, 671219712, 0, 17236, 671219712, 0, 17236, 671219712, 0, 17240, 671219712, 0, 17240, 671219712, 0, 17240, 671219712, 0, 17252, 671219712, 0, 17252, 671219712, 0, 17252, 671219712, 0, 17256, 671219712, 0, 17256, 671219712, 0, 17256, 671219712, 0, 18576, 64, 0, 18592, 64, 0, 20032, 134217728, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 576, 85, 0, 1616, 8, 0, 1632, 8, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3348, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3352, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3364, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 3368, 2818572330, 0, 4052, 2818572298, 0, 4052, 2818572298, 0, 4052, 2818572298, 0, 4052, 2818572298, 0, 4052, 2818572298, 0, 4056, 2818572298, 0, 4056, 2818572298, 0, 4056, 2818572298, 0, 4056, 2818572298, 0, 4056, 2818572298, 0, 4068, 2818572298, 0, 4068, 2818572298, 0, 4068, 2818572298, 0, 4068, 2818572298, 0, 4068, 2818572298, 0, 4072, 2818572298, 0, 4072, 2818572298, 0, 4072, 2818572298, 0, 4072, 2818572298, 0, 4072, 2818572298, 0, 6612, 2097152, 0, 6616, 2097152, 0, 6628, 2097152, 0, 6632, 2097152, 0, 8256, 136348168, 0, 8256, 136348168, 0, 8256, 136348168, 0, 8256, 136348168, 0, 8256, 136348168, 0, 8272, 136348168, 0, 8272, 136348168, 0, 8272, 136348168, 0, 8272, 136348168, 0, 8272, 136348168, 0, 9540, 73, 0, 9540, 73, 0, 9540, 73, 0, 9544, 73, 0, 9544, 73, 0, 9544, 73, 0, 9556, 73, 0, 9556, 73, 0, 9556, 73, 0, 9560, 73, 0, 9560, 73, 0, 9560, 73, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10436, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10440, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10452, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 10456, 1090785345, 0, 11140, 1207959625, 0, 11140, 1207959625, 0, 11140, 1207959625, 0, 11140, 1207959625, 0, 11140, 1207959625, 0, 11144, 1207959625, 0, 11144, 1207959625, 0, 11144, 1207959625, 0, 11144, 1207959625, 0, 11144, 1207959625, 0, 11156, 1207959625, 0, 11156, 1207959625, 0, 11156, 1207959625, 0, 11156, 1207959625, 0, 11156, 1207959625, 0, 11160, 1207959625, 0, 11160, 1207959625, 0, 11160, 1207959625, 0, 11160, 1207959625, 0, 11160, 1207959625, 0, 11712, 272696336, 0, 11712, 272696336, 0, 11712, 272696336, 0, 11712, 272696336, 0, 11712, 272696336, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 12032, 3067833782, 0, 16660, 671219712, 0, 16660, 671219712, 0, 16660, 671219712, 0, 16664, 671219712, 0, 16664, 671219712, 0, 16664, 671219712, 0, 16676, 671219712, 0, 16676, 671219712, 0, 16676, 671219712, 0, 16680, 671219712, 0, 16680, 671219712, 0, 16680, 671219712, 0, 17236, 671219712, 0, 17236, 671219712, 0, 17236, 671219712, 0, 17240, 671219712, 0, 17240, 671219712, 0, 17240, 671219712, 0, 17252, 671219712, 0, 17252, 671219712, 0, 17252, 671219712, 0, 17256, 671219712, 0, 17256, 671219712, 0, 17256, 671219712, 0, 18576, 64, 0, 18592, 64, 0, 20032, 134217728, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23488, 1145324548, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0, 23936, 838796, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
