#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 3)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (59 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 13))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (55 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 31))) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (49 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 30))) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (45 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (72 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (81 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
            if ((WaveGetLaneIndex() >= 29)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((96 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() < 4)) {
              result = (result + WaveActiveMax(7));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((103 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 12))) {
        if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 20))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (139 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 20))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((162 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 19))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((175 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            break;
          }
        }
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 31))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (197 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 23))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (208 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 3)) {
        if ((WaveGetLaneIndex() >= 22)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (218 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 4)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (225 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 21))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (236 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
      if ((WaveGetLaneIndex() == 4)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((251 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 29))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((270 << 6) | (i2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i3 == 1)) {
          continue;
        }
      }
      if ((WaveGetLaneIndex() == 25)) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((282 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (286 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 31))) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 22))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (307 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
          if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 29))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((334 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 1)) {
            break;
          }
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 23))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (348 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter5 = 0;
      while ((counter5 < 2)) {
        counter5 = (counter5 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((366 << 6) | (counter5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 5))) {
          if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 30))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((400 << 6) | (counter5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((409 << 6) | (counter5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 14))) {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 14))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (443 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i6 = 0; (i6 < 3); i6 = (i6 + 1)) {
          if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 25))) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((472 << 6) | (i6 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i6 == 1)) {
            continue;
          }
        }
      }
      break;
    }
  case 3: {
      if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 30))) {
        if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 1))) {
          result = (result + WaveActiveSum(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (509 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter7 = 0;
        while ((counter7 < 2)) {
          counter7 = (counter7 + 1);
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 30))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((527 << 6) | (counter7 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 31))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((540 << 6) | (counter7 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter7 == 1)) {
            break;
          }
        }
        if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (566 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() < 11)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (573 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i8 = 0; (i8 < 2); i8 = (i8 + 1)) {
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 21))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((592 << 6) | (i8 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 27))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((603 << 6) | (i8 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i8 == 1)) {
          continue;
        }
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 564
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3776, 8, 0, 3520, 8397840, 0, 3520, 8397840, 0, 3520, 8397840, 0, 3520, 8397840, 0, 3136, 2147483651, 0, 3136, 2147483651, 0, 3136, 2147483651, 0, 2880, 1074266240, 0, 2880, 1074266240, 0, 2880, 1074266240, 0, 4608, 73, 0, 4608, 73, 0, 4608, 73, 0, 8896, 524288, 0, 11200, 524288, 0, 11216, 524288, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 14400, 3, 0, 14400, 3, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 17280, 536870916, 0, 17280, 536870916, 0, 17284, 536870916, 0, 17284, 536870916, 0, 17288, 536870916, 0, 17288, 536870916, 0, 17296, 536870916, 0, 17296, 536870916, 0, 17300, 536870916, 0, 17300, 536870916, 0, 17304, 536870916, 0, 17304, 536870916, 0, 19648, 273, 0, 19648, 273, 0, 19648, 273, 0, 22272, 273, 0, 22272, 273, 0, 22272, 273, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 25616, 32, 0, 25632, 32, 0, 28352, 16384, 0, 32576, 32768, 0, 36672, 8, 0, 37888, 2281701384, 0, 37888, 2281701384, 0, 37888, 2281701384, 0, 37904, 2281701384, 0, 37904, 2281701384, 0, 37904, 2281701384, 0, 38592, 2281701384, 0, 38592, 2281701384, 0, 38592, 2281701384, 0, 38608, 2281701384, 0, 38608, 2281701384, 0, 38608, 2281701384, 0, 3776, 8, 0, 3520, 8397840, 0, 3520, 8397840, 0, 3520, 8397840, 0, 3520, 8397840, 0, 3136, 2147483651, 0, 3136, 2147483651, 0, 3136, 2147483651, 0, 2880, 1074266240, 0, 2880, 1074266240, 0, 2880, 1074266240, 0, 4608, 73, 0, 4608, 73, 0, 4608, 73, 0, 8896, 524288, 0, 11200, 524288, 0, 11216, 524288, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 13312, 3674210331, 0, 14400, 3, 0, 14400, 3, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 15104, 3680501979, 0, 17280, 536870916, 0, 17280, 536870916, 0, 17284, 536870916, 0, 17284, 536870916, 0, 17288, 536870916, 0, 17288, 536870916, 0, 17296, 536870916, 0, 17296, 536870916, 0, 17300, 536870916, 0, 17300, 536870916, 0, 17304, 536870916, 0, 17304, 536870916, 0, 19648, 273, 0, 19648, 273, 0, 19648, 273, 0, 22272, 273, 0, 22272, 273, 0, 22272, 273, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23440, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 23456, 572662306, 0, 25616, 32, 0, 25632, 32, 0, 28352, 16384, 0, 32576, 32768, 0, 36672, 8, 0, 37888, 2281701384, 0, 37888, 2281701384, 0, 37888, 2281701384, 0, 37904, 2281701384, 0, 37904, 2281701384, 0, 37904, 2281701384, 0, 38592, 2281701384, 0, 38592, 2281701384, 0, 38592, 2281701384, 0, 38608, 2281701384, 0, 38608, 2281701384, 0, 38608, 2281701384, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
