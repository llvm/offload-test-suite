#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 1)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (48 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 5)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (42 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 26))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (38 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() >= 24)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (32 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (26 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
  if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 6))) {
    if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 13))) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (86 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 24))) {
    result = (result + WaveActiveMax(8));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (101 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 27))) {
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 21))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (119 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 30))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((137 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if ((WaveGetLaneIndex() == 21)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((151 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 6))) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (174 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 282
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3072, 1, 0, 2688, 32, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2048, 50331648, 0, 2048, 50331648, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 6464, 1090519041, 0, 6464, 1090519041, 0, 6464, 1090519041, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 8784, 3221225483, 0, 8784, 3221225483, 0, 8784, 3221225483, 0, 8784, 3221225483, 0, 8784, 3221225483, 0, 8800, 3221225483, 0, 8800, 3221225483, 0, 8800, 3221225483, 0, 8800, 3221225483, 0, 8800, 3221225483, 0, 11136, 37749120, 0, 11136, 37749120, 0, 11136, 37749120, 0, 11136, 37749120, 0, 3072, 1, 0, 2688, 32, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2432, 4227858654, 0, 2048, 50331648, 0, 2048, 50331648, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 1664, 5592320, 0, 6464, 1090519041, 0, 6464, 1090519041, 0, 6464, 1090519041, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 7616, 3623878659, 0, 8784, 3221225483, 0, 8784, 3221225483, 0, 8784, 3221225483, 0, 8784, 3221225483, 0, 8784, 3221225483, 0, 8800, 3221225483, 0, 8800, 3221225483, 0, 8800, 3221225483, 0, 8800, 3221225483, 0, 8800, 3221225483, 0, 11136, 37749120, 0, 11136, 37749120, 0, 11136, 37749120, 0, 11136, 37749120, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
