#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() < 10)) {
    if ((WaveGetLaneIndex() >= 26)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (11 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() >= 21)) {
      result = (result + WaveActiveMin(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (18 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (28 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 18))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((47 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          break;
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (60 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 20))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((89 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 23))) {
            if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (107 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          uint counter2 = 0;
          while ((counter2 < 3)) {
            counter2 = (counter2 + 1);
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((123 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 2: {
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((140 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((159 << 6) | (i3 << 4)) | (i4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i4 == 2)) {
            break;
          }
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (166 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 306
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1792, 85, 0, 1792, 85, 0, 1792, 85, 0, 1792, 85, 0, 3008, 8, 0, 3024, 8, 0, 3840, 73, 0, 3840, 73, 0, 3840, 73, 0, 8960, 68174084, 0, 8960, 68174084, 0, 8960, 68174084, 0, 8960, 68174084, 0, 8960, 68174084, 0, 8976, 68174084, 0, 8976, 68174084, 0, 8976, 68174084, 0, 8976, 68174084, 0, 8976, 68174084, 0, 8992, 68174084, 0, 8992, 68174084, 0, 8992, 68174084, 0, 8992, 68174084, 0, 8992, 68174084, 0, 10176, 603979780, 0, 10176, 603979780, 0, 10176, 603979780, 0, 10180, 603979780, 0, 10180, 603979780, 0, 10180, 603979780, 0, 10184, 603979780, 0, 10184, 603979780, 0, 10184, 603979780, 0, 10192, 603979780, 0, 10192, 603979780, 0, 10192, 603979780, 0, 10196, 603979780, 0, 10196, 603979780, 0, 10196, 603979780, 0, 10200, 603979780, 0, 10200, 603979780, 0, 10200, 603979780, 0, 10208, 603979780, 0, 10208, 603979780, 0, 10208, 603979780, 0, 10212, 603979780, 0, 10212, 603979780, 0, 10212, 603979780, 0, 10216, 603979780, 0, 10216, 603979780, 0, 10216, 603979780, 0, 1792, 85, 0, 1792, 85, 0, 1792, 85, 0, 1792, 85, 0, 3008, 8, 0, 3024, 8, 0, 3840, 73, 0, 3840, 73, 0, 3840, 73, 0, 8960, 68174084, 0, 8960, 68174084, 0, 8960, 68174084, 0, 8960, 68174084, 0, 8960, 68174084, 0, 8976, 68174084, 0, 8976, 68174084, 0, 8976, 68174084, 0, 8976, 68174084, 0, 8976, 68174084, 0, 8992, 68174084, 0, 8992, 68174084, 0, 8992, 68174084, 0, 8992, 68174084, 0, 8992, 68174084, 0, 10176, 603979780, 0, 10176, 603979780, 0, 10176, 603979780, 0, 10180, 603979780, 0, 10180, 603979780, 0, 10180, 603979780, 0, 10184, 603979780, 0, 10184, 603979780, 0, 10184, 603979780, 0, 10192, 603979780, 0, 10192, 603979780, 0, 10192, 603979780, 0, 10196, 603979780, 0, 10196, 603979780, 0, 10196, 603979780, 0, 10200, 603979780, 0, 10200, 603979780, 0, 10200, 603979780, 0, 10208, 603979780, 0, 10208, 603979780, 0, 10208, 603979780, 0, 10212, 603979780, 0, 10212, 603979780, 0, 10212, 603979780, 0, 10216, 603979780, 0, 10216, 603979780, 0, 10216, 603979780, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
