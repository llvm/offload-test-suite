#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((27 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((36 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((41 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 9))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((66 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter1 == 2)) {
            break;
          }
        }
        if ((i0 == 2)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (81 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((102 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((112 << 6) | (counter2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((121 << 6) | (counter2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((126 << 6) | (counter2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((130 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
        }
        if ((WaveGetLaneIndex() == 15)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((137 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((159 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter4 = 0;
        while ((counter4 < 2)) {
          counter4 = (counter4 + 1);
          if ((WaveGetLaneIndex() < 1)) {
            result = (result + WaveActiveMin(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((173 << 6) | (counter3 << 4)) | (counter4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 4)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((183 << 6) | (counter3 << 4)) | (counter4 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((192 << 6) | (counter3 << 4)) | (counter4 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((197 << 6) | (counter3 << 4)) | (counter4 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 3: {
              if ((WaveGetLaneIndex() < 20)) {
                result = (result + WaveActiveSum(4));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((204 << 6) | (counter3 << 4)) | (counter4 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((208 << 6) | (counter3 << 4)) | (counter4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if ((WaveGetLaneIndex() >= 19)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((215 << 6) | (counter3 << 4)) | (counter4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter4 == 1)) {
            break;
          }
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 372
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1732, 1, 0, 1736, 1, 0, 1748, 1, 0, 1752, 1, 0, 1764, 1, 0, 1768, 1, 0, 2308, 268501008, 0, 2308, 268501008, 0, 2308, 268501008, 0, 2312, 268501008, 0, 2312, 268501008, 0, 2312, 268501008, 0, 2324, 268501008, 0, 2324, 268501008, 0, 2324, 268501008, 0, 2328, 268501008, 0, 2328, 268501008, 0, 2328, 268501008, 0, 2340, 268501008, 0, 2340, 268501008, 0, 2340, 268501008, 0, 2344, 268501008, 0, 2344, 268501008, 0, 2344, 268501008, 0, 2628, 1048832, 0, 2628, 1048832, 0, 2632, 1048832, 0, 2632, 1048832, 0, 2644, 1048832, 0, 2644, 1048832, 0, 2648, 1048832, 0, 2648, 1048832, 0, 2660, 1048832, 0, 2660, 1048832, 0, 2664, 1048832, 0, 2664, 1048832, 0, 4228, 16, 0, 4232, 16, 0, 4244, 16, 0, 4248, 16, 0, 4260, 16, 0, 4264, 16, 0, 10192, 134217728, 0, 10208, 134217728, 0, 13076, 559240, 0, 13076, 559240, 0, 13076, 559240, 0, 13076, 559240, 0, 13076, 559240, 0, 13092, 559240, 0, 13092, 559240, 0, 13092, 559240, 0, 13092, 559240, 0, 13092, 559240, 0, 13780, 2290614272, 0, 13780, 2290614272, 0, 13780, 2290614272, 0, 13780, 2290614272, 0, 13796, 2290614272, 0, 13796, 2290614272, 0, 13796, 2290614272, 0, 13796, 2290614272, 0, 1732, 1, 0, 1736, 1, 0, 1748, 1, 0, 1752, 1, 0, 1764, 1, 0, 1768, 1, 0, 2308, 268501008, 0, 2308, 268501008, 0, 2308, 268501008, 0, 2312, 268501008, 0, 2312, 268501008, 0, 2312, 268501008, 0, 2324, 268501008, 0, 2324, 268501008, 0, 2324, 268501008, 0, 2328, 268501008, 0, 2328, 268501008, 0, 2328, 268501008, 0, 2340, 268501008, 0, 2340, 268501008, 0, 2340, 268501008, 0, 2344, 268501008, 0, 2344, 268501008, 0, 2344, 268501008, 0, 2628, 1048832, 0, 2628, 1048832, 0, 2632, 1048832, 0, 2632, 1048832, 0, 2644, 1048832, 0, 2644, 1048832, 0, 2648, 1048832, 0, 2648, 1048832, 0, 2660, 1048832, 0, 2660, 1048832, 0, 2664, 1048832, 0, 2664, 1048832, 0, 4228, 16, 0, 4232, 16, 0, 4244, 16, 0, 4248, 16, 0, 4260, 16, 0, 4264, 16, 0, 10192, 134217728, 0, 10208, 134217728, 0, 13076, 559240, 0, 13076, 559240, 0, 13076, 559240, 0, 13076, 559240, 0, 13076, 559240, 0, 13092, 559240, 0, 13092, 559240, 0, 13092, 559240, 0, 13092, 559240, 0, 13092, 559240, 0, 13780, 2290614272, 0, 13780, 2290614272, 0, 13780, 2290614272, 0, 13780, 2290614272, 0, 13796, 2290614272, 0, 13796, 2290614272, 0, 13796, 2290614272, 0, 13796, 2290614272, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
