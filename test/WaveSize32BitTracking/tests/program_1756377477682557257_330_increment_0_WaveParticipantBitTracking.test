#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (22 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              uint counter0 = 0;
              while ((counter0 < 3)) {
                counter0 = (counter0 + 1);
                if (((WaveGetLaneIndex() & 1) == 0)) {
                  result = (result + WaveActiveSum(WaveGetLaneIndex()));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((38 << 6) | (counter0 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if (((WaveGetLaneIndex() & 1) == 0)) {
                  result = (result + WaveActiveMin(10));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = ((47 << 6) | (counter0 << 4));
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 21))) {
                if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 22))) {
                  result = (result + WaveActiveSum(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (65 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          }
          break;
        }
      case 1: {
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if ((WaveGetLaneIndex() >= 29)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((79 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 17)) {
              if ((WaveGetLaneIndex() == 6)) {
                result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((91 << 6) | (counter1 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((100 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((WaveGetLaneIndex() < 16)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((107 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((134 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
            if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25))) {
              result = (result + WaveActiveMin(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((161 << 6) | (i2 << 4)) | (i3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((180 << 6) | (i2 << 4)) | (i3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i3 == 1)) {
              continue;
            }
          }
          if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 28))) {
            result = (result + WaveActiveMin(7));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((202 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            break;
          }
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (210 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((234 << 6) | (counter4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((243 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((252 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 9)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((259 << 6) | (counter4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (268 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (272 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 588
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 5072, 2147483648, 0, 5088, 2147483648, 0, 6416, 272696336, 0, 6416, 272696336, 0, 6416, 272696336, 0, 6416, 272696336, 0, 6416, 272696336, 0, 6432, 272696336, 0, 6432, 272696336, 0, 6432, 272696336, 0, 6432, 272696336, 0, 6432, 272696336, 0, 6864, 9362, 0, 6864, 9362, 0, 6864, 9362, 0, 6864, 9362, 0, 6864, 9362, 0, 6880, 9362, 0, 6880, 9362, 0, 6880, 9362, 0, 6880, 9362, 0, 6880, 9362, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 16592, 341, 0, 16592, 341, 0, 16592, 341, 0, 16592, 341, 0, 16592, 341, 0, 16608, 341, 0, 16608, 341, 0, 16608, 341, 0, 16608, 341, 0, 16608, 341, 0, 16624, 341, 0, 16624, 341, 0, 16624, 341, 0, 16624, 341, 0, 16624, 341, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 5072, 2147483648, 0, 5088, 2147483648, 0, 6416, 272696336, 0, 6416, 272696336, 0, 6416, 272696336, 0, 6416, 272696336, 0, 6416, 272696336, 0, 6432, 272696336, 0, 6432, 272696336, 0, 6432, 272696336, 0, 6432, 272696336, 0, 6432, 272696336, 0, 6864, 9362, 0, 6864, 9362, 0, 6864, 9362, 0, 6864, 9362, 0, 6864, 9362, 0, 6880, 9362, 0, 6880, 9362, 0, 6880, 9362, 0, 6880, 9362, 0, 6880, 9362, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 13440, 613566756, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 14992, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15008, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 15024, 1431655765, 0, 16592, 341, 0, 16592, 341, 0, 16592, 341, 0, 16592, 341, 0, 16592, 341, 0, 16608, 341, 0, 16608, 341, 0, 16608, 341, 0, 16608, 341, 0, 16608, 341, 0, 16624, 341, 0, 16624, 341, 0, 16624, 341, 0, 16624, 341, 0, 16624, 341, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
