#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 24))) {
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 14))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((40 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i0 == 1)) {
            continue;
          }
        }
      }
      break;
    }
  case 1: {
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((60 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 30))) {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveSum(10));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((78 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((89 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() >= 21)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((96 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((107 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 18))) {
      switch ((WaveGetLaneIndex() % 4)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (124 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (133 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (138 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 3: {
          if ((WaveGetLaneIndex() < 20)) {
            result = (result + WaveActiveSum(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (145 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 23))) {
        if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 22))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (170 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 31))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((197 << 6) | (i2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter3 = 0;
          while ((counter3 < 3)) {
            counter3 = (counter3 + 1);
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((213 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((222 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        if (((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (233 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (242 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if ((WaveGetLaneIndex() < 13)) {
    if ((WaveGetLaneIndex() < 6)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (252 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 21))) {
      if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 27))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (270 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 22))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((288 << 6) | (counter4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 28))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (299 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() < 10)) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (308 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 762
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2560, 134217728, 0, 2576, 134217728, 0, 2592, 134217728, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 4992, 2147483650, 0, 4992, 2147483650, 0, 5008, 2147483650, 0, 5008, 2147483650, 0, 5024, 2147483650, 0, 5024, 2147483650, 0, 5696, 2147483650, 0, 5696, 2147483650, 0, 5712, 2147483650, 0, 5712, 2147483650, 0, 5728, 2147483650, 0, 5728, 2147483650, 0, 6144, 306184192, 0, 6144, 306184192, 0, 6144, 306184192, 0, 6160, 306184192, 0, 6160, 306184192, 0, 6160, 306184192, 0, 6176, 306184192, 0, 6176, 306184192, 0, 6176, 306184192, 0, 6848, 272696336, 0, 6848, 272696336, 0, 6848, 272696336, 0, 6848, 272696336, 0, 6848, 272696336, 0, 6864, 272696336, 0, 6864, 272696336, 0, 6864, 272696336, 0, 6864, 272696336, 0, 6864, 272696336, 0, 6880, 272696336, 0, 6880, 272696336, 0, 6880, 272696336, 0, 6880, 272696336, 0, 6880, 272696336, 0, 13636, 256, 0, 13640, 256, 0, 13644, 256, 0, 13652, 256, 0, 13656, 256, 0, 13660, 256, 0, 13668, 256, 0, 13672, 256, 0, 13676, 256, 0, 14212, 256, 0, 14216, 256, 0, 14220, 256, 0, 14228, 256, 0, 14232, 256, 0, 14236, 256, 0, 14244, 256, 0, 14248, 256, 0, 14252, 256, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 16128, 63, 0, 16128, 63, 0, 16128, 63, 0, 16128, 63, 0, 16128, 63, 0, 16128, 63, 0, 17280, 15, 0, 17280, 15, 0, 17280, 15, 0, 17280, 15, 0, 18448, 15, 0, 18448, 15, 0, 18448, 15, 0, 18448, 15, 0, 18464, 15, 0, 18464, 15, 0, 18464, 15, 0, 18464, 15, 0, 18480, 15, 0, 18480, 15, 0, 18480, 15, 0, 18480, 15, 0, 19136, 15, 0, 19136, 15, 0, 19136, 15, 0, 19136, 15, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 2560, 134217728, 0, 2576, 134217728, 0, 2592, 134217728, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3840, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3856, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 3872, 2181570690, 0, 4992, 2147483650, 0, 4992, 2147483650, 0, 5008, 2147483650, 0, 5008, 2147483650, 0, 5024, 2147483650, 0, 5024, 2147483650, 0, 5696, 2147483650, 0, 5696, 2147483650, 0, 5712, 2147483650, 0, 5712, 2147483650, 0, 5728, 2147483650, 0, 5728, 2147483650, 0, 6144, 306184192, 0, 6144, 306184192, 0, 6144, 306184192, 0, 6160, 306184192, 0, 6160, 306184192, 0, 6160, 306184192, 0, 6176, 306184192, 0, 6176, 306184192, 0, 6176, 306184192, 0, 6848, 272696336, 0, 6848, 272696336, 0, 6848, 272696336, 0, 6848, 272696336, 0, 6848, 272696336, 0, 6864, 272696336, 0, 6864, 272696336, 0, 6864, 272696336, 0, 6864, 272696336, 0, 6864, 272696336, 0, 6880, 272696336, 0, 6880, 272696336, 0, 6880, 272696336, 0, 6880, 272696336, 0, 6880, 272696336, 0, 13636, 256, 0, 13640, 256, 0, 13644, 256, 0, 13652, 256, 0, 13656, 256, 0, 13660, 256, 0, 13668, 256, 0, 13672, 256, 0, 13676, 256, 0, 14212, 256, 0, 14216, 256, 0, 14220, 256, 0, 14228, 256, 0, 14232, 256, 0, 14236, 256, 0, 14244, 256, 0, 14248, 256, 0, 14252, 256, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 15488, 1431655765, 0, 16128, 63, 0, 16128, 63, 0, 16128, 63, 0, 16128, 63, 0, 16128, 63, 0, 16128, 63, 0, 17280, 15, 0, 17280, 15, 0, 17280, 15, 0, 17280, 15, 0, 18448, 15, 0, 18448, 15, 0, 18448, 15, 0, 18448, 15, 0, 18464, 15, 0, 18464, 15, 0, 18464, 15, 0, 18464, 15, 0, 18480, 15, 0, 18480, 15, 0, 18480, 15, 0, 18480, 15, 0, 19136, 15, 0, 19136, 15, 0, 19136, 15, 0, 19136, 15, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0, 19712, 1023, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
