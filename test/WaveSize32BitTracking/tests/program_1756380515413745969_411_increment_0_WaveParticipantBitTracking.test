#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 28))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((20 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 26)) {
          if ((WaveGetLaneIndex() == 13)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((32 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 10)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((39 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 26))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((50 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 16))) {
          result = (result + WaveActiveMin(7));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((72 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 31))) {
          if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 26))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((102 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 25))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((121 << 6) | (counter1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 3))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((140 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (145 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (152 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 24))) {
    if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 30))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (170 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (180 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if ((WaveGetLaneIndex() == 20)) {
          if ((WaveGetLaneIndex() == 18)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (190 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() < 9)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (197 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (211 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (215 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 23))) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (226 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 318
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1296, 268435457, 0, 1296, 268435457, 0, 1312, 268435457, 0, 1312, 268435457, 0, 3216, 268435729, 0, 3216, 268435729, 0, 3216, 268435729, 0, 3216, 268435729, 0, 3232, 268435729, 0, 3232, 268435729, 0, 3232, 268435729, 0, 3232, 268435729, 0, 4624, 536870912, 0, 4640, 536870912, 0, 4656, 536870912, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9728, 559240, 0, 9728, 559240, 0, 9728, 559240, 0, 9728, 559240, 0, 9728, 559240, 0, 10880, 3221225475, 0, 10880, 3221225475, 0, 10880, 3221225475, 0, 10880, 3221225475, 0, 11520, 73, 0, 11520, 73, 0, 11520, 73, 0, 12608, 18, 0, 12608, 18, 0, 13504, 536870944, 0, 13504, 536870944, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 1296, 268435457, 0, 1296, 268435457, 0, 1312, 268435457, 0, 1312, 268435457, 0, 3216, 268435729, 0, 3216, 268435729, 0, 3216, 268435729, 0, 3216, 268435729, 0, 3232, 268435729, 0, 3232, 268435729, 0, 3232, 268435729, 0, 3232, 268435729, 0, 4624, 536870912, 0, 4640, 536870912, 0, 4656, 536870912, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9280, 1145324612, 0, 9728, 559240, 0, 9728, 559240, 0, 9728, 559240, 0, 9728, 559240, 0, 9728, 559240, 0, 10880, 3221225475, 0, 10880, 3221225475, 0, 10880, 3221225475, 0, 10880, 3221225475, 0, 11520, 73, 0, 11520, 73, 0, 11520, 73, 0, 12608, 18, 0, 12608, 18, 0, 13504, 536870944, 0, 13504, 536870944, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0, 14464, 4278190143, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
