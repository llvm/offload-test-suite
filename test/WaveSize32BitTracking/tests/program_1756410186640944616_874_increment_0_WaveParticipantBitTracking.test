#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 1))) {
        if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 23))) {
          if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 30))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (35 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter0 = 0;
          while ((counter0 < 3)) {
            counter0 = (counter0 + 1);
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((51 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((60 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
      } else {
      if ((WaveGetLaneIndex() == 14)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (67 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if ((WaveGetLaneIndex() >= 20)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((82 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 18)) {
          if ((WaveGetLaneIndex() < 7)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((94 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 29)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((103 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((124 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() < 10)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((131 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((WaveGetLaneIndex() == 28)) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (138 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (147 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
      if ((WaveGetLaneIndex() < 14)) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((162 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((184 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((200 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((209 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    if ((WaveGetLaneIndex() >= 20)) {
      result = (result + WaveActiveSum(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((216 << 6) | (i2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 696
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5248, 153092096, 0, 5248, 153092096, 0, 5248, 153092096, 0, 5264, 153092096, 0, 5264, 153092096, 0, 5264, 153092096, 0, 5280, 153092096, 0, 5280, 153092096, 0, 5280, 153092096, 0, 8384, 585, 0, 8384, 585, 0, 8384, 585, 0, 8384, 585, 0, 8400, 585, 0, 8400, 585, 0, 8400, 585, 0, 8400, 585, 0, 8416, 585, 0, 8416, 585, 0, 8416, 585, 0, 8416, 585, 0, 9408, 272696336, 0, 9408, 272696336, 0, 9408, 272696336, 0, 9408, 272696336, 0, 9408, 272696336, 0, 10368, 2340, 0, 10368, 2340, 0, 10368, 2340, 0, 10368, 2340, 0, 10384, 2340, 0, 10384, 2340, 0, 10384, 2340, 0, 10384, 2340, 0, 10400, 2340, 0, 10400, 2340, 0, 10400, 2340, 0, 10400, 2340, 0, 11780, 4, 0, 11784, 4, 0, 11796, 4, 0, 11800, 4, 0, 11812, 4, 0, 11816, 4, 0, 12804, 68174084, 0, 12804, 68174084, 0, 12804, 68174084, 0, 12804, 68174084, 0, 12804, 68174084, 0, 12808, 68174084, 0, 12808, 68174084, 0, 12808, 68174084, 0, 12808, 68174084, 0, 12808, 68174084, 0, 12820, 68174084, 0, 12820, 68174084, 0, 12820, 68174084, 0, 12820, 68174084, 0, 12820, 68174084, 0, 12824, 68174084, 0, 12824, 68174084, 0, 12824, 68174084, 0, 12824, 68174084, 0, 12824, 68174084, 0, 12836, 68174084, 0, 12836, 68174084, 0, 12836, 68174084, 0, 12836, 68174084, 0, 12836, 68174084, 0, 12840, 68174084, 0, 12840, 68174084, 0, 12840, 68174084, 0, 12840, 68174084, 0, 12840, 68174084, 0, 13380, 545392672, 0, 13380, 545392672, 0, 13380, 545392672, 0, 13380, 545392672, 0, 13380, 545392672, 0, 13384, 545392672, 0, 13384, 545392672, 0, 13384, 545392672, 0, 13384, 545392672, 0, 13384, 545392672, 0, 13396, 545392672, 0, 13396, 545392672, 0, 13396, 545392672, 0, 13396, 545392672, 0, 13396, 545392672, 0, 13400, 545392672, 0, 13400, 545392672, 0, 13400, 545392672, 0, 13400, 545392672, 0, 13400, 545392672, 0, 13412, 545392672, 0, 13412, 545392672, 0, 13412, 545392672, 0, 13412, 545392672, 0, 13412, 545392672, 0, 13416, 545392672, 0, 13416, 545392672, 0, 13416, 545392672, 0, 13416, 545392672, 0, 13416, 545392672, 0, 13824, 613416960, 0, 13824, 613416960, 0, 13824, 613416960, 0, 13824, 613416960, 0, 13840, 613416960, 0, 13840, 613416960, 0, 13840, 613416960, 0, 13840, 613416960, 0, 13856, 613416960, 0, 13856, 613416960, 0, 13856, 613416960, 0, 13856, 613416960, 0, 5248, 153092096, 0, 5248, 153092096, 0, 5248, 153092096, 0, 5264, 153092096, 0, 5264, 153092096, 0, 5264, 153092096, 0, 5280, 153092096, 0, 5280, 153092096, 0, 5280, 153092096, 0, 8384, 585, 0, 8384, 585, 0, 8384, 585, 0, 8384, 585, 0, 8400, 585, 0, 8400, 585, 0, 8400, 585, 0, 8400, 585, 0, 8416, 585, 0, 8416, 585, 0, 8416, 585, 0, 8416, 585, 0, 9408, 272696336, 0, 9408, 272696336, 0, 9408, 272696336, 0, 9408, 272696336, 0, 9408, 272696336, 0, 10368, 2340, 0, 10368, 2340, 0, 10368, 2340, 0, 10368, 2340, 0, 10384, 2340, 0, 10384, 2340, 0, 10384, 2340, 0, 10384, 2340, 0, 10400, 2340, 0, 10400, 2340, 0, 10400, 2340, 0, 10400, 2340, 0, 11780, 4, 0, 11784, 4, 0, 11796, 4, 0, 11800, 4, 0, 11812, 4, 0, 11816, 4, 0, 12804, 68174084, 0, 12804, 68174084, 0, 12804, 68174084, 0, 12804, 68174084, 0, 12804, 68174084, 0, 12808, 68174084, 0, 12808, 68174084, 0, 12808, 68174084, 0, 12808, 68174084, 0, 12808, 68174084, 0, 12820, 68174084, 0, 12820, 68174084, 0, 12820, 68174084, 0, 12820, 68174084, 0, 12820, 68174084, 0, 12824, 68174084, 0, 12824, 68174084, 0, 12824, 68174084, 0, 12824, 68174084, 0, 12824, 68174084, 0, 12836, 68174084, 0, 12836, 68174084, 0, 12836, 68174084, 0, 12836, 68174084, 0, 12836, 68174084, 0, 12840, 68174084, 0, 12840, 68174084, 0, 12840, 68174084, 0, 12840, 68174084, 0, 12840, 68174084, 0, 13380, 545392672, 0, 13380, 545392672, 0, 13380, 545392672, 0, 13380, 545392672, 0, 13380, 545392672, 0, 13384, 545392672, 0, 13384, 545392672, 0, 13384, 545392672, 0, 13384, 545392672, 0, 13384, 545392672, 0, 13396, 545392672, 0, 13396, 545392672, 0, 13396, 545392672, 0, 13396, 545392672, 0, 13396, 545392672, 0, 13400, 545392672, 0, 13400, 545392672, 0, 13400, 545392672, 0, 13400, 545392672, 0, 13400, 545392672, 0, 13412, 545392672, 0, 13412, 545392672, 0, 13412, 545392672, 0, 13412, 545392672, 0, 13412, 545392672, 0, 13416, 545392672, 0, 13416, 545392672, 0, 13416, 545392672, 0, 13416, 545392672, 0, 13416, 545392672, 0, 13824, 613416960, 0, 13824, 613416960, 0, 13824, 613416960, 0, 13824, 613416960, 0, 13840, 613416960, 0, 13840, 613416960, 0, 13840, 613416960, 0, 13840, 613416960, 0, 13856, 613416960, 0, 13856, 613416960, 0, 13856, 613416960, 0, 13856, 613416960, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
