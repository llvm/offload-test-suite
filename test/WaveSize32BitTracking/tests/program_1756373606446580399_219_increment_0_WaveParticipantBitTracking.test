#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 22))) {
          result = (result + WaveActiveMin(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((21 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 11))) {
          if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 8))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((55 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 3))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((80 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 18)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((87 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 24))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((98 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 2)) {
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (110 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  uint counter1 = 0;
  while ((counter1 < 3)) {
    counter1 = (counter1 + 1);
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((131 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((140 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 2))) {
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (165 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (174 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (178 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 24))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (193 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 528
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1344, 1430257665, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 3520, 268435456, 0, 3536, 268435456, 0, 3552, 268435456, 0, 5568, 262144, 0, 5584, 262144, 0, 5600, 262144, 0, 6272, 1426063361, 0, 6272, 1426063361, 0, 6272, 1426063361, 0, 6272, 1426063361, 0, 6272, 1426063361, 0, 6288, 1426063361, 0, 6288, 1426063361, 0, 6288, 1426063361, 0, 6288, 1426063361, 0, 6288, 1426063361, 0, 6304, 1426063361, 0, 6304, 1426063361, 0, 6304, 1426063361, 0, 6304, 1426063361, 0, 6304, 1426063361, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 10560, 4, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1344, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1360, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 1376, 1430257665, 0, 3520, 268435456, 0, 3536, 268435456, 0, 3552, 268435456, 0, 5568, 262144, 0, 5584, 262144, 0, 5600, 262144, 0, 6272, 1426063361, 0, 6272, 1426063361, 0, 6272, 1426063361, 0, 6272, 1426063361, 0, 6272, 1426063361, 0, 6288, 1426063361, 0, 6288, 1426063361, 0, 6288, 1426063361, 0, 6288, 1426063361, 0, 6288, 1426063361, 0, 6304, 1426063361, 0, 6304, 1426063361, 0, 6304, 1426063361, 0, 6304, 1426063361, 0, 6304, 1426063361, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8400, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8416, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 8432, 1431655765, 0, 10560, 4, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
