#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (12 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (21 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (31 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (40 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (45 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      }
    }
  case 1: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 25)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((60 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter1 = 0;
        while ((counter1 < 3)) {
          counter1 = (counter1 + 1);
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((80 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((90 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((99 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (((104 << 6) | (i0 << 4)) | (counter1 << 2));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((108 << 6) | (i0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 26))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((119 << 6) | (i0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter1 == 2)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() == 14)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((131 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (136 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((153 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((169 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 11)) {
            if ((WaveGetLaneIndex() >= 20)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((179 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() >= 27)) {
              result = (result + WaveActiveMin(7));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((186 << 6) | (i2 << 4)) | (counter3 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((195 << 6) | (i2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((204 << 6) | (i2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (208 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 2208
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 1, 0, 1344, 268501008, 0, 1344, 268501008, 0, 1344, 268501008, 0, 2880, 1048832, 0, 2880, 1048832, 0, 3840, 33554432, 0, 3856, 33554432, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5764, 1, 0, 5768, 1, 0, 5780, 1, 0, 5784, 1, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 768, 1, 0, 1344, 268501008, 0, 1344, 268501008, 0, 1344, 268501008, 0, 2880, 1048832, 0, 2880, 1048832, 0, 3840, 33554432, 0, 3856, 33554432, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5124, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5128, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5140, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5144, 838860819, 0, 5764, 1, 0, 5768, 1, 0, 5780, 1, 0, 5784, 1, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6340, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6344, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6356, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6360, 285282321, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6660, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6664, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6676, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 6680, 858993459, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7620, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7624, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7636, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 7640, 805306675, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 8704, 2004318071, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9792, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 9808, 2863311530, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10820, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10824, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10836, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 10840, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12484, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12488, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12500, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 12504, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13056, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0, 13072, 1431655765, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
