#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((32 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((51 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 13))) {
            if ((((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((93 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((102 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 1)) {
            continue;
          }
        }
        if ((counter0 == 2)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 24))) {
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 26))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 5)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (128 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 28))) {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 22))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (146 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter2 = 0;
          while ((counter2 < 2)) {
            counter2 = (counter2 + 1);
            if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 28))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((164 << 6) | (counter2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 24))) {
            result = (result + WaveActiveSum(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (175 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((196 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter4 = 0;
          while ((counter4 < 3)) {
            counter4 = (counter4 + 1);
            if ((WaveGetLaneIndex() == 27)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((210 << 6) | (counter3 << 4)) | (counter4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 29)) {
              result = (result + WaveActiveMax(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((217 << 6) | (counter3 << 4)) | (counter4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (224 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (228 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter5 = 0;
      while ((counter5 < 2)) {
        counter5 = (counter5 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((247 << 6) | (counter5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((261 << 6) | (counter5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((270 << 6) | (counter5 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(9));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((279 << 6) | (counter5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter5 == 1)) {
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (291 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (301 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 9))) {
        if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 18))) {
          result = (result + WaveActiveSum(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (335 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i6 = 0; (i6 < 3); i6 = (i6 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((352 << 6) | (i6 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i6 == 2)) {
            break;
          }
        }
      } else {
      uint counter7 = 0;
      while ((counter7 < 3)) {
        counter7 = (counter7 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((371 << 6) | (counter7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 21))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (384 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 900
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 8192, 536870912, 0, 9344, 536870912, 0, 10512, 536870912, 0, 10528, 536870912, 0, 11200, 536870912, 0, 14336, 559240, 0, 14336, 559240, 0, 14336, 559240, 0, 14336, 559240, 0, 14336, 559240, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 19264, 85, 0, 19264, 85, 0, 19264, 85, 0, 19264, 85, 0, 22528, 8391170, 0, 22528, 8391170, 0, 22528, 8391170, 0, 22528, 8391170, 0, 22544, 8391170, 0, 22544, 8391170, 0, 22544, 8391170, 0, 22544, 8391170, 0, 22560, 8391170, 0, 22560, 8391170, 0, 22560, 8391170, 0, 22560, 8391170, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3280, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3284, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3296, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 3300, 286331153, 0, 8192, 536870912, 0, 9344, 536870912, 0, 10512, 536870912, 0, 10528, 536870912, 0, 11200, 536870912, 0, 14336, 559240, 0, 14336, 559240, 0, 14336, 559240, 0, 14336, 559240, 0, 14336, 559240, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 15824, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17296, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 17872, 1431655765, 0, 19264, 85, 0, 19264, 85, 0, 19264, 85, 0, 19264, 85, 0, 22528, 8391170, 0, 22528, 8391170, 0, 22528, 8391170, 0, 22528, 8391170, 0, 22544, 8391170, 0, 22544, 8391170, 0, 22544, 8391170, 0, 22544, 8391170, 0, 22560, 8391170, 0, 22560, 8391170, 0, 22560, 8391170, 0, 22560, 8391170, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23760, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23776, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 23792, 2854920360, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0, 24576, 2854224040, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
