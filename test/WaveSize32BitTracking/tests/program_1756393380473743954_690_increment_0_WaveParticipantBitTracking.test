#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (80 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 27))) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (76 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 5))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (72 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 30))) {
    result = (result + WaveActiveSum(4));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (66 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 19))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (62 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if ((WaveGetLaneIndex() == 9)) {
        if ((WaveGetLaneIndex() == 21)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (93 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if ((WaveGetLaneIndex() >= 19)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((107 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 13))) {
            if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 22))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((141 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 29))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((160 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        if ((WaveGetLaneIndex() == 24)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (167 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 1: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (177 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 21))) {
            switch ((WaveGetLaneIndex() % 2)) {
            case 0: {
                if ((WaveGetLaneIndex() < 8)) {
                  result = (result + WaveActiveSum(1));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (198 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                break;
              }
            case 1: {
                if (((WaveGetLaneIndex() % 2) == 0)) {
                  result = (result + WaveActiveSum(2));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (207 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                break;
              }
            }
            if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 31))) {
              result = (result + WaveActiveMin(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (226 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (231 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 234
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 4864, 17826816, 0, 4864, 17826816, 0, 4864, 17826816, 0, 4608, 67108864, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 11328, 73, 0, 11328, 73, 0, 11328, 73, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 5120, 2863311530, 0, 4864, 17826816, 0, 4864, 17826816, 0, 4864, 17826816, 0, 4608, 67108864, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 4224, 1073742165, 0, 11328, 73, 0, 11328, 73, 0, 11328, 73, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0, 14784, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
