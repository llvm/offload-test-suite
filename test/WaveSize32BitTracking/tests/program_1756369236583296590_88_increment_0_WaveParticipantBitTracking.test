#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 18)) {
            if ((WaveGetLaneIndex() == 5)) {
              result = (result + WaveActiveMin(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (15 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            switch ((WaveGetLaneIndex() % 4)) {
            case 0: {
                if ((WaveGetLaneIndex() < 8)) {
                  result = (result + WaveActiveSum(1));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (25 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                break;
              }
            case 1: {
                if (((WaveGetLaneIndex() % 2) == 0)) {
                  result = (result + WaveActiveSum(2));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (34 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                break;
              }
            case 2: {
                if (true) {
                  result = (result + WaveActiveSum(3));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (39 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                break;
              }
            case 3: {
                if ((WaveGetLaneIndex() < 20)) {
                  result = (result + WaveActiveSum(4));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (46 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                break;
              }
            }
            if ((WaveGetLaneIndex() == 17)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (53 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 30))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (64 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 23))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (77 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (86 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((108 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((119 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  }
  break;
  }
  case 1: {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (133 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (142 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 21))) {
            if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 23))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((171 << 6) | (i1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 24))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((186 << 6) | (i1 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 16))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((201 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      uint counter2 = 0;
      while ((counter2 < 2)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 18)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((215 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 9)) {
          if ((WaveGetLaneIndex() < 11)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((225 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 19))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((240 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 9))) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((257 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 25)) {
        result = (result + WaveActiveMin(10));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((264 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    uint counter3 = 0;
    while ((counter3 < 3)) {
      counter3 = (counter3 + 1);
      if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 27))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((290 << 6) | (counter3 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter4 = 0;
      while ((counter4 < 3)) {
        counter4 = (counter4 + 1);
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 23))) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((308 << 6) | (counter3 << 4)) | (counter4 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter4 == 2)) {
          break;
        }
      }
    }
    break;
  }
  }
  break;
  }
  case 3: {
    if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 27))) {
      if (((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 25))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (333 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i5 = 0; (i5 < 2); i5 = (i5 + 1)) {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMax(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((364 << 6) | (i5 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i6 = 0; (i6 < 2); i6 = (i6 + 1)) {
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 24))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((383 << 6) | (i5 << 4)) | (i6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 22))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((394 << 6) | (i5 << 4)) | (i6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 30))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (413 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 29))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (424 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 31))) {
      if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 28))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (442 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i7 = 0; (i7 < 3); i7 = (i7 + 1)) {
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 29))) {
          result = (result + WaveActiveMax(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((461 << 6) | (i7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i7 == 1)) {
          continue;
        }
      }
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 28))) {
        result = (result + WaveActiveMin(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (475 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter8 = 0;
      while ((counter8 < 2)) {
        counter8 = (counter8 + 1);
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((494 << 6) | (counter8 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((508 << 6) | (counter8 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((517 << 6) | (counter8 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((526 << 6) | (counter8 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i9 = 0; (i9 < 2); i9 = (i9 + 1)) {
        uint counter10 = 0;
        while ((counter10 < 3)) {
          counter10 = (counter10 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((552 << 6) | (i9 << 4)) | (counter10 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((561 << 6) | (i9 << 4)) | (counter10 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 31))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((572 << 6) | (i9 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i9 == 1)) {
          break;
        }
      }
      break;
    }
  case 2: {
      uint counter11 = 0;
      while ((counter11 < 3)) {
        counter11 = (counter11 + 1);
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 23))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((593 << 6) | (counter11 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 21))) {
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 24))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((611 << 6) | (counter11 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((622 << 6) | (counter11 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (629 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 810
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [4096, 1, 0, 4928, 16777217, 0, 4928, 16777217, 0, 5504, 268501008, 0, 5504, 268501008, 0, 5504, 268501008, 0, 10944, 1073741824, 0, 10960, 1073741824, 0, 15376, 1024, 0, 15392, 1024, 0, 19732, 67108868, 0, 19732, 67108868, 0, 19736, 67108868, 0, 19736, 67108868, 0, 19748, 67108868, 0, 19748, 67108868, 0, 19752, 67108868, 0, 19752, 67108868, 0, 19764, 67108868, 0, 19764, 67108868, 0, 19768, 67108868, 0, 19768, 67108868, 0, 24512, 134217728, 0, 24516, 134217728, 0, 24528, 134217728, 0, 24532, 134217728, 0, 25216, 134217728, 0, 25220, 134217728, 0, 25232, 134217728, 0, 25236, 134217728, 0, 27136, 2147483648, 0, 28288, 2147483656, 0, 28288, 2147483656, 0, 29504, 2147483656, 0, 29504, 2147483656, 0, 29520, 2147483656, 0, 29520, 2147483656, 0, 29536, 2147483656, 0, 29536, 2147483656, 0, 30400, 2147483648, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 36608, 2, 0, 36624, 2, 0, 37968, 1140850688, 0, 37968, 1140850688, 0, 37984, 1140850688, 0, 37984, 1140850688, 0, 38000, 1140850688, 0, 38000, 1140850688, 0, 39120, 1140850692, 0, 39120, 1140850692, 0, 39120, 1140850692, 0, 39136, 1140850692, 0, 39136, 1140850692, 0, 39136, 1140850692, 0, 39152, 1140850692, 0, 39152, 1140850692, 0, 39152, 1140850692, 0, 39824, 1140850692, 0, 39824, 1140850692, 0, 39824, 1140850692, 0, 39840, 1140850692, 0, 39840, 1140850692, 0, 39840, 1140850692, 0, 39856, 1140850692, 0, 39856, 1140850692, 0, 39856, 1140850692, 0, 40256, 559240, 0, 40256, 559240, 0, 40256, 559240, 0, 40256, 559240, 0, 40256, 559240, 0, 4096, 1, 0, 4928, 16777217, 0, 4928, 16777217, 0, 5504, 268501008, 0, 5504, 268501008, 0, 5504, 268501008, 0, 10944, 1073741824, 0, 10960, 1073741824, 0, 15376, 1024, 0, 15392, 1024, 0, 19732, 67108868, 0, 19732, 67108868, 0, 19736, 67108868, 0, 19736, 67108868, 0, 19748, 67108868, 0, 19748, 67108868, 0, 19752, 67108868, 0, 19752, 67108868, 0, 19764, 67108868, 0, 19764, 67108868, 0, 19768, 67108868, 0, 19768, 67108868, 0, 24512, 134217728, 0, 24516, 134217728, 0, 24528, 134217728, 0, 24532, 134217728, 0, 25216, 134217728, 0, 25220, 134217728, 0, 25232, 134217728, 0, 25236, 134217728, 0, 27136, 2147483648, 0, 28288, 2147483656, 0, 28288, 2147483656, 0, 29504, 2147483656, 0, 29504, 2147483656, 0, 29520, 2147483656, 0, 29520, 2147483656, 0, 29536, 2147483656, 0, 29536, 2147483656, 0, 30400, 2147483648, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31632, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 31648, 286331153, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35908, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35912, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35916, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35924, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35928, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 35932, 572662306, 0, 36608, 2, 0, 36624, 2, 0, 37968, 1140850688, 0, 37968, 1140850688, 0, 37984, 1140850688, 0, 37984, 1140850688, 0, 38000, 1140850688, 0, 38000, 1140850688, 0, 39120, 1140850692, 0, 39120, 1140850692, 0, 39120, 1140850692, 0, 39136, 1140850692, 0, 39136, 1140850692, 0, 39136, 1140850692, 0, 39152, 1140850692, 0, 39152, 1140850692, 0, 39152, 1140850692, 0, 39824, 1140850692, 0, 39824, 1140850692, 0, 39824, 1140850692, 0, 39840, 1140850692, 0, 39840, 1140850692, 0, 39840, 1140850692, 0, 39856, 1140850692, 0, 39856, 1140850692, 0, 39856, 1140850692, 0, 40256, 559240, 0, 40256, 559240, 0, 40256, 559240, 0, 40256, 559240, 0, 40256, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
