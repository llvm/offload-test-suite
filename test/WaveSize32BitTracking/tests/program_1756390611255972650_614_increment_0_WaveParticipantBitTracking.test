#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 8)) {
            if ((WaveGetLaneIndex() == 30)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (15 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (24 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          uint counter0 = 0;
          while ((counter0 < 3)) {
            counter0 = (counter0 + 1);
            if ((WaveGetLaneIndex() == 9)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((38 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (47 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter1 = 0;
      while ((counter1 < 3)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 30))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((68 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 24))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((89 << 6) | (counter1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i2 == 1)) {
            continue;
          }
        }
      }
      break;
    }
  case 1: {
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        uint counter4 = 0;
        while ((counter4 < 3)) {
          counter4 = (counter4 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((115 << 6) | (counter3 << 4)) | (counter4 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 11))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((130 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter3 == 1)) {
          break;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 666
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1536, 272696336, 0, 1536, 272696336, 0, 1536, 272696336, 0, 1536, 272696336, 0, 1536, 272696336, 0, 4368, 1073741845, 0, 4368, 1073741845, 0, 4368, 1073741845, 0, 4368, 1073741845, 0, 4384, 1073741845, 0, 4384, 1073741845, 0, 4384, 1073741845, 0, 4384, 1073741845, 0, 4400, 1073741845, 0, 4400, 1073741845, 0, 4400, 1073741845, 0, 4400, 1073741845, 0, 5712, 1426063361, 0, 5712, 1426063361, 0, 5712, 1426063361, 0, 5712, 1426063361, 0, 5712, 1426063361, 0, 5716, 1426063361, 0, 5716, 1426063361, 0, 5716, 1426063361, 0, 5716, 1426063361, 0, 5716, 1426063361, 0, 5720, 1426063361, 0, 5720, 1426063361, 0, 5720, 1426063361, 0, 5720, 1426063361, 0, 5720, 1426063361, 0, 5728, 1426063361, 0, 5728, 1426063361, 0, 5728, 1426063361, 0, 5728, 1426063361, 0, 5728, 1426063361, 0, 5732, 1426063361, 0, 5732, 1426063361, 0, 5732, 1426063361, 0, 5732, 1426063361, 0, 5732, 1426063361, 0, 5736, 1426063361, 0, 5736, 1426063361, 0, 5736, 1426063361, 0, 5736, 1426063361, 0, 5736, 1426063361, 0, 5744, 1426063361, 0, 5744, 1426063361, 0, 5744, 1426063361, 0, 5744, 1426063361, 0, 5744, 1426063361, 0, 5748, 1426063361, 0, 5748, 1426063361, 0, 5748, 1426063361, 0, 5748, 1426063361, 0, 5748, 1426063361, 0, 5752, 1426063361, 0, 5752, 1426063361, 0, 5752, 1426063361, 0, 5752, 1426063361, 0, 5752, 1426063361, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 8336, 2048, 0, 1536, 272696336, 0, 1536, 272696336, 0, 1536, 272696336, 0, 1536, 272696336, 0, 1536, 272696336, 0, 4368, 1073741845, 0, 4368, 1073741845, 0, 4368, 1073741845, 0, 4368, 1073741845, 0, 4384, 1073741845, 0, 4384, 1073741845, 0, 4384, 1073741845, 0, 4384, 1073741845, 0, 4400, 1073741845, 0, 4400, 1073741845, 0, 4400, 1073741845, 0, 4400, 1073741845, 0, 5712, 1426063361, 0, 5712, 1426063361, 0, 5712, 1426063361, 0, 5712, 1426063361, 0, 5712, 1426063361, 0, 5716, 1426063361, 0, 5716, 1426063361, 0, 5716, 1426063361, 0, 5716, 1426063361, 0, 5716, 1426063361, 0, 5720, 1426063361, 0, 5720, 1426063361, 0, 5720, 1426063361, 0, 5720, 1426063361, 0, 5720, 1426063361, 0, 5728, 1426063361, 0, 5728, 1426063361, 0, 5728, 1426063361, 0, 5728, 1426063361, 0, 5728, 1426063361, 0, 5732, 1426063361, 0, 5732, 1426063361, 0, 5732, 1426063361, 0, 5732, 1426063361, 0, 5732, 1426063361, 0, 5736, 1426063361, 0, 5736, 1426063361, 0, 5736, 1426063361, 0, 5736, 1426063361, 0, 5736, 1426063361, 0, 5744, 1426063361, 0, 5744, 1426063361, 0, 5744, 1426063361, 0, 5744, 1426063361, 0, 5744, 1426063361, 0, 5748, 1426063361, 0, 5748, 1426063361, 0, 5748, 1426063361, 0, 5748, 1426063361, 0, 5748, 1426063361, 0, 5752, 1426063361, 0, 5752, 1426063361, 0, 5752, 1426063361, 0, 5752, 1426063361, 0, 5752, 1426063361, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7380, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7384, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 7388, 2863311530, 0, 8336, 2048, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
