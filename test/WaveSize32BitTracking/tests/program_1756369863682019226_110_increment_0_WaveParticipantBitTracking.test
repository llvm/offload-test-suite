#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((20 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((34 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter1 = 0;
          while ((counter1 < 2)) {
            counter1 = (counter1 + 1);
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((50 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin(5));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((59 << 6) | (counter0 << 4)) | (counter1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((counter1 == 1)) {
              break;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((71 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((81 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((90 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((95 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if ((WaveGetLaneIndex() < 20)) {
              result = (result + WaveActiveSum(4));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((102 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 21))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((115 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((124 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (133 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() < 10)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (147 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() == 22)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (143 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 642
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [5200, 17, 0, 5200, 17, 0, 5216, 17, 0, 5216, 17, 0, 5232, 17, 0, 5232, 17, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9152, 4194304, 0, 5200, 17, 0, 5200, 17, 0, 5216, 17, 0, 5216, 17, 0, 5232, 17, 0, 5232, 17, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6096, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6112, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 6128, 1145324612, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7376, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7392, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7408, 1430257665, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7952, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7968, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 7984, 1431655765, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9408, 1023, 0, 9152, 4194304, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
