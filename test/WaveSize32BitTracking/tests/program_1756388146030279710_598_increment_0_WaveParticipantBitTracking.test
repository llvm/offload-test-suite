#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 10)) {
        uint counter0 = 0;
        while ((counter0 < 3)) {
          counter0 = (counter0 + 1);
          if ((WaveGetLaneIndex() >= 29)) {
            if ((WaveGetLaneIndex() >= 20)) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((29 << 6) | (counter0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 23))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((52 << 6) | (counter0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((counter0 == 2)) {
          break;
        }
      }
    } else {
    if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 22))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (66 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
      if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 4))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((97 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() < 6)) {
        if ((WaveGetLaneIndex() >= 28)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((107 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((114 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 22))) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((129 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i1 == 1)) {
        continue;
      }
    }
  }
  break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (137 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (144 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  uint counter2 = 0;
  while ((counter2 < 3)) {
    counter2 = (counter2 + 1);
    if ((WaveGetLaneIndex() < 11)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((158 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() >= 29)) {
      result = (result + WaveActiveMax(9));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((165 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 444
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 17, 0, 576, 17, 0, 6208, 131584, 0, 6208, 131584, 0, 6224, 131584, 0, 6224, 131584, 0, 6240, 131584, 0, 6240, 131584, 0, 7296, 34, 0, 7296, 34, 0, 7312, 34, 0, 7312, 34, 0, 7328, 34, 0, 7328, 34, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10576, 3758096384, 0, 10576, 3758096384, 0, 10576, 3758096384, 0, 10592, 3758096384, 0, 10592, 3758096384, 0, 10592, 3758096384, 0, 10608, 3758096384, 0, 10608, 3758096384, 0, 10608, 3758096384, 0, 576, 17, 0, 576, 17, 0, 6208, 131584, 0, 6208, 131584, 0, 6224, 131584, 0, 6224, 131584, 0, 6240, 131584, 0, 6240, 131584, 0, 7296, 34, 0, 7296, 34, 0, 7312, 34, 0, 7312, 34, 0, 7328, 34, 0, 7328, 34, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 8768, 1145324612, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 9216, 838860, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10128, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10144, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10160, 2047, 0, 10576, 3758096384, 0, 10576, 3758096384, 0, 10576, 3758096384, 0, 10592, 3758096384, 0, 10592, 3758096384, 0, 10592, 3758096384, 0, 10608, 3758096384, 0, 10608, 3758096384, 0, 10608, 3758096384, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
