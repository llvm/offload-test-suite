#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
    if (((WaveGetLaneIndex() & 1) == 1)) {
      result = (result + WaveActiveMax(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((16 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 24))) {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((54 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 18))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((65 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 1)) {
          continue;
        }
      }
      if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 22))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((83 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    uint counter2 = 0;
    while ((counter2 < 3)) {
      counter2 = (counter2 + 1);
      if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 31))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((109 << 6) | (i0 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((120 << 6) | (i0 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 4))) {
        if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 23))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (153 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 29))) {
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 24))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (173 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      } else {
      if ((((WaveGetLaneIndex() == 12) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 12))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (190 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
        if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 26))) {
          result = (result + WaveActiveMin(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((209 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 29))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((220 << 6) | (i3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i3 == 1)) {
          continue;
        }
      }
      if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 8))) {
        result = (result + WaveActiveMax(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (242 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if ((WaveGetLaneIndex() == 19)) {
      if ((WaveGetLaneIndex() == 10)) {
        result = (result + WaveActiveMax(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (252 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 28))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((271 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (275 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 648
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 6980, 2155872768, 0, 6980, 2155872768, 0, 6980, 2155872768, 0, 6984, 2155872768, 0, 6984, 2155872768, 0, 6984, 2155872768, 0, 6988, 2155872768, 0, 6988, 2155872768, 0, 6988, 2155872768, 0, 6996, 2155872768, 0, 6996, 2155872768, 0, 6996, 2155872768, 0, 7000, 2155872768, 0, 7000, 2155872768, 0, 7000, 2155872768, 0, 7004, 2155872768, 0, 7004, 2155872768, 0, 7004, 2155872768, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 11072, 20, 0, 11072, 20, 0, 12160, 16781312, 0, 12160, 16781312, 0, 13376, 1409286209, 0, 13376, 1409286209, 0, 13376, 1409286209, 0, 13376, 1409286209, 0, 13376, 1409286209, 0, 13392, 1409286209, 0, 13392, 1409286209, 0, 13392, 1409286209, 0, 13392, 1409286209, 0, 13392, 1409286209, 0, 13408, 1409286209, 0, 13408, 1409286209, 0, 13408, 1409286209, 0, 13408, 1409286209, 0, 13408, 1409286209, 0, 14080, 1073741825, 0, 14080, 1073741825, 0, 14096, 1073741825, 0, 14096, 1073741825, 0, 14112, 1073741825, 0, 14112, 1073741825, 0, 15488, 256, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1024, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 1040, 2863311530, 0, 6980, 2155872768, 0, 6980, 2155872768, 0, 6980, 2155872768, 0, 6984, 2155872768, 0, 6984, 2155872768, 0, 6984, 2155872768, 0, 6988, 2155872768, 0, 6988, 2155872768, 0, 6988, 2155872768, 0, 6996, 2155872768, 0, 6996, 2155872768, 0, 6996, 2155872768, 0, 7000, 2155872768, 0, 7000, 2155872768, 0, 7000, 2155872768, 0, 7004, 2155872768, 0, 7004, 2155872768, 0, 7004, 2155872768, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7680, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 7696, 1431655765, 0, 11072, 20, 0, 11072, 20, 0, 12160, 16781312, 0, 12160, 16781312, 0, 13376, 1409286209, 0, 13376, 1409286209, 0, 13376, 1409286209, 0, 13376, 1409286209, 0, 13376, 1409286209, 0, 13392, 1409286209, 0, 13392, 1409286209, 0, 13392, 1409286209, 0, 13392, 1409286209, 0, 13392, 1409286209, 0, 13408, 1409286209, 0, 13408, 1409286209, 0, 13408, 1409286209, 0, 13408, 1409286209, 0, 13408, 1409286209, 0, 14080, 1073741825, 0, 14080, 1073741825, 0, 14096, 1073741825, 0, 14096, 1073741825, 0, 14112, 1073741825, 0, 14112, 1073741825, 0, 15488, 256, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
