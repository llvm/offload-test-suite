#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() == 28)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((17 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((31 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((40 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 16))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((59 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 31))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((78 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 18)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((85 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (94 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (98 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 27))) {
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
            if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 23))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((147 << 6) | (i1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((i1 == 1)) {
            break;
          }
        }
        if (((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 19))) {
          result = (result + WaveActiveMin(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (161 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if ((WaveGetLaneIndex() == 8)) {
        if ((WaveGetLaneIndex() == 29)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (171 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
          for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
            if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 27))) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((202 << 6) | (i3 << 4)) | (i4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 23))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((217 << 6) | (i3 << 4)) | (i4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i4 == 1)) {
              continue;
            }
          }
          if ((WaveGetLaneIndex() >= 20)) {
            result = (result + WaveActiveMax(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((227 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i3 == 2)) {
            break;
          }
        }
      } else {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (244 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (254 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (263 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (272 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 31))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (283 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  if ((WaveGetLaneIndex() < 3)) {
    result = (result + WaveActiveSum(1));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (316 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin(2));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (312 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 0))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (308 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 468
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 268435456, 0, 1104, 268435456, 0, 3776, 81920, 0, 3776, 81920, 0, 3792, 81920, 0, 3792, 81920, 0, 4992, 262144, 0, 5008, 262144, 0, 5440, 262144, 0, 5456, 262144, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 18112, 2147491840, 0, 18112, 2147491840, 0, 20224, 7, 0, 20224, 7, 0, 20224, 7, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19712, 131072, 0, 1088, 268435456, 0, 1104, 268435456, 0, 3776, 81920, 0, 3776, 81920, 0, 3792, 81920, 0, 3792, 81920, 0, 4992, 262144, 0, 5008, 262144, 0, 5440, 262144, 0, 5456, 262144, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 6016, 1431655765, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 15616, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 17408, 2863311530, 0, 18112, 2147491840, 0, 18112, 2147491840, 0, 20224, 7, 0, 20224, 7, 0, 20224, 7, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19968, 1431655760, 0, 19712, 131072, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
