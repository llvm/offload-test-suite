#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 16))) {
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 20))) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (36 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() == 11)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((53 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 20)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((60 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (83 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (92 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        uint counter2 = 0;
        while ((counter2 < 2)) {
          counter2 = (counter2 + 1);
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((118 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((129 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter2 == 1)) {
            break;
          }
        }
        if ((((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 9))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((149 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 3: {
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if ((WaveGetLaneIndex() == 13)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((163 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 6)) {
          if ((WaveGetLaneIndex() == 7)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((173 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 2)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((182 << 6) | (counter3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 22)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((189 << 6) | (counter3 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 28))) {
          if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 24))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((218 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i5 = 0; (i5 < 3); i5 = (i5 + 1)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((235 << 6) | (i4 << 4)) | (i5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((244 << 6) | (i4 << 4)) | (i5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() < 8) || (WaveGetLaneIndex() >= 29))) {
            result = (result + WaveActiveMin(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((255 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        uint counter6 = 0;
        while ((counter6 < 3)) {
          counter6 = (counter6 + 1);
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((271 << 6) | (i4 << 4)) | (counter6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((280 << 6) | (i4 << 4)) | (counter6 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((counter6 == 2)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() == 8)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((290 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 0)) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((299 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (308 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    for (uint i7 = 0; (i7 < 2); i7 = (i7 + 1)) {
      if ((WaveGetLaneIndex() == 13)) {
        if ((WaveGetLaneIndex() == 4)) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((326 << 6) | (i7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 20))) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((341 << 6) | (i7 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 23))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((352 << 6) | (i7 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 31))) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((363 << 6) | (i7 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 864
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2304, 65536, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 13952, 1073741825, 0, 13952, 1073741825, 0, 13968, 1073741825, 0, 13968, 1073741825, 0, 13984, 1073741825, 0, 13984, 1073741825, 0, 15040, 1073741825, 0, 15040, 1073741825, 0, 15044, 1073741825, 0, 15044, 1073741825, 0, 15048, 1073741825, 0, 15048, 1073741825, 0, 15056, 1073741825, 0, 15056, 1073741825, 0, 15060, 1073741825, 0, 15060, 1073741825, 0, 15064, 1073741825, 0, 15064, 1073741825, 0, 15072, 1073741825, 0, 15072, 1073741825, 0, 15076, 1073741825, 0, 15076, 1073741825, 0, 15080, 1073741825, 0, 15080, 1073741825, 0, 16320, 1073741825, 0, 16320, 1073741825, 0, 16336, 1073741825, 0, 16336, 1073741825, 0, 16352, 1073741825, 0, 16352, 1073741825, 0, 17348, 17043520, 0, 17348, 17043520, 0, 17348, 17043520, 0, 17348, 17043520, 0, 17352, 17043520, 0, 17352, 17043520, 0, 17352, 17043520, 0, 17352, 17043520, 0, 17364, 17043520, 0, 17364, 17043520, 0, 17364, 17043520, 0, 17364, 17043520, 0, 17368, 17043520, 0, 17368, 17043520, 0, 17368, 17043520, 0, 17368, 17043520, 0, 17380, 17043520, 0, 17380, 17043520, 0, 17380, 17043520, 0, 17380, 17043520, 0, 17384, 17043520, 0, 17384, 17043520, 0, 17384, 17043520, 0, 17384, 17043520, 0, 17924, 136348168, 0, 17924, 136348168, 0, 17924, 136348168, 0, 17924, 136348168, 0, 17924, 136348168, 0, 17928, 136348168, 0, 17928, 136348168, 0, 17928, 136348168, 0, 17928, 136348168, 0, 17928, 136348168, 0, 17940, 136348168, 0, 17940, 136348168, 0, 17940, 136348168, 0, 17940, 136348168, 0, 17940, 136348168, 0, 17944, 136348168, 0, 17944, 136348168, 0, 17944, 136348168, 0, 17944, 136348168, 0, 17944, 136348168, 0, 17956, 136348168, 0, 17956, 136348168, 0, 17956, 136348168, 0, 17956, 136348168, 0, 17956, 136348168, 0, 17960, 136348168, 0, 17960, 136348168, 0, 17960, 136348168, 0, 17960, 136348168, 0, 17960, 136348168, 0, 19136, 17043520, 0, 19136, 17043520, 0, 19136, 17043520, 0, 19136, 17043520, 0, 19136, 1073741825, 0, 19136, 1073741825, 0, 19152, 17043520, 0, 19152, 17043520, 0, 19152, 17043520, 0, 19152, 17043520, 0, 19152, 1073741825, 0, 19152, 1073741825, 0, 19168, 17043520, 0, 19168, 17043520, 0, 19168, 17043520, 0, 19168, 17043520, 0, 19168, 1073741825, 0, 19168, 1073741825, 0, 19712, 272696336, 0, 19712, 272696336, 0, 19712, 272696336, 0, 19712, 272696336, 0, 19712, 272696336, 0, 21824, 1179680, 0, 21824, 1179680, 0, 21824, 1179680, 0, 21840, 1179680, 0, 21840, 1179680, 0, 21840, 1179680, 0, 22528, 8388608, 0, 22544, 8388608, 0, 23232, 36, 0, 23232, 36, 0, 23248, 36, 0, 23248, 36, 0, 2304, 65536, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8260, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8276, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 8292, 1145324612, 0, 13952, 1073741825, 0, 13952, 1073741825, 0, 13968, 1073741825, 0, 13968, 1073741825, 0, 13984, 1073741825, 0, 13984, 1073741825, 0, 15040, 1073741825, 0, 15040, 1073741825, 0, 15044, 1073741825, 0, 15044, 1073741825, 0, 15048, 1073741825, 0, 15048, 1073741825, 0, 15056, 1073741825, 0, 15056, 1073741825, 0, 15060, 1073741825, 0, 15060, 1073741825, 0, 15064, 1073741825, 0, 15064, 1073741825, 0, 15072, 1073741825, 0, 15072, 1073741825, 0, 15076, 1073741825, 0, 15076, 1073741825, 0, 15080, 1073741825, 0, 15080, 1073741825, 0, 16320, 1073741825, 0, 16320, 1073741825, 0, 16336, 1073741825, 0, 16336, 1073741825, 0, 16352, 1073741825, 0, 16352, 1073741825, 0, 17348, 17043520, 0, 17348, 17043520, 0, 17348, 17043520, 0, 17348, 17043520, 0, 17352, 17043520, 0, 17352, 17043520, 0, 17352, 17043520, 0, 17352, 17043520, 0, 17364, 17043520, 0, 17364, 17043520, 0, 17364, 17043520, 0, 17364, 17043520, 0, 17368, 17043520, 0, 17368, 17043520, 0, 17368, 17043520, 0, 17368, 17043520, 0, 17380, 17043520, 0, 17380, 17043520, 0, 17380, 17043520, 0, 17380, 17043520, 0, 17384, 17043520, 0, 17384, 17043520, 0, 17384, 17043520, 0, 17384, 17043520, 0, 17924, 136348168, 0, 17924, 136348168, 0, 17924, 136348168, 0, 17924, 136348168, 0, 17924, 136348168, 0, 17928, 136348168, 0, 17928, 136348168, 0, 17928, 136348168, 0, 17928, 136348168, 0, 17928, 136348168, 0, 17940, 136348168, 0, 17940, 136348168, 0, 17940, 136348168, 0, 17940, 136348168, 0, 17940, 136348168, 0, 17944, 136348168, 0, 17944, 136348168, 0, 17944, 136348168, 0, 17944, 136348168, 0, 17944, 136348168, 0, 17956, 136348168, 0, 17956, 136348168, 0, 17956, 136348168, 0, 17956, 136348168, 0, 17956, 136348168, 0, 17960, 136348168, 0, 17960, 136348168, 0, 17960, 136348168, 0, 17960, 136348168, 0, 17960, 136348168, 0, 19136, 17043520, 0, 19136, 17043520, 0, 19136, 17043520, 0, 19136, 17043520, 0, 19136, 1073741825, 0, 19136, 1073741825, 0, 19152, 17043520, 0, 19152, 17043520, 0, 19152, 17043520, 0, 19152, 17043520, 0, 19152, 1073741825, 0, 19152, 1073741825, 0, 19168, 17043520, 0, 19168, 17043520, 0, 19168, 17043520, 0, 19168, 17043520, 0, 19168, 1073741825, 0, 19168, 1073741825, 0, 19712, 272696336, 0, 19712, 272696336, 0, 19712, 272696336, 0, 19712, 272696336, 0, 19712, 272696336, 0, 21824, 1179680, 0, 21824, 1179680, 0, 21824, 1179680, 0, 21840, 1179680, 0, 21840, 1179680, 0, 21840, 1179680, 0, 22528, 8388608, 0, 22544, 8388608, 0, 23232, 36, 0, 23232, 36, 0, 23248, 36, 0, 23248, 36, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
