#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 27))) {
    for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((35 << 6) | (i0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 10)) {
          if ((WaveGetLaneIndex() == 9)) {
            result = (result + WaveActiveMax(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((45 << 6) | (i0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((54 << 6) | (i0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i0 == 1)) {
        continue;
      }
    }
    if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 23))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (72 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  } else {
  if (((WaveGetLaneIndex() & 1) == 0)) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (81 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  if ((WaveGetLaneIndex() == 25)) {
    if ((WaveGetLaneIndex() == 9)) {
      result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (93 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
      if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 14))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((124 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 2)) {
        counter3 = (counter3 + 1);
        if ((WaveGetLaneIndex() == 21)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((138 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 17)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((147 << 6) | (i2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter3 == 1)) {
          break;
        }
      }
      if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 23))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((173 << 6) | (i2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i2 == 1)) {
        continue;
      }
      if ((i2 == 1)) {
        break;
      }
    }
    if ((WaveGetLaneIndex() == 7)) {
      result = (result + WaveActiveMin(WaveGetLaneIndex()));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (186 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (197 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (207 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 31))) {
        if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 25))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (241 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 29))) {
          if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 29))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (259 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
            if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 14))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((286 << 6) | (i4 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((i4 == 2)) {
              break;
            }
          }
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (300 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (305 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  default: {
      result = (result + WaveActiveSum(99));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (309 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 306
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3456, 134348808, 0, 3456, 134348808, 0, 3456, 134348808, 0, 3472, 134348808, 0, 3472, 134348808, 0, 3472, 134348808, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 13248, 73, 0, 13248, 73, 0, 13248, 73, 0, 16576, 2147483712, 0, 16576, 2147483712, 0, 19200, 2147483648, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 3456, 134348808, 0, 3456, 134348808, 0, 3456, 134348808, 0, 3472, 134348808, 0, 3472, 134348808, 0, 3472, 134348808, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 5184, 1431655765, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 12608, 2728962722, 0, 13248, 73, 0, 13248, 73, 0, 13248, 73, 0, 16576, 2147483712, 0, 16576, 2147483712, 0, 19200, 2147483648, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0, 19520, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
