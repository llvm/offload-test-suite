#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 21))) {
    if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 28))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 29))) {
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 29))) {
        result = (result + WaveActiveSum(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (35 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 31))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((54 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i0 == 1)) {
          continue;
        }
      }
    }
  } else {
  uint counter1 = 0;
  while ((counter1 < 3)) {
    counter1 = (counter1 + 1);
    if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 21))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((75 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 22)) {
      if ((WaveGetLaneIndex() == 7)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((85 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 21))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((104 << 6) | (counter1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 25))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((115 << 6) | (counter1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i2 == 1)) {
          continue;
        }
      }
      if ((WaveGetLaneIndex() == 11)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((125 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((WaveGetLaneIndex() == 28)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((132 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter3 = 0;
    while ((counter3 < 2)) {
      counter3 = (counter3 + 1);
      if ((WaveGetLaneIndex() < 3)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((148 << 6) | (counter1 << 4)) | (counter3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if ((counter1 == 2)) {
    break;
  }
  }
  if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 29))) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (170 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 366
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2240, 16, 0, 3456, 16, 0, 3472, 16, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 6672, 4194304, 0, 6676, 4194304, 0, 6688, 4194304, 0, 6692, 4194304, 0, 8464, 268435456, 0, 8480, 268435456, 0, 9492, 7, 0, 9492, 7, 0, 9492, 7, 0, 9496, 7, 0, 9496, 7, 0, 9496, 7, 0, 9508, 7, 0, 9508, 7, 0, 9508, 7, 0, 9512, 7, 0, 9512, 7, 0, 9512, 7, 0, 10880, 604111360, 0, 10880, 604111360, 0, 10880, 604111360, 0, 10880, 604111360, 0, 2240, 16, 0, 3456, 16, 0, 3472, 16, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4816, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 4832, 4290773487, 0, 6672, 4194304, 0, 6676, 4194304, 0, 6688, 4194304, 0, 6692, 4194304, 0, 8464, 268435456, 0, 8480, 268435456, 0, 9492, 7, 0, 9492, 7, 0, 9492, 7, 0, 9496, 7, 0, 9496, 7, 0, 9496, 7, 0, 9508, 7, 0, 9508, 7, 0, 9508, 7, 0, 9512, 7, 0, 9512, 7, 0, 9512, 7, 0, 10880, 604111360, 0, 10880, 604111360, 0, 10880, 604111360, 0, 10880, 604111360, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
