#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() == 17)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((16 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 0)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((23 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (32 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (37 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (44 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (64 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 10)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (71 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (80 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (85 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (94 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 2: {
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 29))) {
        result = (result + WaveActiveMin(6));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((112 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 25))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((123 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (130 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (134 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 588
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1488, 1, 0, 1504, 1, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 5120, 268501008, 0, 5120, 268501008, 0, 5120, 268501008, 0, 5440, 1048832, 0, 5440, 1048832, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 1488, 1, 0, 1504, 1, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2368, 1717986918, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 2816, 978670, 0, 5120, 268501008, 0, 5120, 268501008, 0, 5120, 268501008, 0, 5440, 1048832, 0, 5440, 1048832, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7184, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7200, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7216, 1610612838, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7888, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7904, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 7920, 1711276646, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0, 8320, 978670, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
