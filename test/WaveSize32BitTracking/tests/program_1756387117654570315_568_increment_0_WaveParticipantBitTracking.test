#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((17 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 11)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((24 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
        if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 2))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((57 << 6) | (i1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i2 = 0; (i2 < 2); i2 = (i2 + 1)) {
          if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 26))) {
            if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 26))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((103 << 6) | (i1 << 4)) | (i2 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((118 << 6) | (i1 << 4)) | (i2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((127 << 6) | (i1 << 4)) | (i2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i2 == 1)) {
          continue;
        }
      }
      if (((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 12))) {
        result = (result + WaveActiveSum(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((149 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((i1 == 1)) {
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 576
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 85, 0, 1088, 85, 0, 1088, 85, 0, 1088, 85, 0, 1104, 85, 0, 1104, 85, 0, 1104, 85, 0, 1104, 85, 0, 1536, 1365, 0, 1536, 1365, 0, 1536, 1365, 0, 1536, 1365, 0, 1536, 1365, 0, 1536, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 3648, 524288, 0, 3664, 524288, 0, 6592, 524288, 0, 6596, 524288, 0, 6608, 524288, 0, 6612, 524288, 0, 7552, 134217728, 0, 7556, 134217728, 0, 7568, 134217728, 0, 7572, 134217728, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 9536, 512, 0, 9552, 512, 0, 1088, 85, 0, 1088, 85, 0, 1088, 85, 0, 1088, 85, 0, 1104, 85, 0, 1104, 85, 0, 1104, 85, 0, 1104, 85, 0, 1536, 1365, 0, 1536, 1365, 0, 1536, 1365, 0, 1536, 1365, 0, 1536, 1365, 0, 1536, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 1552, 1365, 0, 3648, 524288, 0, 3664, 524288, 0, 6592, 524288, 0, 6596, 524288, 0, 6608, 524288, 0, 6612, 524288, 0, 7552, 134217728, 0, 7556, 134217728, 0, 7568, 134217728, 0, 7572, 134217728, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8128, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8132, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8144, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 8148, 2863311530, 0, 9536, 512, 0, 9552, 512, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
