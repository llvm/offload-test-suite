#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (9 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 26))) {
          if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 27))) {
            result = (result + WaveActiveMin(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (32 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (41 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() >= 22)) {
        result = (result + WaveActiveMin(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (48 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (58 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (67 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (72 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (76 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if ((WaveGetLaneIndex() >= 27)) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (85 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 2: {
    uint counter0 = 0;
    while ((counter0 < 2)) {
      counter0 = (counter0 + 1);
      if ((WaveGetLaneIndex() == 27)) {
        result = (result + WaveActiveMin(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((99 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((118 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((127 << 6) | (counter0 << 4)) | (i1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((i1 == 1)) {
          continue;
        }
      }
      if ((WaveGetLaneIndex() == 27)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((137 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if (((WaveGetLaneIndex() < 9) || (WaveGetLaneIndex() >= 24))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((160 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter3 = 0;
        while ((counter3 < 2)) {
          counter3 = (counter3 + 1);
          if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 20))) {
            result = (result + WaveActiveMin(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((186 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 31))) {
          result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((199 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (208 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      for (uint i4 = 0; (i4 < 2); i4 = (i4 + 1)) {
        if ((WaveGetLaneIndex() >= 27)) {
          if ((WaveGetLaneIndex() >= 23)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((226 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 31))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((245 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((254 << 6) | (i4 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 714
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [576, 73, 0, 576, 73, 0, 576, 73, 0, 2048, 2147483650, 0, 2048, 2147483650, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 3072, 272629760, 0, 3072, 272629760, 0, 4288, 272696336, 0, 4288, 272696336, 0, 4288, 272696336, 0, 4288, 272696336, 0, 4288, 272696336, 0, 5440, 268435456, 0, 7568, 545392672, 0, 7568, 545392672, 0, 7568, 545392672, 0, 7568, 545392672, 0, 7568, 545392672, 0, 7572, 545392672, 0, 7572, 545392672, 0, 7572, 545392672, 0, 7572, 545392672, 0, 7572, 545392672, 0, 7576, 545392672, 0, 7576, 545392672, 0, 7576, 545392672, 0, 7576, 545392672, 0, 7576, 545392672, 0, 7584, 545392672, 0, 7584, 545392672, 0, 7584, 545392672, 0, 7584, 545392672, 0, 7584, 545392672, 0, 7588, 545392672, 0, 7588, 545392672, 0, 7588, 545392672, 0, 7588, 545392672, 0, 7588, 545392672, 0, 7592, 545392672, 0, 7592, 545392672, 0, 7592, 545392672, 0, 7592, 545392672, 0, 7592, 545392672, 0, 8144, 545392672, 0, 8144, 545392672, 0, 8144, 545392672, 0, 8144, 545392672, 0, 8144, 545392672, 0, 8148, 545392672, 0, 8148, 545392672, 0, 8148, 545392672, 0, 8148, 545392672, 0, 8148, 545392672, 0, 8152, 545392672, 0, 8152, 545392672, 0, 8152, 545392672, 0, 8152, 545392672, 0, 8152, 545392672, 0, 8160, 545392672, 0, 8160, 545392672, 0, 8160, 545392672, 0, 8160, 545392672, 0, 8160, 545392672, 0, 8164, 545392672, 0, 8164, 545392672, 0, 8164, 545392672, 0, 8164, 545392672, 0, 8164, 545392672, 0, 8168, 545392672, 0, 8168, 545392672, 0, 8168, 545392672, 0, 8168, 545392672, 0, 8168, 545392672, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 12752, 1, 0, 12768, 1, 0, 12784, 1, 0, 13312, 272696336, 0, 13312, 272696336, 0, 13312, 272696336, 0, 13312, 272696336, 0, 13312, 272696336, 0, 14464, 536870912, 0, 14480, 536870912, 0, 15680, 2048, 0, 15696, 2048, 0, 16256, 545392672, 0, 16256, 545392672, 0, 16256, 545392672, 0, 16256, 545392672, 0, 16256, 545392672, 0, 16272, 545392672, 0, 16272, 545392672, 0, 16272, 545392672, 0, 16272, 545392672, 0, 16272, 545392672, 0, 576, 73, 0, 576, 73, 0, 576, 73, 0, 2048, 2147483650, 0, 2048, 2147483650, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 2624, 2181570690, 0, 3072, 272629760, 0, 3072, 272629760, 0, 4288, 272696336, 0, 4288, 272696336, 0, 4288, 272696336, 0, 4288, 272696336, 0, 4288, 272696336, 0, 5440, 268435456, 0, 7568, 545392672, 0, 7568, 545392672, 0, 7568, 545392672, 0, 7568, 545392672, 0, 7568, 545392672, 0, 7572, 545392672, 0, 7572, 545392672, 0, 7572, 545392672, 0, 7572, 545392672, 0, 7572, 545392672, 0, 7576, 545392672, 0, 7576, 545392672, 0, 7576, 545392672, 0, 7576, 545392672, 0, 7576, 545392672, 0, 7584, 545392672, 0, 7584, 545392672, 0, 7584, 545392672, 0, 7584, 545392672, 0, 7584, 545392672, 0, 7588, 545392672, 0, 7588, 545392672, 0, 7588, 545392672, 0, 7588, 545392672, 0, 7588, 545392672, 0, 7592, 545392672, 0, 7592, 545392672, 0, 7592, 545392672, 0, 7592, 545392672, 0, 7592, 545392672, 0, 8144, 545392672, 0, 8144, 545392672, 0, 8144, 545392672, 0, 8144, 545392672, 0, 8144, 545392672, 0, 8148, 545392672, 0, 8148, 545392672, 0, 8148, 545392672, 0, 8148, 545392672, 0, 8148, 545392672, 0, 8152, 545392672, 0, 8152, 545392672, 0, 8152, 545392672, 0, 8152, 545392672, 0, 8152, 545392672, 0, 8160, 545392672, 0, 8160, 545392672, 0, 8160, 545392672, 0, 8160, 545392672, 0, 8160, 545392672, 0, 8164, 545392672, 0, 8164, 545392672, 0, 8164, 545392672, 0, 8164, 545392672, 0, 8164, 545392672, 0, 8168, 545392672, 0, 8168, 545392672, 0, 8168, 545392672, 0, 8168, 545392672, 0, 8168, 545392672, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10256, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10272, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 10288, 1224736841, 0, 12752, 1, 0, 12768, 1, 0, 12784, 1, 0, 13312, 272696336, 0, 13312, 272696336, 0, 13312, 272696336, 0, 13312, 272696336, 0, 13312, 272696336, 0, 14464, 536870912, 0, 14480, 536870912, 0, 15680, 2048, 0, 15696, 2048, 0, 16256, 545392672, 0, 16256, 545392672, 0, 16256, 545392672, 0, 16256, 545392672, 0, 16256, 545392672, 0, 16272, 545392672, 0, 16272, 545392672, 0, 16272, 545392672, 0, 16272, 545392672, 0, 16272, 545392672, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
