#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((WaveGetLaneIndex() == 7)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (32 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (26 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if ((WaveGetLaneIndex() < 9)) {
    result = (result + WaveActiveMax(3));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (20 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  if ((WaveGetLaneIndex() >= 31)) {
    result = (result + WaveActiveSum((WaveGetLaneIndex() + 1)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (67 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 22))) {
    result = (result + WaveActiveMin((WaveGetLaneIndex() + 2)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (61 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  } else {
  if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 31))) {
    result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (55 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() < 7)) {
          if ((WaveGetLaneIndex() >= 16)) {
            result = (result + WaveActiveMin(5));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((88 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          switch ((WaveGetLaneIndex() % 2)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((98 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if (((WaveGetLaneIndex() % 2) == 0)) {
                result = (result + WaveActiveSum(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((107 << 6) | (i0 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          default: {
              result = (result + WaveActiveSum(99));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((111 << 6) | (i0 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
              break;
            }
          }
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (120 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (125 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 252
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [2048, 128, 0, 1664, 1049601, 0, 1664, 1049601, 0, 1664, 1049601, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 4288, 2147483648, 0, 3904, 4195328, 0, 3904, 4195328, 0, 3520, 7, 0, 3520, 7, 0, 3520, 7, 0, 6272, 65, 0, 6272, 65, 0, 6288, 65, 0, 6288, 65, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 2048, 128, 0, 1664, 1049601, 0, 1664, 1049601, 0, 1664, 1049601, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 1280, 382, 0, 4288, 2147483648, 0, 3904, 4195328, 0, 3904, 4195328, 0, 3520, 7, 0, 3520, 7, 0, 3520, 7, 0, 6272, 65, 0, 6272, 65, 0, 6288, 65, 0, 6288, 65, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 7680, 1363481681, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0, 8000, 613566756, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
