#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 25))) {
    if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 29))) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (17 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter0 = 0;
    while ((counter0 < 3)) {
      counter0 = (counter0 + 1);
      if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 5))) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((43 << 6) | (counter0 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter1 = 0;
      while ((counter1 < 2)) {
        counter1 = (counter1 + 1);
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((59 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  uint counter2 = 0;
  while ((counter2 < 3)) {
    counter2 = (counter2 + 1);
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMax(8));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((75 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 10)) {
      if ((WaveGetLaneIndex() == 6)) {
        result = (result + WaveActiveMax(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((85 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 31))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((103 << 6) | (counter2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 21))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((114 << 6) | (counter2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter3 == 2)) {
          break;
        }
      }
    } else {
    if ((WaveGetLaneIndex() == 26)) {
      result = (result + WaveActiveMax(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((124 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() < 8)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((134 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((143 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((148 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    default: {
        result = (result + WaveActiveSum(99));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((152 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
        break;
      }
    }
    if ((WaveGetLaneIndex() == 29)) {
      result = (result + WaveActiveSum(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((159 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  if (((WaveGetLaneIndex() & 1) == 1)) {
    result = (result + WaveActiveSum(WaveGetLaneIndex()));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = ((168 << 6) | (counter2 << 4));
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (178 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if ((WaveGetLaneIndex() == 7)) {
          result = (result + WaveActiveSum(1));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((193 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 25))) {
          if (((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21)) || (WaveGetLaneIndex() == 27))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((227 << 6) | (i4 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter5 = 0;
          while ((counter5 < 2)) {
            counter5 = (counter5 + 1);
            if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 28))) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((251 << 6) | (i4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((270 << 6) | (i4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        if ((WaveGetLaneIndex() == 19)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((277 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 30))) {
        if (((WaveGetLaneIndex() < 10) || (WaveGetLaneIndex() >= 29))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (295 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 3)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (305 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 2))) {
              if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 9))) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (333 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (342 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (351 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      case 2: {
          uint counter6 = 0;
          while ((counter6 < 3)) {
            counter6 = (counter6 + 1);
            if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 22))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((373 << 6) | (counter6 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      default: {
          result = (result + WaveActiveSum(99));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (377 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
          break;
        }
      }
      if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 25))) {
        result = (result + WaveActiveMin(WaveGetLaneIndex()));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (388 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if ((WaveGetLaneIndex() == 11)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (395 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i7 = 0; (i7 < 2); i7 = (i7 + 1)) {
      if ((WaveGetLaneIndex() < 6)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((412 << 6) | (i7 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 23)) {
        if ((WaveGetLaneIndex() == 2)) {
          result = (result + WaveActiveMax(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((422 << 6) | (i7 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((WaveGetLaneIndex() == 28)) {
        result = (result + WaveActiveMax(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((429 << 6) | (i7 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 22)) {
        result = (result + WaveActiveMin(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((436 << 6) | (i7 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if ((i7 == 1)) {
      break;
    }
  }
  if ((WaveGetLaneIndex() == 2)) {
    result = (result + WaveActiveMin(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (446 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  break;
  }
  case 3: {
    uint counter8 = 0;
    while ((counter8 < 2)) {
      counter8 = (counter8 + 1);
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 26))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((464 << 6) | (counter8 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter8 == 1)) {
        break;
      }
    }
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 1374
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 7952, 67108864, 0, 7968, 67108864, 0, 7984, 67108864, 0, 8592, 73, 0, 8592, 73, 0, 8592, 73, 0, 8608, 73, 0, 8608, 73, 0, 8608, 73, 0, 8624, 73, 0, 8624, 73, 0, 8624, 73, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 10192, 536870912, 0, 10208, 536870912, 0, 10224, 536870912, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 11392, 17, 0, 11392, 17, 0, 14528, 2, 0, 14544, 2, 0, 14560, 2, 0, 18880, 1073741824, 0, 24832, 1073741824, 0, 26368, 4, 0, 26384, 4, 0, 27904, 4194304, 0, 27920, 4194304, 0, 28544, 4, 0, 29712, 2281701376, 0, 29712, 2281701376, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 1088, 3758096415, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3796, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3800, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3812, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3816, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3828, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 3832, 2852126730, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4816, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4832, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 4848, 1431655765, 0, 7952, 67108864, 0, 7968, 67108864, 0, 7984, 67108864, 0, 8592, 73, 0, 8592, 73, 0, 8592, 73, 0, 8608, 73, 0, 8608, 73, 0, 8608, 73, 0, 8624, 73, 0, 8624, 73, 0, 8624, 73, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9168, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9184, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9200, 1363480657, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9488, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9504, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 9520, 613566756, 0, 10192, 536870912, 0, 10208, 536870912, 0, 10224, 536870912, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10768, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10784, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 10800, 2863311530, 0, 11392, 17, 0, 11392, 17, 0, 14528, 2, 0, 14544, 2, 0, 14560, 2, 0, 18880, 1073741824, 0, 24832, 1073741824, 0, 26368, 4, 0, 26384, 4, 0, 27904, 4194304, 0, 27920, 4194304, 0, 28544, 4, 0, 29712, 2281701376, 0, 29712, 2281701376, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
