#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() == 1)) {
            if ((WaveGetLaneIndex() == 14)) {
              result = (result + WaveActiveMax(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (15 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 5)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (22 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          } else {
          if ((WaveGetLaneIndex() == 1)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (31 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
          if ((WaveGetLaneIndex() == 23)) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((46 << 6) | (i0 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (51 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (60 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  case 2: {
    uint counter1 = 0;
    while ((counter1 < 3)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 28))) {
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 25))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((85 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 26))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((96 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (103 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (107 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 16))) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((140 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 29))) {
          if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 24))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((158 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 25))) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((171 << 6) | (counter2 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 17))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((194 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (203 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (208 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (218 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (232 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMin((WaveGetLaneIndex() + 5)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (248 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          for (uint i3 = 0; (i3 < 3); i3 = (i3 + 1)) {
            if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 8))) {
              result = (result + WaveActiveSum(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((271 << 6) | (i3 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            result = (result + WaveActiveMax(9));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (280 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  case 2: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          switch ((WaveGetLaneIndex() % 3)) {
          case 0: {
              if ((WaveGetLaneIndex() < 8)) {
                result = (result + WaveActiveSum(1));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (293 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          case 1: {
              if ((WaveGetLaneIndex() == 26)) {
                if ((WaveGetLaneIndex() == 14)) {
                  result = (result + WaveActiveMin(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (303 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
                if ((WaveGetLaneIndex() == 28)) {
                  result = (result + WaveActiveMax(result));
                  uint temp = 0;
                  InterlockedAdd(_wave_op_index[0], 3, temp);
                  _participant_bit[temp] = (310 << 6);
                  uint4 ballot = WaveActiveBallot(1);
                  _participant_bit[(temp + 1)] = ballot.x;
                  _participant_bit[(temp + 2)] = ballot.y;
                }
              }
              break;
            }
          case 2: {
              if (true) {
                result = (result + WaveActiveSum(3));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (315 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              break;
            }
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (324 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (329 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 3: {
      for (uint i4 = 0; (i4 < 3); i4 = (i4 + 1)) {
        if ((((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 21))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((352 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        uint counter5 = 0;
        while ((counter5 < 3)) {
          counter5 = (counter5 + 1);
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 22))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((370 << 6) | (i4 << 4)) | (counter5 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 0)) {
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((386 << 6) | (i4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((WaveGetLaneIndex() & 1) == 1)) {
              result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((397 << 6) | (i4 << 4)) | (counter5 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((counter5 == 2)) {
            break;
          }
        }
        if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 5))) {
          result = (result + WaveActiveMax(4));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((419 << 6) | (i4 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 552
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [3264, 1048832, 0, 3264, 1048832, 0, 5456, 1073741824, 0, 5472, 1073741824, 0, 5488, 1073741824, 0, 6160, 1073741824, 0, 6176, 1073741824, 0, 6192, 1073741824, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 8976, 16777217, 0, 8976, 16777217, 0, 8992, 16777217, 0, 8992, 16777217, 0, 9008, 16777217, 0, 9008, 16777217, 0, 10128, 1073741825, 0, 10128, 1073741825, 0, 10144, 1073741825, 0, 10144, 1073741825, 0, 10160, 1073741825, 0, 10160, 1073741825, 0, 10960, 1073741833, 0, 10960, 1073741833, 0, 10960, 1073741833, 0, 10976, 1073741833, 0, 10976, 1073741833, 0, 10976, 1073741833, 0, 10992, 1073741833, 0, 10992, 1073741833, 0, 10992, 1073741833, 0, 12432, 520, 0, 12432, 520, 0, 12448, 520, 0, 12448, 520, 0, 12464, 520, 0, 12464, 520, 0, 12992, 272696336, 0, 12992, 272696336, 0, 12992, 272696336, 0, 12992, 272696336, 0, 12992, 272696336, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13952, 17, 0, 13952, 17, 0, 18752, 64, 0, 20736, 4195328, 0, 20736, 4195328, 0, 21056, 67125252, 0, 21056, 67125252, 0, 21056, 67125252, 0, 22528, 134217728, 0, 22544, 134217728, 0, 22560, 134217728, 0, 23684, 2290089984, 0, 23684, 2290089984, 0, 23684, 2290089984, 0, 23688, 2290089984, 0, 23688, 2290089984, 0, 23688, 2290089984, 0, 23700, 2290089984, 0, 23700, 2290089984, 0, 23700, 2290089984, 0, 23704, 2290089984, 0, 23704, 2290089984, 0, 23704, 2290089984, 0, 23716, 2290089984, 0, 23716, 2290089984, 0, 23716, 2290089984, 0, 23720, 2290089984, 0, 23720, 2290089984, 0, 23720, 2290089984, 0, 26816, 524288, 0, 26832, 524288, 0, 26848, 524288, 0, 3264, 1048832, 0, 3264, 1048832, 0, 5456, 1073741824, 0, 5472, 1073741824, 0, 5488, 1073741824, 0, 6160, 1073741824, 0, 6176, 1073741824, 0, 6192, 1073741824, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 6592, 838860, 0, 8976, 16777217, 0, 8976, 16777217, 0, 8992, 16777217, 0, 8992, 16777217, 0, 9008, 16777217, 0, 9008, 16777217, 0, 10128, 1073741825, 0, 10128, 1073741825, 0, 10144, 1073741825, 0, 10144, 1073741825, 0, 10160, 1073741825, 0, 10160, 1073741825, 0, 10960, 1073741833, 0, 10960, 1073741833, 0, 10960, 1073741833, 0, 10976, 1073741833, 0, 10976, 1073741833, 0, 10976, 1073741833, 0, 10992, 1073741833, 0, 10992, 1073741833, 0, 10992, 1073741833, 0, 12432, 520, 0, 12432, 520, 0, 12448, 520, 0, 12448, 520, 0, 12464, 520, 0, 12464, 520, 0, 12992, 272696336, 0, 12992, 272696336, 0, 12992, 272696336, 0, 12992, 272696336, 0, 12992, 272696336, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13312, 613566756, 0, 13952, 17, 0, 13952, 17, 0, 18752, 64, 0, 20736, 4195328, 0, 20736, 4195328, 0, 21056, 67125252, 0, 21056, 67125252, 0, 21056, 67125252, 0, 22528, 134217728, 0, 22544, 134217728, 0, 22560, 134217728, 0, 23684, 2290089984, 0, 23684, 2290089984, 0, 23684, 2290089984, 0, 23688, 2290089984, 0, 23688, 2290089984, 0, 23688, 2290089984, 0, 23700, 2290089984, 0, 23700, 2290089984, 0, 23700, 2290089984, 0, 23704, 2290089984, 0, 23704, 2290089984, 0, 23704, 2290089984, 0, 23716, 2290089984, 0, 23716, 2290089984, 0, 23716, 2290089984, 0, 23720, 2290089984, 0, 23720, 2290089984, 0, 23720, 2290089984, 0, 26816, 524288, 0, 26832, 524288, 0, 26848, 524288, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
