#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if (((WaveGetLaneIndex() < 3) || (WaveGetLaneIndex() >= 23))) {
        if (((WaveGetLaneIndex() < 6) || (WaveGetLaneIndex() >= 27))) {
          result = (result + WaveActiveMax(6));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (20 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 21))) {
        result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (37 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((WaveGetLaneIndex() >= 16)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((51 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if ((WaveGetLaneIndex() >= 20)) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((66 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() >= 22)) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((75 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i1 == 2)) {
            break;
          }
        }
        if ((WaveGetLaneIndex() < 4)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((85 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((counter0 == 1)) {
          break;
        }
      }
    }
  }
  case 1: {
    uint counter2 = 0;
    while ((counter2 < 2)) {
      counter2 = (counter2 + 1);
      if ((WaveGetLaneIndex() < 10)) {
        result = (result + WaveActiveMax(9));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((102 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter3 = 0;
      while ((counter3 < 3)) {
        counter3 = (counter3 + 1);
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 29))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((128 << 6) | (counter2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() == 9)) {
          if ((WaveGetLaneIndex() == 28)) {
            result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((140 << 6) | (counter2 << 4)) | (counter3 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 22))) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((155 << 6) | (counter2 << 4)) | (counter3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 20))) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((170 << 6) | (counter2 << 4)) | (counter3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((counter3 == 2)) {
        break;
      }
    }
  }
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (178 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  case 3: {
    if ((WaveGetLaneIndex() < 20)) {
      result = (result + WaveActiveSum(4));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (185 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (189 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 450
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1280, 268435457, 0, 1280, 268435457, 0, 3280, 1114112, 0, 3280, 1114112, 0, 4240, 1048576, 0, 4244, 1048576, 0, 4248, 1048576, 0, 6544, 819, 0, 6544, 819, 0, 6544, 819, 0, 6544, 819, 0, 6544, 819, 0, 6544, 819, 0, 6560, 819, 0, 6560, 819, 0, 6560, 819, 0, 6560, 819, 0, 6560, 819, 0, 6560, 819, 0, 8212, 536875008, 0, 8212, 536875008, 0, 8216, 536875008, 0, 8216, 536875008, 0, 8228, 536875008, 0, 8228, 536875008, 0, 8232, 536875008, 0, 8232, 536875008, 0, 10900, 1048576, 0, 10904, 1048576, 0, 10916, 1048576, 0, 10920, 1048576, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 1280, 268435457, 0, 1280, 268435457, 0, 3280, 1114112, 0, 3280, 1114112, 0, 4240, 1048576, 0, 4244, 1048576, 0, 4248, 1048576, 0, 6544, 819, 0, 6544, 819, 0, 6544, 819, 0, 6544, 819, 0, 6544, 819, 0, 6544, 819, 0, 6560, 819, 0, 6560, 819, 0, 6560, 819, 0, 6560, 819, 0, 6560, 819, 0, 6560, 819, 0, 8212, 536875008, 0, 8212, 536875008, 0, 8216, 536875008, 0, 8216, 536875008, 0, 8228, 536875008, 0, 8228, 536875008, 0, 8232, 536875008, 0, 8232, 536875008, 0, 10900, 1048576, 0, 10904, 1048576, 0, 10916, 1048576, 0, 10920, 1048576, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11392, 2004318071, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0, 11840, 1048575, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
