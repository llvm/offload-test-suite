#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  if ((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 23))) {
    if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 10))) {
      result = (result + WaveActiveMax((WaveGetLaneIndex() + 3)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (35 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    switch ((WaveGetLaneIndex() % 2)) {
    case 0: {
        if ((WaveGetLaneIndex() == 28)) {
          if ((WaveGetLaneIndex() == 28)) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (48 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if ((WaveGetLaneIndex() == 29)) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (55 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (69 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveMin(8));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (78 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  }
  if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 21))) {
    result = (result + WaveActiveMin(7));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (101 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (111 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (120 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (125 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (132 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 234
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [7104, 17, 0, 7104, 17, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8448, 559240, 0, 8448, 559240, 0, 8448, 559240, 0, 8448, 559240, 0, 8448, 559240, 0, 7104, 17, 0, 7104, 17, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 7680, 286331153, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8000, 2004318071, 0, 8448, 559240, 0, 8448, 559240, 0, 8448, 559240, 0, 8448, 559240, 0, 8448, 559240, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
