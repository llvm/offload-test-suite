#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          if ((WaveGetLaneIndex() < 8)) {
            result = (result + WaveActiveSum(1));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (12 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 1: {
          if (((WaveGetLaneIndex() % 2) == 0)) {
            result = (result + WaveActiveSum(2));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (21 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      case 2: {
          if (true) {
            result = (result + WaveActiveSum(3));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (26 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          break;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (35 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 2: {
      if (true) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (40 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (47 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 2)) {
        counter0 = (counter0 + 1);
        if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((72 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() < 1) || (WaveGetLaneIndex() >= 30))) {
            result = (result + WaveActiveSum(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((91 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 13)) || (WaveGetLaneIndex() == 27))) {
          result = (result + WaveActiveMin(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((106 << 6) | (counter0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 1: {
      if (((WaveGetLaneIndex() % 2) == 0)) {
        result = (result + WaveActiveSum(2));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (115 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
  uint counter2 = 0;
  while ((counter2 < 3)) {
    counter2 = (counter2 + 1);
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin((WaveGetLaneIndex() + 3)));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((133 << 6) | (counter2 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
      if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 5))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((158 << 6) | (counter2 << 4)) | (i3 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 0)) {
        uint counter4 = 0;
        while ((counter4 < 3)) {
          counter4 = (counter4 + 1);
          if ((((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 31)) || (WaveGetLaneIndex() == 17))) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((((191 << 6) | (counter2 << 4)) | (i3 << 2)) | counter4);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 17)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((200 << 6) | (counter2 << 4)) | (i3 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 594
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [768, 1, 0, 1344, 268501008, 0, 1344, 268501008, 0, 1344, 268501008, 0, 1664, 1048832, 0, 1664, 1048832, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 3008, 559240, 0, 3008, 559240, 0, 3008, 559240, 0, 3008, 559240, 0, 3008, 559240, 0, 4624, 268435520, 0, 4624, 268435520, 0, 4640, 268435520, 0, 4640, 268435520, 0, 5840, 1073741825, 0, 5840, 1073741825, 0, 5844, 1073741825, 0, 5844, 1073741825, 0, 5856, 1073741825, 0, 5856, 1073741825, 0, 5860, 1073741825, 0, 5860, 1073741825, 0, 6800, 4, 0, 6816, 4, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 10128, 8388644, 0, 10128, 8388644, 0, 10128, 8388644, 0, 10132, 8388644, 0, 10132, 8388644, 0, 10132, 8388644, 0, 10144, 8388644, 0, 10144, 8388644, 0, 10144, 8388644, 0, 10148, 8388644, 0, 10148, 8388644, 0, 10148, 8388644, 0, 10160, 8388644, 0, 10160, 8388644, 0, 10160, 8388644, 0, 10164, 8388644, 0, 10164, 8388644, 0, 10164, 8388644, 0, 768, 1, 0, 1344, 268501008, 0, 1344, 268501008, 0, 1344, 268501008, 0, 1664, 1048832, 0, 1664, 1048832, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 2560, 1145324612, 0, 3008, 559240, 0, 3008, 559240, 0, 3008, 559240, 0, 3008, 559240, 0, 3008, 559240, 0, 4624, 268435520, 0, 4624, 268435520, 0, 4640, 268435520, 0, 4640, 268435520, 0, 5840, 1073741825, 0, 5840, 1073741825, 0, 5844, 1073741825, 0, 5844, 1073741825, 0, 5856, 1073741825, 0, 5856, 1073741825, 0, 5860, 1073741825, 0, 5860, 1073741825, 0, 6800, 4, 0, 6816, 4, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8528, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8544, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 8560, 1431655765, 0, 10128, 8388644, 0, 10128, 8388644, 0, 10128, 8388644, 0, 10132, 8388644, 0, 10132, 8388644, 0, 10132, 8388644, 0, 10144, 8388644, 0, 10144, 8388644, 0, 10144, 8388644, 0, 10148, 8388644, 0, 10148, 8388644, 0, 10148, 8388644, 0, 10160, 8388644, 0, 10160, 8388644, 0, 10160, 8388644, 0, 10164, 8388644, 0, 10164, 8388644, 0, 10164, 8388644, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
