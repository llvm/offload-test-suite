#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  uint counter0 = 0;
  while ((counter0 < 2)) {
    counter0 = (counter0 + 1);
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((15 << 6) | (counter0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter1 = 0;
    while ((counter1 < 2)) {
      counter1 = (counter1 + 1);
      if (((WaveGetLaneIndex() == 10) || (WaveGetLaneIndex() == 22))) {
        result = (result + WaveActiveSum(7));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((33 << 6) | (counter0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((WaveGetLaneIndex() == 22)) {
        if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 20))) {
          if ((((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 23))) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((70 << 6) | (counter0 << 4)) | (counter1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 13)) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((77 << 6) | (counter0 << 4)) | (counter1 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 23))) {
        result = (result + WaveActiveMax((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((90 << 6) | (counter0 << 4)) | (counter1 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  switch ((WaveGetLaneIndex() % 2)) {
  case 0: {
      switch ((WaveGetLaneIndex() % 3)) {
      case 0: {
          for (uint i2 = 0; (i2 < 3); i2 = (i2 + 1)) {
            if ((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 15))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((119 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() == 14)) {
              if ((WaveGetLaneIndex() == 17)) {
                result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((131 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
              if ((WaveGetLaneIndex() == 28)) {
                result = (result + WaveActiveMin(result));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = ((138 << 6) | (i2 << 4));
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 24)) || (WaveGetLaneIndex() == 25))) {
              result = (result + WaveActiveMax(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((161 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((((WaveGetLaneIndex() == 9) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 18))) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((176 << 6) | (i2 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (185 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (((((WaveGetLaneIndex() == 3) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 1))) {
          if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28)) || (WaveGetLaneIndex() == 8))) {
            result = (result + WaveActiveMin(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (223 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 24))) {
          if (((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 16))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (241 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
      }
      break;
    }
  }
  break;
  }
  case 1: {
    if (((WaveGetLaneIndex() % 2) == 0)) {
      result = (result + WaveActiveSum(2));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (250 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (254 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 390
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 2132, 4195328, 0, 2132, 4195328, 0, 2136, 4195328, 0, 2136, 4195328, 0, 2148, 4195328, 0, 2148, 4195328, 0, 2152, 4195328, 0, 2152, 4195328, 0, 5780, 8388672, 0, 5780, 8388672, 0, 5784, 8388672, 0, 5784, 8388672, 0, 5796, 8388672, 0, 5796, 8388672, 0, 5800, 8388672, 0, 5800, 8388672, 0, 10304, 17039361, 0, 10304, 17039361, 0, 10304, 17039361, 0, 10320, 17039361, 0, 10320, 17039361, 0, 10320, 17039361, 0, 10336, 17039361, 0, 10336, 17039361, 0, 10336, 17039361, 0, 11264, 262144, 0, 11280, 262144, 0, 11296, 262144, 0, 11840, 272696336, 0, 11840, 272696336, 0, 11840, 272696336, 0, 11840, 272696336, 0, 11840, 272696336, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 976, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 992, 1431655765, 0, 2132, 4195328, 0, 2132, 4195328, 0, 2136, 4195328, 0, 2136, 4195328, 0, 2148, 4195328, 0, 2148, 4195328, 0, 2152, 4195328, 0, 2152, 4195328, 0, 5780, 8388672, 0, 5780, 8388672, 0, 5784, 8388672, 0, 5784, 8388672, 0, 5796, 8388672, 0, 5796, 8388672, 0, 5800, 8388672, 0, 5800, 8388672, 0, 10304, 17039361, 0, 10304, 17039361, 0, 10304, 17039361, 0, 10320, 17039361, 0, 10320, 17039361, 0, 10320, 17039361, 0, 10336, 17039361, 0, 10336, 17039361, 0, 10336, 17039361, 0, 11264, 262144, 0, 11280, 262144, 0, 11296, 262144, 0, 11840, 272696336, 0, 11840, 272696336, 0, 11840, 272696336, 0, 11840, 272696336, 0, 11840, 272696336, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
