#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  for (uint i0 = 0; (i0 < 3); i0 = (i0 + 1)) {
    if ((WaveGetLaneIndex() == 6)) {
      result = (result + WaveActiveMax(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((14 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if ((WaveGetLaneIndex() == 12)) {
      result = (result + WaveActiveMin(7));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((21 << 6) | (i0 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
  uint counter1 = 0;
  while ((counter1 < 3)) {
    counter1 = (counter1 + 1);
    if (((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 9)) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 27))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((47 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 14))) {
      if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 20)) || (WaveGetLaneIndex() == 16))) {
        result = (result + WaveActiveMin(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((77 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      if ((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28))) {
        if ((((((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 7))) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((111 << 6) | (counter1 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 2)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((121 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = ((130 << 6) | (counter1 << 4));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        }
      }
      if ((((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 29)) || (WaveGetLaneIndex() == 25))) {
        result = (result + WaveActiveMax(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((153 << 6) | (counter1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    if (((WaveGetLaneIndex() == 2) || (WaveGetLaneIndex() == 29))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = ((164 << 6) | (counter1 << 4));
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 162
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [896, 64, 0, 912, 64, 0, 928, 64, 0, 1344, 4096, 0, 1360, 4096, 0, 1376, 4096, 0, 3024, 135266820, 0, 3024, 135266820, 0, 3024, 135266820, 0, 3024, 135266820, 0, 3040, 135266820, 0, 3040, 135266820, 0, 3040, 135266820, 0, 3040, 135266820, 0, 3056, 135266820, 0, 3056, 135266820, 0, 3056, 135266820, 0, 3056, 135266820, 0, 4944, 65536, 0, 4960, 65536, 0, 4976, 65536, 0, 10512, 536870916, 0, 10512, 536870916, 0, 10528, 536870916, 0, 10528, 536870916, 0, 10544, 536870916, 0, 10544, 536870916, 0, 896, 64, 0, 912, 64, 0, 928, 64, 0, 1344, 4096, 0, 1360, 4096, 0, 1376, 4096, 0, 3024, 135266820, 0, 3024, 135266820, 0, 3024, 135266820, 0, 3024, 135266820, 0, 3040, 135266820, 0, 3040, 135266820, 0, 3040, 135266820, 0, 3040, 135266820, 0, 3056, 135266820, 0, 3056, 135266820, 0, 3056, 135266820, 0, 3056, 135266820, 0, 4944, 65536, 0, 4960, 65536, 0, 4976, 65536, 0, 10512, 536870916, 0, 10512, 536870916, 0, 10528, 536870916, 0, 10528, 536870916, 0, 10544, 536870916, 0, 10544, 536870916, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
