#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      if (((WaveGetLaneIndex() & 1) == 1)) {
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (16 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() < 8)) {
          if ((WaveGetLaneIndex() < 16)) {
            result = (result + WaveActiveMin(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (26 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if (((WaveGetLaneIndex() & 1) == 1)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (35 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      } else {
      if ((((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 27)) || (WaveGetLaneIndex() == 7))) {
        result = (result + WaveActiveSum(5));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (58 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      for (uint i0 = 0; (i0 < 2); i0 = (i0 + 1)) {
        if ((WaveGetLaneIndex() >= 24)) {
          result = (result + WaveActiveMax(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((73 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if ((WaveGetLaneIndex() >= 25)) {
          result = (result + WaveActiveMax(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((80 << 6) | (i0 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 25)) || (WaveGetLaneIndex() == 23))) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 4)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (97 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
    break;
  }
  case 1: {
    switch ((WaveGetLaneIndex() % 3)) {
    case 0: {
        if ((WaveGetLaneIndex() >= 24)) {
          if ((WaveGetLaneIndex() >= 20)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (110 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() < 3)) {
            result = (result + WaveActiveMin(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (117 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        break;
      }
    case 1: {
        if (((WaveGetLaneIndex() % 2) == 0)) {
          result = (result + WaveActiveSum(2));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (126 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    case 2: {
        if (true) {
          result = (result + WaveActiveSum(3));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (131 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        break;
      }
    }
    break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (136 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  default: {
    result = (result + WaveActiveSum(99));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (140 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
    break;
  }
  }
  if ((((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 8)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 30)) || (WaveGetLaneIndex() == 3))) {
    if ((((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 14)) || (WaveGetLaneIndex() == 22)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 28))) {
      result = (result + WaveActiveMin(result));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (182 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    for (uint i1 = 0; (i1 < 2); i1 = (i1 + 1)) {
      if (((WaveGetLaneIndex() < 4) || (WaveGetLaneIndex() >= 28))) {
        result = (result + WaveActiveSum(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((201 << 6) | (i1 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      uint counter2 = 0;
      while ((counter2 < 3)) {
        counter2 = (counter2 + 1);
        if ((WaveGetLaneIndex() == 27)) {
          if ((WaveGetLaneIndex() == 23)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((218 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((WaveGetLaneIndex() == 19)) {
            result = (result + WaveActiveMin(4));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((225 << 6) | (i1 << 4)) | (counter2 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        } else {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (((234 << 6) | (i1 << 4)) | (counter2 << 2));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if ((WaveGetLaneIndex() == 22)) {
        result = (result + WaveActiveMax(result));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (((241 << 6) | (i1 << 4)) | (counter2 << 2));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  if (((((WaveGetLaneIndex() == 5) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 26)) || (WaveGetLaneIndex() == 19))) {
    result = (result + WaveActiveSum(result));
    uint temp = 0;
    InterlockedAdd(_wave_op_index[0], 3, temp);
    _participant_bit[temp] = (260 << 6);
    uint4 ballot = WaveActiveBallot(1);
    _participant_bit[(temp + 1)] = ballot.x;
    _participant_bit[(temp + 2)] = ballot.y;
  }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 390
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1024, 136348168, 0, 1024, 136348168, 0, 1024, 136348168, 0, 1024, 136348168, 0, 1024, 136348168, 0, 1664, 8, 0, 2240, 136348168, 0, 2240, 136348168, 0, 2240, 136348168, 0, 2240, 136348168, 0, 2240, 136348168, 0, 3712, 1, 0, 4672, 1090519040, 0, 4672, 1090519040, 0, 4688, 1090519040, 0, 4688, 1090519040, 0, 5120, 1073741824, 0, 5136, 1073741824, 0, 6208, 1, 0, 8064, 272696336, 0, 8064, 272696336, 0, 8064, 272696336, 0, 8064, 272696336, 0, 8064, 272696336, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 11648, 4194304, 0, 12864, 1073741834, 0, 12864, 1073741834, 0, 12864, 1073741834, 0, 12880, 1073741834, 0, 12880, 1073741834, 0, 12880, 1073741834, 0, 14980, 1077936384, 0, 14980, 1077936384, 0, 14980, 1077936384, 0, 14984, 1077936384, 0, 14984, 1077936384, 0, 14984, 1077936384, 0, 14988, 1077936384, 0, 14988, 1077936384, 0, 14988, 1077936384, 0, 14996, 1077936384, 0, 14996, 1077936384, 0, 14996, 1077936384, 0, 15000, 1077936384, 0, 15000, 1077936384, 0, 15000, 1077936384, 0, 15004, 1077936384, 0, 15004, 1077936384, 0, 15004, 1077936384, 0, 15428, 4194304, 0, 15432, 4194304, 0, 15436, 4194304, 0, 15444, 4194304, 0, 15448, 4194304, 0, 15452, 4194304, 0, 1024, 136348168, 0, 1024, 136348168, 0, 1024, 136348168, 0, 1024, 136348168, 0, 1024, 136348168, 0, 1664, 8, 0, 2240, 136348168, 0, 2240, 136348168, 0, 2240, 136348168, 0, 2240, 136348168, 0, 2240, 136348168, 0, 3712, 1, 0, 4672, 1090519040, 0, 4672, 1090519040, 0, 4688, 1090519040, 0, 4688, 1090519040, 0, 5120, 1073741824, 0, 5136, 1073741824, 0, 6208, 1, 0, 8064, 272696336, 0, 8064, 272696336, 0, 8064, 272696336, 0, 8064, 272696336, 0, 8064, 272696336, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 8704, 613566756, 0, 11648, 4194304, 0, 12864, 1073741834, 0, 12864, 1073741834, 0, 12864, 1073741834, 0, 12880, 1073741834, 0, 12880, 1073741834, 0, 12880, 1073741834, 0, 14980, 1077936384, 0, 14980, 1077936384, 0, 14980, 1077936384, 0, 14984, 1077936384, 0, 14984, 1077936384, 0, 14984, 1077936384, 0, 14988, 1077936384, 0, 14988, 1077936384, 0, 14988, 1077936384, 0, 14996, 1077936384, 0, 14996, 1077936384, 0, 14996, 1077936384, 0, 15000, 1077936384, 0, 15000, 1077936384, 0, 15000, 1077936384, 0, 15004, 1077936384, 0, 15004, 1077936384, 0, 15004, 1077936384, 0, 15428, 4194304, 0, 15432, 4194304, 0, 15436, 4194304, 0, 15444, 4194304, 0, 15448, 4194304, 0, 15452, 4194304, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
