#--- source.hlsl
RWStructuredBuffer<uint> _participant_bit : register(u0);
RWStructuredBuffer<uint> _wave_op_index : register(u1);

[numthreads(64, 1, 1)]
void main(uint3 tid : SV_DispatchThreadID) {
  uint result = 0;
  switch ((WaveGetLaneIndex() % 3)) {
  case 0: {
      uint counter0 = 0;
      while ((counter0 < 3)) {
        counter0 = (counter0 + 1);
        for (uint i1 = 0; (i1 < 3); i1 = (i1 + 1)) {
          if (((WaveGetLaneIndex() & 1) == 1)) {
            result = (result + WaveActiveMax(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (((26 << 6) | (counter0 << 4)) | (i1 << 2));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 29))) {
            if (((((WaveGetLaneIndex() == 0) || (WaveGetLaneIndex() == 10)) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 31))) {
              result = (result + WaveActiveSum((WaveGetLaneIndex() + 3)));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((54 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if (((((WaveGetLaneIndex() == 7) || (WaveGetLaneIndex() == 11)) || (WaveGetLaneIndex() == 16)) || (WaveGetLaneIndex() == 31))) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((73 << 6) | (counter0 << 4)) | (i1 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((i1 == 2)) {
            break;
          }
        }
      }
    }
  case 1: {
      if (((WaveGetLaneIndex() & 1) == 0)) {
        if (((WaveGetLaneIndex() & 1) == 0)) {
          result = (result + WaveActiveSum(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (90 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        switch ((WaveGetLaneIndex() % 4)) {
        case 0: {
            if ((WaveGetLaneIndex() < 8)) {
              result = (result + WaveActiveSum(1));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (100 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 1: {
            if (((WaveGetLaneIndex() % 2) == 0)) {
              result = (result + WaveActiveSum(2));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (109 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 2: {
            if (true) {
              result = (result + WaveActiveSum(3));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (114 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            break;
          }
        case 3: {
            if (((WaveGetLaneIndex() < 7) || (WaveGetLaneIndex() >= 21))) {
              if (((WaveGetLaneIndex() < 5) || (WaveGetLaneIndex() >= 31))) {
                result = (result + WaveActiveMin(2));
                uint temp = 0;
                InterlockedAdd(_wave_op_index[0], 3, temp);
                _participant_bit[temp] = (132 << 6);
                uint4 ballot = WaveActiveBallot(1);
                _participant_bit[(temp + 1)] = ballot.x;
                _participant_bit[(temp + 2)] = ballot.y;
              }
            } else {
            if ((WaveGetLaneIndex() < 2)) {
              result = (result + WaveActiveMin(WaveGetLaneIndex()));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (139 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
            if ((WaveGetLaneIndex() < 12)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (146 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          break;
        }
      }
      if (((WaveGetLaneIndex() & 1) == 1)) {
        result = (result + WaveActiveMin((WaveGetLaneIndex() + 1)));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (157 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    } else {
    if (((WaveGetLaneIndex() & 1) == 0)) {
      result = (result + WaveActiveMin(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (166 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    uint counter2 = 0;
    while ((counter2 < 3)) {
      counter2 = (counter2 + 1);
      if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 22))) {
        if (((WaveGetLaneIndex() == 11) || (WaveGetLaneIndex() == 30))) {
          result = (result + WaveActiveSum(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((195 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 15)) || (WaveGetLaneIndex() == 23)) || (WaveGetLaneIndex() == 28))) {
          result = (result + WaveActiveSum(WaveGetLaneIndex()));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = ((214 << 6) | (counter2 << 4));
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      if (((WaveGetLaneIndex() < 2) || (WaveGetLaneIndex() >= 23))) {
        result = (result + WaveActiveSum(3));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = ((225 << 6) | (counter2 << 4));
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
    }
  }
  break;
  }
  case 2: {
    if (true) {
      result = (result + WaveActiveSum(3));
      uint temp = 0;
      InterlockedAdd(_wave_op_index[0], 3, temp);
      _participant_bit[temp] = (230 << 6);
      uint4 ballot = WaveActiveBallot(1);
      _participant_bit[(temp + 1)] = ballot.x;
      _participant_bit[(temp + 2)] = ballot.y;
    }
    break;
  }
  }
  switch ((WaveGetLaneIndex() % 4)) {
  case 0: {
      if ((WaveGetLaneIndex() < 8)) {
        result = (result + WaveActiveSum(1));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (240 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  case 1: {
      if ((((WaveGetLaneIndex() == 1) || (WaveGetLaneIndex() == 12)) || (WaveGetLaneIndex() == 22))) {
        if (((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 22))) {
          result = (result + WaveActiveMin(5));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (262 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        for (uint i3 = 0; (i3 < 2); i3 = (i3 + 1)) {
          if (((WaveGetLaneIndex() == 13) || (WaveGetLaneIndex() == 25))) {
            result = (result + WaveActiveSum(6));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((281 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          uint counter4 = 0;
          while ((counter4 < 3)) {
            counter4 = (counter4 + 1);
            if ((WaveGetLaneIndex() == 8)) {
              result = (result + WaveActiveSum(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (((295 << 6) | (i3 << 4)) | (counter4 << 2));
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if ((((WaveGetLaneIndex() == 6) || (WaveGetLaneIndex() == 18)) || (WaveGetLaneIndex() == 25))) {
            result = (result + WaveActiveSum(result));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = ((310 << 6) | (i3 << 4));
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if ((i3 == 1)) {
            continue;
          }
        }
        if ((((WaveGetLaneIndex() == 8) || (WaveGetLaneIndex() == 17)) || (WaveGetLaneIndex() == 29))) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 2)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (330 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
      break;
    }
  case 2: {
      if ((WaveGetLaneIndex() == 2)) {
        if ((WaveGetLaneIndex() == 24)) {
          result = (result + WaveActiveMin(result));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (340 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
        if (((WaveGetLaneIndex() == 14) || (WaveGetLaneIndex() == 30))) {
          if ((((WaveGetLaneIndex() == 4) || (WaveGetLaneIndex() == 19)) || (WaveGetLaneIndex() == 22))) {
            result = (result + WaveActiveMax(WaveGetLaneIndex()));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (362 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
          if (((WaveGetLaneIndex() & 1) == 1)) {
            if (((WaveGetLaneIndex() & 1) == 0)) {
              result = (result + WaveActiveMin(result));
              uint temp = 0;
              InterlockedAdd(_wave_op_index[0], 3, temp);
              _participant_bit[temp] = (376 << 6);
              uint4 ballot = WaveActiveBallot(1);
              _participant_bit[(temp + 1)] = ballot.x;
              _participant_bit[(temp + 2)] = ballot.y;
            }
          }
          if (((WaveGetLaneIndex() == 15) || (WaveGetLaneIndex() == 26))) {
            result = (result + WaveActiveMax((WaveGetLaneIndex() + 1)));
            uint temp = 0;
            InterlockedAdd(_wave_op_index[0], 3, temp);
            _participant_bit[temp] = (389 << 6);
            uint4 ballot = WaveActiveBallot(1);
            _participant_bit[(temp + 1)] = ballot.x;
            _participant_bit[(temp + 2)] = ballot.y;
          }
        }
        if ((WaveGetLaneIndex() == 0)) {
          result = (result + WaveActiveSum((WaveGetLaneIndex() + 4)));
          uint temp = 0;
          InterlockedAdd(_wave_op_index[0], 3, temp);
          _participant_bit[temp] = (398 << 6);
          uint4 ballot = WaveActiveBallot(1);
          _participant_bit[(temp + 1)] = ballot.x;
          _participant_bit[(temp + 2)] = ballot.y;
        }
      }
    }
  case 3: {
      if ((WaveGetLaneIndex() < 20)) {
        result = (result + WaveActiveSum(4));
        uint temp = 0;
        InterlockedAdd(_wave_op_index[0], 3, temp);
        _participant_bit[temp] = (405 << 6);
        uint4 ballot = WaveActiveBallot(1);
        _participant_bit[(temp + 1)] = ballot.x;
        _participant_bit[(temp + 2)] = ballot.y;
      }
      break;
    }
  }
}

#--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]  # Single dispatch for 64 threads
Buffers:
  - Name: _participant_bit
    Format: UInt32
    Stride: 4
    Fill: 0
    Size: 600
  - Name: expected_bit_patterns
    Format: UInt32
    Stride: 4
    Data: [1680, 136348168, 0, 1680, 136348168, 0, 1680, 136348168, 0, 1680, 136348168, 0, 1680, 136348168, 0, 1684, 136348168, 0, 1684, 136348168, 0, 1684, 136348168, 0, 1684, 136348168, 0, 1684, 136348168, 0, 1688, 136348168, 0, 1688, 136348168, 0, 1688, 136348168, 0, 1688, 136348168, 0, 1688, 136348168, 0, 1696, 136348168, 0, 1696, 136348168, 0, 1696, 136348168, 0, 1696, 136348168, 0, 1696, 136348168, 0, 1700, 136348168, 0, 1700, 136348168, 0, 1700, 136348168, 0, 1700, 136348168, 0, 1700, 136348168, 0, 1704, 136348168, 0, 1704, 136348168, 0, 1704, 136348168, 0, 1704, 136348168, 0, 1704, 136348168, 0, 1712, 136348168, 0, 1712, 136348168, 0, 1712, 136348168, 0, 1712, 136348168, 0, 1712, 136348168, 0, 1716, 136348168, 0, 1716, 136348168, 0, 1716, 136348168, 0, 1716, 136348168, 0, 1716, 136348168, 0, 1720, 136348168, 0, 1720, 136348168, 0, 1720, 136348168, 0, 1720, 136348168, 0, 1720, 136348168, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 6400, 17, 0, 6400, 17, 0, 7296, 1078199360, 0, 7296, 1078199360, 0, 7296, 1078199360, 0, 7296, 1078199360, 0, 7296, 1078199360, 0, 13712, 32768, 0, 13728, 32768, 0, 13744, 32768, 0, 14416, 2315255810, 0, 14416, 2315255810, 0, 14416, 2315255810, 0, 14416, 2315255810, 0, 14432, 2315255810, 0, 14432, 2315255810, 0, 14432, 2315255810, 0, 14432, 2315255810, 0, 14448, 2315255810, 0, 14448, 2315255810, 0, 14448, 2315255810, 0, 14448, 2315255810, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 15360, 17, 0, 15360, 17, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 1680, 136348168, 0, 1680, 136348168, 0, 1680, 136348168, 0, 1680, 136348168, 0, 1680, 136348168, 0, 1684, 136348168, 0, 1684, 136348168, 0, 1684, 136348168, 0, 1684, 136348168, 0, 1684, 136348168, 0, 1688, 136348168, 0, 1688, 136348168, 0, 1688, 136348168, 0, 1688, 136348168, 0, 1688, 136348168, 0, 1696, 136348168, 0, 1696, 136348168, 0, 1696, 136348168, 0, 1696, 136348168, 0, 1696, 136348168, 0, 1700, 136348168, 0, 1700, 136348168, 0, 1700, 136348168, 0, 1700, 136348168, 0, 1700, 136348168, 0, 1704, 136348168, 0, 1704, 136348168, 0, 1704, 136348168, 0, 1704, 136348168, 0, 1704, 136348168, 0, 1712, 136348168, 0, 1712, 136348168, 0, 1712, 136348168, 0, 1712, 136348168, 0, 1712, 136348168, 0, 1716, 136348168, 0, 1716, 136348168, 0, 1716, 136348168, 0, 1716, 136348168, 0, 1716, 136348168, 0, 1720, 136348168, 0, 1720, 136348168, 0, 1720, 136348168, 0, 1720, 136348168, 0, 1720, 136348168, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 5760, 1363481681, 0, 6400, 17, 0, 6400, 17, 0, 7296, 1078199360, 0, 7296, 1078199360, 0, 7296, 1078199360, 0, 7296, 1078199360, 0, 7296, 1078199360, 0, 13712, 32768, 0, 13728, 32768, 0, 13744, 32768, 0, 14416, 2315255810, 0, 14416, 2315255810, 0, 14416, 2315255810, 0, 14416, 2315255810, 0, 14432, 2315255810, 0, 14432, 2315255810, 0, 14432, 2315255810, 0, 14432, 2315255810, 0, 14448, 2315255810, 0, 14448, 2315255810, 0, 14448, 2315255810, 0, 14448, 2315255810, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 14720, 613566756, 0, 15360, 17, 0, 15360, 17, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0, 25920, 838860, 0]
  - Name: _wave_op_index
    Format: UInt32
    Stride: 4
    Data: [0]
Results:
  - Result: BitTrackingValidation
    Rule: BufferParticipantPattern
    GroupSize: 3
    Actual: _participant_bit
    Expected: expected_bit_patterns
DescriptorSets:
  - Resources:
    - Name: _participant_bit
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: _wave_op_index
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
