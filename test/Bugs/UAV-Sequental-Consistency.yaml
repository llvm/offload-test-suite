#--- source.hlsl

StructuredBuffer<uint32_t> X : register(t0);
RWStructuredBuffer<uint32_t> Result : register(u1);

[numthreads(1,1,1)]
void main() {
  Result[0] = X[0] + 1;
  Result[1] = X[1] + Result[0];

  Result[2] = X[0] + 2;
  Result[3] = X[1] + Result[2];
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: X
    Format: Int32
    Stride: 4
    Data: [ 0, 1 ]
  - Name: Result
    Format: Int32
    Stride: 4
    ZeroInitSize: 16
  - Name: ExpectedResult
    Format: Int32
    Stride: 4
    Data: [ 1, 2, 2, 3 ]
Results:
  - Result: CheckResult
    Rule: BufferExact
    Actual: Result
    Expected: ExpectedResult
DescriptorSets:
  - Resources:
    - Name: X
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Result
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# When compiled with DXC this test encounters a memory coherence issue on Intel
# UHD drivers. This issue does not reproduce when compiled with Clang because
# LLVM's load-store optimization performs correct optimizations that hide the
# problem.
# Tracking issue: https://github.com/llvm/offload-test-suite/issues/226
# XFAIL: Intel-Memory-Coherence-Issue-226 && !Clang

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
