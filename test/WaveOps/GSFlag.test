#--- source.hlsl

groupshared int Flag;

struct OutputStruct {
    int ActiveLanes;
};

RWStructuredBuffer<OutputStruct> Output;

[numthreads(4,1,1)]
void main(uint GI : SV_GroupIndex) {
    if (WaveIsFirstLane())
      Flag = 0;
    OutputStruct Val = {0};
    GroupMemoryBarrierWithGroupSync();
    if (Flag == 0) {
        Val.ActiveLanes = WaveActiveSum(1);
        Flag = 1;
    }
    Output[GI] = Val;
}

//--- pipeline.yaml
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: Output
    Format: Int32
    Stride: 4
    ZeroInitSize: 16
DescriptorSets:
  - Resources:
    - Name: Output
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
...

#--- end
# UNSUPPORTED: Clang
# RUN: split-file %s %t
# RUN: %if !Vulkan %{ %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl %}
# RUN: %if Vulkan %{ %dxc_target -T cs_6_0 -fspv-target-env=vulkan1.1 -Fo %t.o %t/source.hlsl %}
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: Name: Output
# CHECK: Data: [ 4, 4, 4, 4 ]
