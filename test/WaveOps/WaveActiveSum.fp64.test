#--- source.hlsl
StructuredBuffer<double4> In  : register(t0);
RWStructuredBuffer<double4> Out1 : register(u1); // test scalar
RWStructuredBuffer<double4> Out2 : register(u2); // test double2
RWStructuredBuffer<double4> Out3 : register(u3); // test double3
RWStructuredBuffer<double4> Out4 : register(u4); // test double4
RWStructuredBuffer<double4> Out5 : register(u5); // constant folding

[numthreads(4,1,1)]
void main(uint3 tid : SV_GroupThreadID)
{
    double4 v = In[0];

    // Mask per "active lane set": only <=N lanes contribute
    double s1 = tid.x <= 0 ? WaveActiveSum( v.x ) : 0;
    double s2 = tid.x <= 1 ? WaveActiveSum( v.x ) : 0;
    double s3 = tid.x <= 2 ? WaveActiveSum( v.x ) : 0;
    double s4 = tid.x <= 3 ? WaveActiveSum( v.x ) : 0;

    double2 v2_1 = tid.x <= 0 ? WaveActiveSum( v.xy ) : double2(0,0);
    double2 v2_2 = tid.x <= 1 ? WaveActiveSum( v.xy ) : double2(0,0);
    double2 v2_3 = tid.x <= 2 ? WaveActiveSum( v.xy ) : double2(0,0);
    double2 v2_4 = tid.x <= 3 ? WaveActiveSum( v.xy ) : double2(0,0);

    double3 v3_1 = tid.x <= 0 ? WaveActiveSum( v.xyz ) : double3(0,0,0);
    double3 v3_2 = tid.x <= 1 ? WaveActiveSum( v.xyz ) : double3(0,0,0);
    double3 v3_3 = tid.x <= 2 ? WaveActiveSum( v.xyz ) : double3(0,0,0);
    double3 v3_4 = tid.x <= 3 ? WaveActiveSum( v.xyz ) : double3(0,0,0);

    double4 v4_1 = tid.x <= 0 ? WaveActiveSum( v ) : double4(0,0,0,0);
    double4 v4_2 = tid.x <= 1 ? WaveActiveSum( v ) : double4(0,0,0,0);
    double4 v4_3 = tid.x <= 2 ? WaveActiveSum( v ) : double4(0,0,0,0);
    double4 v4_4 = tid.x <= 3 ? WaveActiveSum( v ) : double4(0,0,0,0);

    double scalars[4] = { s1, s2, s3, s4 };
    double2 vec2s [4] = { v2_1, v2_2, v2_3, v2_4 };
    double3 vec3s [4] = { v3_1, v3_2, v3_3, v3_4 };
    double4 vec4s [4] = { v4_1, v4_2, v4_3, v4_4 };


    Out1[tid.x].x   = scalars[tid.x];
    Out2[tid.x].xy  = vec2s[tid.x];
    Out3[tid.x].xyz = vec3s[tid.x];
    Out4[tid.x]     = vec4s[tid.x];

    // constant folding case
    Out5[0] = WaveActiveSum(double4(1,2,3,4));
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Float64
    Stride: 8
    Data: [ 1.0, 10.0, 100.0, 1000.0]
  - Name: Out1
    Format: Float64
    Stride: 32
    FillSize: 128  
  - Name: Out2
    Format: Float64
    Stride: 32
    FillSize: 128
  - Name: Out3
    Format: Float64
    Stride: 32
    FillSize: 128
  - Name: Out4
    Format: Float64
    Stride: 32
    FillSize: 128
  - Name: Out5
    Format: Float64
    Stride: 32
    FillSize: 32
  - Name: ExpectedOut1
    Format: Float64
    Stride: 32
    Data: [ 1.0, 0.0, 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 3.0, 0.0, 0.0, 0.0, 4.0, 0.0, 0.0, 0.0 ]
  - Name: ExpectedOut2
    Format: Float64
    Stride: 32
    Data: [ 1.0, 10.0, 0.0, 0.0, 2.0, 20.0, 0.0, 0.0, 3.0, 30.0, 0.0, 0.0, 4.0, 40.0, 0.0, 0.0 ]
  - Name: ExpectedOut3
    Format: Float64
    Stride: 32
    Data: [ 1.0, 10.0, 100.0, 0.0, 2.0, 20.0, 200.0, 0.0, 3.0, 30.0, 300.0, 0.0, 4.0, 40.0, 400.0, 0.0 ]
  - Name: ExpectedOut4
    Format: Float64
    Stride: 32
    Data: [ 1.0, 10.0, 100.0, 1000.0, 2.0, 20.0, 200.0, 2000.0, 3.0, 30.0, 300.0, 3000.0, 4.0, 40.0, 400.0, 4000.0 ]
  - Name: ExpectedOut5
    Format: Float64
    Stride: 8
    Data: [ 4.0, 8.0, 12.0, 16.0 ]
Results:
  - Result: ExpectedOut1
    Rule: BufferExact
    Actual: Out1
    Expected: ExpectedOut1
  - Result: ExpectedOut2
    Rule: BufferExact
    Actual: Out2
    Expected: ExpectedOut2
  - Result: ExpectedOut3
    Rule: BufferExact
    Actual: Out3
    Expected: ExpectedOut3
  - Result: ExpectedOut4
    Rule: BufferExact
    Actual: Out4
    Expected: ExpectedOut4
  - Result: ExpectedOut5
    Rule: BufferExact
    Actual: Out5
    Expected: ExpectedOut5
DescriptorSets:
  - Resources:
    - Name: In
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out1
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Out2
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
    - Name: Out3
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 3
        Space: 0
      VulkanBinding:
        Binding: 3
    - Name: Out4
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 4
        Space: 0
      VulkanBinding:
        Binding: 4
    - Name: Out5
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 5
        Space: 0
      VulkanBinding:
        Binding: 5

...
#--- end

# Bug https://github.com/llvm/llvm-project/issues/156775
# XFAIL: Clang

# REQUIRES: Double

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o 
