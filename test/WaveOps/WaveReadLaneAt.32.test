#--- source.hlsl

StructuredBuffer<int4> InInt : register(t0);
RWStructuredBuffer<int4> OutInt : register(u1);

[numthreads(4,1,1)]
void main(uint3 TID : SV_GroupThreadID) {
  // Int
  uint OutIdx = TID.x * 3;
  OutInt[OutIdx] = WaveReadLaneAt(InInt[TID.x], TID.x);
  uint4 ThreadInInt = {InInt[TID.x].xyz, InInt[TID.x].w};
  OutInt[OutIdx + 1] =  WaveReadLaneAt(ThreadInInt, TID.x);;
  OutInt[OutIdx + 2].xy = WaveReadLaneAt(InInt[TID.x].xy, TID.x);
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [4, 1, 1]
Buffers:
  - Name: InInt
    Format: Int32
    Stride: 16
    Data: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 ]
  - Name: OutInt
    Format: Int32
    Stride: 16
    ZeroInitSize: 144
  - Name: ExpectedOutInt # The result we expect
    Format: Int32
    Stride: 16
    Data: [ 0, 1, 2, 3, 0, 1, 2, 3, 0, 1, 0, 0, 4, 5, 6, 7, 4, 5, 6, 7, 4, 5, 0, 0, 8, 9, 10, 11, 8, 9, 10, 11, 8, 9, 0, 0 ]
Results:
  - Result: TestInt
    Rule: BufferExact
    Actual: OutInt
    Expected: ExpectedOutInt
DescriptorSets:
  - Resources:
    - Name: InInt
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: OutInt
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
