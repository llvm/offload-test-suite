#--- source.hlsl

// This test checks that we will get the expected values from invoking
// `GetDimension`s on various structured buffer types. We are checking
// that `stride` denotes the total number of bytes of a single struct,
// and `numStructs` denote how many of the structs are in the buffer.

struct R {
    int4 a;
};

struct S {
    int2 a;
};

StructuredBuffer<R> A : register(t0);
RWStructuredBuffer<S> B : register(u0);
AppendStructuredBuffer<R> C : register(u1);
ConsumeStructuredBuffer<S> D : register(u2);

RWBuffer<uint> Out : register(u0, space1);

[numthreads(4,1,1)]
void main() {
  uint numStructs, stride;
  int i = 0;

  A.GetDimensions(numStructs, stride);
  Out[i++] = numStructs;
  Out[i++] = stride;

  B.GetDimensions(numStructs, stride);
  Out[i++] = numStructs;
  Out[i++] = stride;

  C.GetDimensions(numStructs, stride);
  Out[i++] = numStructs;
  Out[i++] = stride;

  D.GetDimensions(numStructs, stride);
  Out[i++] = numStructs;
  Out[i++] = stride;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [4, 1, 1]

Buffers:
  - Name: A
    Format: Int32
    Stride: 16
    Data: [ 0,1,2,3 ]

  - Name: B
    Format: Int32
    Stride: 8
    Data: [ 0,1,2,3,4,5,6,7 ]

  - Name: C
    Format: Int32
    Stride: 16
    Data: [ 0,1,2,3,4,5,6,7 ]

  - Name: D
    Format: Int32
    Stride: 8
    Data: [ 0,1,2,3 ]

  - Name: Out
    Format: Int32
    ZeroInitSize: 32

DescriptorSets:
  - Resources:
    - Name: A
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0

    - Name: B
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0

    - Name: C
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0

    - Name: D
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0

    - Name: Out
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 1
...
#--- end

# UNSUPPORTED: Clang
# UNSUPPORTED: Vulkan

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK:      - Name: Out
# CHECK-NEXT:   Format: Int32
# CHECK-NEXT:   Data: [ 1, 16, 4, 8, 2, 16, 2, 8 ]
