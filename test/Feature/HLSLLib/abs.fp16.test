#--- source.hlsl

StructuredBuffer<half4> In1 : register(t0);
RWStructuredBuffer<half4> Out1 : register(u1);

[numthreads(1,1,1)]
void main() {
  Out1[0] = abs(In1[0]);
  half4 Tmp = {abs(In1[1].xyz), abs(In1[1].w)};
  Out1[1] = Tmp;
  half4 Tmp2 = {abs(In1[2].xy), abs(In1[2].zw)};
  Out1[2] = Tmp2;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In1
    Format: Float16
    Stride: 8
    Data: [0x7e00, 0xfe00, 0x0000, 0x8000, 0xbd33, 0x7c00, 0xfc00, 0x0001, 0x8001, 0xb800, 0xaa66, 0xccc0]
    # nan, -nan, 0, -0, -1.3, inf, -inf, denorm, -denorm, -0.5, -0.05, -19
  - Name: Out1
    Format: Float16
    Stride: 8
    ZeroInitSize: 24
  - Name: ExpectedOut1 # The result we expect
    Format: Float16
    Stride: 8
    Data: [0x7e00, 0x7e00, 0x0000, 0x0000, 0x3d33, 0x7c00, 0x7c00, 0x0001, 0x0001, 0x3800, 0x2a66, 0x4cc0]
Results:
  - Result: Test1
    Rule: BufferFloatULP
    ULPT: 0
    Actual: Out1
    Expected: ExpectedOut1
DescriptorSets:
  - Resources:
    - Name: In1
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out1
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# REQUIRES: Half
# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
