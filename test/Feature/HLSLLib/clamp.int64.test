#--- source.hlsl
StructuredBuffer<int64_t4> In0 : register(t0);
StructuredBuffer<int64_t4> In1 : register(t1);
StructuredBuffer<int64_t4> In2 : register(t2);
StructuredBuffer<uint64_t4> In3 : register(t3);
StructuredBuffer<uint64_t4> In4 : register(t4);
StructuredBuffer<uint64_t4> In5 : register(t5);

RWStructuredBuffer<int64_t4> Out0 : register(u6);
RWStructuredBuffer<uint64_t4> Out1 : register(u7);


[numthreads(1,1,1)]
void main() {
  Out0[0] = clamp(In0[0], In1[0], In2[0]);
  Out0[1] = int64_t4(clamp(In0[1].xyz, In1[1].xyz, In2[1].xyz), clamp(In0[1].w, In1[1].w, In2[1].w));
  Out0[2] = int64_t4(clamp(In0[2].xy, In1[2].xy, In2[2].xy), clamp(In0[2].zw, In1[2].zw, In2[2].zw));
  Out0[3] = clamp(int64_t4(100, 90, 0, 8), int64_t4(-2147483648, 100, -10, 5), int64_t4(2147483647, 100, 10, 6));
  
  Out1[0] = clamp(In3[0], In4[0], In5[0]);
  Out1[1] = uint64_t4(clamp(In3[1].xyz, In4[1].xyz, In5[1].xyz), clamp(In3[1].w, In4[1].w, In5[1].w));
  Out1[2] = uint64_t4(clamp(In3[2].xy, In4[2].xy, In5[2].xy), clamp(In3[2].zw, In4[2].zw, In5[2].zw));
  Out1[3] = clamp(uint64_t4(0, 10, 5000, 4294967295), uint64_t4(0, 11, 100, 10), uint64_t4(2, 12, 4999, 4294967295));
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In0
    Format: Int64
    Stride: 32
    Data: [100, 90, 0, 8,100, 90, 0, 8,100, 90, 0, 8]
  - Name: In1
    Format: Int64
    Stride: 32
    Data: [-9223372036854775808, 100, -10, 5,-9223372036854775808, 100, -10, 5,-9223372036854775808, 100, -10, 5]
  - Name: In2
    Format: Int64
    Stride: 32
    Data: [9223372036854775807, 100, 10, 6,9223372036854775807, 100, 10, 6,9223372036854775807, 100, 10, 6]
  - Name: In3
    Format: UInt64
    Stride: 32
    Data: [0, 10, 5000, 4294967295,0, 10, 5000, 4294967295,0, 10, 5000, 4294967295]
  - Name: In4
    Format: UInt64
    Stride: 32
    Data: [0, 11, 100, 10,0, 11, 100, 10,0, 11, 100, 10]
  - Name: In5
    Format: UInt64
    Stride: 32
    Data: [2, 12, 4999, 4294967295,2, 12, 4999, 4294967295,2, 12, 4999, 4294967295]
  - Name: Out0
    Format: Int64
    Stride: 32
    ZeroInitSize: 128
  - Name: ExpectedOut0
    Format: Int64
    Stride: 32
    Data: [ 100, 100, 0, 6, 100, 100, 0, 6, 100, 100, 0, 6, 100,100, 0, 6 ]
  - Name: Out1
    Format: UInt64
    Stride: 32
    ZeroInitSize: 128
  - Name: ExpectedOut1
    Format: UInt64
    Stride: 32
    Data: [ 0, 11, 4999, 4294967295, 0, 11, 4999, 4294967295, 0,11, 4999, 4294967295, 0, 11, 4999, 4294967295 ]
Results:
  - Result: Test0
    Rule: BufferExact
    Actual: Out0
    Expected: ExpectedOut0
  - Result: Test1
    Rule: BufferExact
    Actual: Out1
    Expected: ExpectedOut1
DescriptorSets:
  - Resources:
    - Name: In0
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: In1
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: In2
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
    - Name: In3
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 3
        Space: 0
      VulkanBinding:
        Binding: 3
    - Name: In4
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 4
        Space: 0
      VulkanBinding:
        Binding: 4
    - Name: In5
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 5
        Space: 0
      VulkanBinding:
        Binding: 5
    - Name: Out0
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 6
        Space: 0
      VulkanBinding:
        Binding: 6
    - Name: Out1
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 7
        Space: 0
      VulkanBinding:
        Binding: 7
#--- end

# REQUIRES: Int64
# RUN: split-file %s %t
# RUN: %dxc_target -HV 202x -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
