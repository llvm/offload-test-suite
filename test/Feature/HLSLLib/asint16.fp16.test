#--- source.hlsl
StructuredBuffer<half4> In0 : register(t0);
RWStructuredBuffer<int16_t4> Out0 : register(u1);

[numthreads(1,1,1)]
void main() {

  Out0[0] = asint16(In0[0]);
  Out0[1] = int16_t4(asint16(In0[1].xyz), asint16(In0[1].w));
  Out0[2] = int16_t4(asint16(In0[2].xy), asint16(In0[2].zw));
  Out0[3] = asint16(half4(-5, 0, 10.111, 0.05));
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In0
    Format: Float16
    Stride: 8
    Data: [0xc500, 0, 0x490e, 0x2a66, 0xbc00, 0x5640, 0xc500, 0, 0x490e, 0x2a66, 0xbc00, 0x5640]
    # [-5, 0, 10.111, 0.05, -1, 100, -5, 0, 10.111, 0.05, -1, 100]
  - Name: Out0
    Format: Int16
    Stride: 8
    ZeroInitSize: 32
  - Name: ExpectedOut0
    Format: Int16
    Stride: 8
    Data: [ -15104, 0, 18702, 10854, -17408, 22080, -15104, 0, 18702, 10854, -17408, 22080, -15104, 0, 18702, 10854 ]
Results:
  - Result: Test0
    Rule: BufferExact
    Actual: Out0
    Expected: ExpectedOut0
DescriptorSets:
  - Resources:
    - Name: In0
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out0
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
#--- end

# REQUIRES: Int16
# REQUIRES: Half

# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
