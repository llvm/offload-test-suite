#--- source.hlsl

StructuredBuffer<half4> In : register(t0);

RWStructuredBuffer<half4> Out : register(u1);

[numthreads(1,1,1)]
void main() {
  Out[0] = log(In[0]);
  half4 Tmp = {log(In[1].xyz), log(In[1].w)};
  Out[1] = Tmp;
  half4 Tmp2 = {log(In[2].xy), log(In[2].zw)};
  Out[2] = Tmp2;
  Out[3] = log(half4(5, 10, 4.5, 0.25));
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Float16
    Stride: 8
    Data: [ 0x4500, 0x4900, 0x4480, 0x3400, 0x4100, 0x4d20, 0x5240, 0x3c00, 0x4170, 0x4764, 0x5640, 0x7e00,]
    # 5, 10, 4.5, 0x3400, 2.5, 20.5, 50, 1, 2.718281828, 7.389056, 100,
  - Name: Out
    Format: Float16
    Stride: 8
    ZeroInitSize: 32
  - Name: ExpectedOut # The result we expect
    Format: Float16
    Stride: 8
    Data: [ 0x3E6F, 0x409B, 0x3E05, 0xBD8B, 0x3B54, 0x420A, 0x43D2, 0x0, 0x3C00, 0x4000, 0x449B, 0x7FFF, 0x3E70, 0x409B, 0x3E04, 0xBD8C ]
    # 1.6083984, 2.3027344, 1.5048828, -1.3857422, 0.9160156, 3.0195313, 3.9101563, 0, 1.0, 2, 4.6054688, nan, 1.609375, 2.3027344, 1.5039063, -1.3867188
Results:
  - Result: Test1
    Rule: BufferFloatULP
    ULPT: 2
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: In
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# REQUIRES: Half
# RUN: split-file %s %t
# RUN: %dxc_target -Gis -HV 202x -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
