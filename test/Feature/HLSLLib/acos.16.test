#--- source.hlsl

StructuredBuffer<half4> In : register(t0);

RWStructuredBuffer<half4> Out : register(u0);

[numthreads(1,1,1)]
void main() {
  Out[0] = acos(In[0]);
  half4 Tmp = {acos(In[1].xyz), acos(In[1].w)};
  Out[1] = Tmp;
  half4 Tmp2 = {acos(In[2].xy), acos(In[2].zw)};
  Out[2] = Tmp2;
  Out[3] = acos(In[3]);
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Float16
    Stride: 8
    Data: [0x7e00, 0xfc00, 0x7c00, 0x8001, 0x0001, 0x8000, 0x0000, 0x3c00, 0xbc00, 0x3e00, 0xbe00, 0x3509, 0xb509, 0x3bff, 0xbbff, 0x3800]
    #[nan, -inf, inf, -denorm, denorm, -0, 0, 1, -1, 1.5, -1.5, 0.3145926, -0.3145926, 0.9995117, -0.9995117, .5]
  - Name: Out
    Format: Float16
    Stride: 8
    ZeroInitSize: 32
  - Name: ExpectedOut # The result we expect
    Format: Float16
    Stride: 8
    Data: [0x7FFF, 0x7FFF, 0x7FFF, 0x3e48, 0x3e48, 0x3e48, 0x3e48, 0x0000, 0x4248, 0x7FFF, 0x7FFF, 0x3d01, 0x3F90, 0x2800, 0x4238, 0x3c30]
    #[nan, nan, nan, 1.570796, 1.570796, 1.570796, 1.570796, 0, 3.1415926, nan, nan, 1.2509766, 1.8909, 0.03125, 3.11034, 1.04720]
Results:
  - Result: Test1
    Rule: BufferFuzzy
    ULPT: 1
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: In
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
...
#--- end

# REQUIRES: Half

# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
