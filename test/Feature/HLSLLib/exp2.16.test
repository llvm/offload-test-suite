#--- source.hlsl

StructuredBuffer<half4> In : register(t0);

RWStructuredBuffer<half4> Out : register(u1);

[numthreads(1,1,1)]
void main() {
  Out[0] = exp2(In[0]);
  half4 Tmp = {exp2(In[1].xyz), exp2(In[1].w)};
  Out[1] = Tmp;
  half4 Tmp2 = {exp2(In[2].xy), exp2(In[2].zw)};
  Out[2] = Tmp2;
}


//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Float16
    Stride: 8
    Data: [ 0x7e00, 0xfc00, 0x8001, 0x8000, 0x0000, 0x0001, 0x7c00, 0x3c00, 0xbc00, 0x4000, 0x4200, 0x3800,]
    #  NaN, -Inf, -denorm, -0, 0, denorm, Inf, 1, -1, 2, 3, 1/2,
  - Name: Out
    Format: Float16
    Stride: 8
    ZeroInitSize: 24
  - Name: ExpectedOut # The result we expect
    Format: Float16
    Stride: 8
    Data: [ 0x7e00, 0, 0x3c00, 0x3c00, 0x3c00, 0x3c00, 0x7c00, 0x4000, 0x3800, 0x4400, 0x4800, 0x3da8,]
    #  NaN, 0, 1, 1, 1, 1, inf, 2, 0.5, 4, 8, 1.4140625,
Results:
  - Result: Test1
    Rule: BufferFloatULP
    ULPT: 2
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: In
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# REQUIRES: Half
# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
