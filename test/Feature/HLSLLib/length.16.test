#--- source.hlsl
StructuredBuffer<half4> In : register(t0);

RWStructuredBuffer<half> Out : register(u1);


[numthreads(1,1,1)]
void main() {
  Out[0] = length(In[0]);
  Out[1] = length(In[1].x);
  Out[2] = length(In[1].yzw);
  Out[3] = length(In[2].xy);
  Out[4] = length(In[2].zw);
  Out[5] = length(half4(4, 4, 4, 4));
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Float16
    Stride: 8
    Data: [ 0x4400, 0x4400, 0x4400, 0x4400, 0x4248, 0x0000, 0x4500, 0x4a00, 0x0000, 0x4500, 0x4000, 0x4200 ]
    # 4, 4, 4, 4, 3.14159, 0, 5, 12, 0, 5, 2, 3
  - Name: Out
    Format: Float16
    Stride: 2
    ZeroInitSize: 12
  - Name: ExpectedOut
    Format: Float16
    Stride: 2
    Data: [ 0x4800, 0x4248, 0x4a80, 0x4500, 0x4336, 0x4800 ]
    # 8, 3.14159, 13, 5, 3.60555, 8
Results:
  - Result: Test0
    Rule: BufferFloatULP
    ULPT: 1
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: In
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
#--- end

# REQUIRES: Half
# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -HV 202x -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
