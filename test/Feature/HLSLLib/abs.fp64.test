#--- source.hlsl

StructuredBuffer<double4> In1 : register(t0);
RWStructuredBuffer<double4> Out1 : register(u1);

[numthreads(1,1,1)]
void main() {
  Out1[0] = abs(In1[0]);
  double4 Tmp = {abs(In1[1].xyz), abs(In1[1].w)};
  Out1[1] = Tmp;
  double4 Tmp2 = {abs(In1[2].xy), abs(In1[2].zw)};
  Out1[2] = Tmp2;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In1
    Format: Float64
    Stride: 32
    Data: [nan, -nan, 0, -0, -1.3, inf, -inf, 0x0.fffffffffffffp-1022, -0x0.fffffffffffffp-1022, -0.5, -0.05, -19]
  - Name: Out1
    Format: Float64
    Stride: 32
    ZeroInitSize: 96
  - Name: ExpectedOut1 # The result we expect
    Format: Float64
    Stride: 32
    Data: [nan, nan, 0, 0, 1.3, inf, inf, 0x0.fffffffffffffp-1022, 0x0.fffffffffffffp-1022, 0.5, 0.05, 19]
Results:
  - Result: Test1
    Rule: BufferFloatULP
    ULPT: 0
    Actual: Out1
    Expected: ExpectedOut1
DescriptorSets:
  - Resources:
    - Name: In1
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out1
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# REQUIRES: Double
# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
