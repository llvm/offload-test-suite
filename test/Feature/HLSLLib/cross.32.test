#--- source.hlsl
StructuredBuffer<float4> X : register(t0);
StructuredBuffer<float4> Y : register(t1);

RWStructuredBuffer<float4> Out : register(u2);


[numthreads(1,1,1)]
void main() {
  // Only accepts vectors of length 3
  Out[0] = float4(cross(X[0].xyz, Y[0].xyz), 0);
  Out[1] = float4(cross(X[1].xyz, Y[1].xyz), 0);
  Out[2] = float4(cross(X[2].xyz, Y[2].xyz), 0);
  Out[3] = float4(cross(float3(1, 0, 0), float3(0, 1, 0)), 0);
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: X
    Format: Float32
    Stride: 16
    Data: [ 1, 0, 0, 0, 2, 3, 4, 0, -1.25, -2.5, -3, 0 ] # Every 4th value is filler
  - Name: Y
    Format: Float32
    Stride: 16
    Data: [ 0, 1, 0, 0, 4, 6, 8, 0, 4.25, 5, 6.75, 0 ] # Every 4th value is filler
  - Name: Out
    Format: Float32
    Stride: 16
    ZeroInitSize: 64
  - Name: ExpectedOut
    Format: Float32
    Stride: 16
    Data: [ 0, 0, 1, 0, 0, 0, 0, 0, -1.875, -4.3125, 4.375, 0, 0, 0, 1, 0 ] # Every 4th value is filler
Results:
  - Result: Test0
    Rule: BufferFloatEpsilon
    Epsilon: 0.0008
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: X
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Y
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -HV 202x -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
