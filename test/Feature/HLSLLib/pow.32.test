#--- source.hlsl
StructuredBuffer<float4> X : register(t0);
StructuredBuffer<float4> Y : register(t1);

RWStructuredBuffer<float4> Out : register(u2);


[numthreads(1,1,1)]
void main() {
  Out[0] = pow(X[0], Y[0]);
  Out[1] = float4(pow(X[1].xyz, Y[1].xyz), pow(X[1].w, Y[1].w));
  Out[2] = float4(pow(X[2].xy, Y[2].xy), pow(X[2].zw, Y[2].zw));
  Out[3] = pow(float4(2, 4, 1.5, 8), float4(3, 0.5, 2, 0.33333333));
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: X
    Format: Float32
    Stride: 16
    Data: [ 2, 4, 1.5, 8, 5, 7, 3, 0, 0, 4, 2.718, 10 ]
  - Name: Y
    Format: Float32
    Stride: 16
    Data: [ 3, 0.5, 2, 0.33333333, 0, 1, 5, -1, 6, -1, 2, -5 ]
  - Name: Out
    Format: Float32
    Stride: 16
    ZeroInitSize: 64
  - Name: ExpectedOut
    Format: Float32
    Stride: 16
    Data: [ 8, 2, 2.25, 2, 1, 7, 243, inf, 0, 0.25, 7.387524, 0.00001, 8, 2, 2.25, 2 ]
Results:
  - Result: Test
    Rule: BufferFloatEpsilon
    Epsilon: 0.0008
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: X
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Y
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
#--- end

# https://github.com/microsoft/DirectXShaderCompiler/issues/7702
# XFAIL: DXC-Vulkan

# RUN: split-file %s %t
# RUN: %dxc_target -Gis -HV 202x -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
