#--- source.hlsl
StructuredBuffer<float4> Y : register(t0);
StructuredBuffer<float4> X : register(t1);

RWStructuredBuffer<float4> Out : register(u2);


[numthreads(1,1,1)]
void main() {
  Out[0] = step(Y[0], X[0]);
  Out[1] = float4(step(Y[1].xyz, X[1].xyz), step(Y[1].w, X[1].w));
  Out[2] = float4(step(Y[2].xy, X[2].xy), step(Y[2].zw, X[2].zw));
  Out[3] = step(float4(0.0, 1.0, 2.0, -2.0), float4(0.0, 1.0, 1.999, -1.999));
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: Y
    Format: Float32
    Stride: 16
    Data: [ 0.0, 1.0, 2.0, -2.0, 3.3, 9.2, 12344, -174.12, -4.3, 3.14159, 0.000001, 3e+38  ]
  - Name: X
    Format: Float32
    Stride: 16
    Data: [ 0.0, 1.0, 1.999, -1.999, 7.3, 2.8, 12345, -517.23, 4.3, 2.71828, 0.000002, 3e+38 ]
  - Name: Out
    Format: Float32
    Stride: 16
    ZeroInitSize: 64
  - Name: ExpectedOut
    Format: Float32
    Stride: 16
    Data: [ 1, 1, 0, 1, 1, 0, 1, 0, 1, 0, 1, 1, 1, 1, 0, 1 ]
Results:
  - Result: Test
    Rule: BufferExact
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: Y
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: X
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
#--- end


# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
