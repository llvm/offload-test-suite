#--- source.hlsl

// This test tests all the following scenarios for select:
//   - Scalar condition, scalar true/false values
//   - Vector condition, vector true/false values
//   - Vector condition, scalar true value, vector false value
//   - Vector condition, vector true value, scalar false value
//   - Vector condition, scalar true/false values
// For each vector condition scenario, there are tests for vec4, vec3, and vec2.
// For the scalar condition scenario, there are four tests. One uses the buffers 
// for inputs and the other three use constants.

StructuredBuffer<bool> Cond : register(t0);
StructuredBuffer<int64_t4> TrueVal0 : register(t1);
StructuredBuffer<int64_t4> FalseVal0 : register(t2);
StructuredBuffer<uint64_t4> TrueVal1 : register(t3);
StructuredBuffer<uint64_t4> FalseVal1 : register(t4);

RWStructuredBuffer<int64_t4> Out0 : register(u5);
RWStructuredBuffer<uint64_t4> Out1 : register(u6);


[numthreads(1,1,1)]
void main() {
  bool4 Cond0 = bool4(Cond[0], Cond[1], Cond[2], Cond[3]);
  bool3 Cond1 = bool3(Cond[4], Cond[5], Cond[6]);
  bool2 Cond2 = bool2(Cond[8], Cond[9]);
  bool2 Cond3 = bool2(Cond[10], Cond[11]);

  // int64_t
  // vec4
  Out0[0] = select(Cond0, TrueVal0[0], FalseVal0[0]);
  Out0[1] = select(Cond0, TrueVal0[0].x, FalseVal0[0]);
  Out0[2] = select(Cond0, TrueVal0[0], FalseVal0[0].x);
  Out0[3] = select(Cond0, TrueVal0[0].x, FalseVal0[0].x);
  // vec3 + scalar
  Out0[4] = int64_t4(select(Cond1, TrueVal0[1].xyz, FalseVal0[1].xyz), select(Cond[7], TrueVal0[1].w, FalseVal0[1].w));
  Out0[5] = int64_t4(select(Cond1, TrueVal0[1].x, FalseVal0[1].xyz), select(bool(1), int64_t(1), int64_t(-1)));
  Out0[6] = int64_t4(select(Cond1, TrueVal0[1].xyz, FalseVal0[1].x), select(bool(0), int64_t(2), int64_t(-2)));
  Out0[7] = int64_t4(select(Cond1, TrueVal0[1].x, FalseVal0[1].x), select(bool(1), int64_t(3), int64_t(-3)));
  // vec2
  Out0[8] = int64_t4(select(Cond2, TrueVal0[2].xy, FalseVal0[2].xy), select(Cond3, TrueVal0[2].z, FalseVal0[2].zw));
  Out0[9] = int64_t4(select(Cond2, TrueVal0[2].xy, FalseVal0[2].x), select(Cond3, TrueVal0[2].z, FalseVal0[2].z));

  // uint64_t
  // vec4
  Out1[0] = select(Cond0, TrueVal1[0], FalseVal1[0]);
  Out1[1] = select(Cond0, TrueVal1[0].x, FalseVal1[0]);
  Out1[2] = select(Cond0, TrueVal1[0], FalseVal1[0].x);
  Out1[3] = select(Cond0, TrueVal1[0].x, FalseVal1[0].x);
  // vec3 + scalar
  Out1[4] = uint64_t4(select(Cond1, TrueVal1[1].xyz, FalseVal1[1].xyz), select(Cond[7], TrueVal1[1].w, FalseVal1[1].w));
  Out1[5] = uint64_t4(select(Cond1, TrueVal1[1].x, FalseVal1[1].xyz), select(bool(1), uint64_t(1), uint64_t(10)));
  Out1[6] = uint64_t4(select(Cond1, TrueVal1[1].xyz, FalseVal1[1].x), select(bool(0), uint64_t(2), uint64_t(20)));
  Out1[7] = uint64_t4(select(Cond1, TrueVal1[1].x, FalseVal1[1].x), select(bool(1), uint64_t(3), uint64_t(30)));
  // vec2
  Out1[8] = uint64_t4(select(Cond2, TrueVal1[2].xy, FalseVal1[2].xy), select(Cond3, TrueVal1[2].z, FalseVal1[2].zw));
  Out1[9] = uint64_t4(select(Cond2, TrueVal1[2].xy, FalseVal1[2].x), select(Cond3, TrueVal1[2].z, FalseVal1[2].z));
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: Cond
    Format: Bool
    Stride: 4
    Data: [ 1, 0, 1, 0, 1, 1, 0, 0, 1, 0, 0, 1 ]
  - Name: TrueVal0
    Format: Int64
    Stride: 32
    Data: [ 1, 2, 3, 4, 4, -5, 6, 9, -10, -20, 15, -25 ]
  - Name: FalseVal0
    Format: Int64
    Stride: 32
    Data: [ -1, -2, -3, -4, 7, 8, -9, 1, 100, 200, -15, 25 ]
  - Name: TrueVal1
    Format: UInt64
    Stride: 32
    Data: [ 1, 2, 3, 4, 4, 5, 6, 9, 10, 20, 15, 250 ]
  - Name: FalseVal1
    Format: UInt64
    Stride: 32
    Data: [ 10, 20, 30, 40, 7, 8, 9, 1, 100, 200, 150, 25 ]
  - Name: Out0
    Format: Int64
    Stride: 32
    FillSize: 320
  - Name: ExpectedOut0
    Format: Int64
    Stride: 32
    Data: [
      1, -2, 3, -4, 1, -2, 1, -4, 1, -1, 3, -1, 1, -1, 1, -1,
      4, -5, -9, 1, 4, 4, -9, 1, 4, -5, 7, -2, 4, 4, 7, 3,
      -10, 200, -15, 15, -10, 100, -15, 15
    ]
  - Name: Out1
    Format: UInt64
    Stride: 32
    FillSize: 320
  - Name: ExpectedOut1
    Format: UInt64
    Stride: 32
    Data: [
      1, 20, 3, 40, 1, 20, 1, 40, 1, 10, 3, 10, 1, 10, 1, 10,
      4, 5, 9, 1, 4, 4, 9, 1, 4, 5, 7, 20, 4, 4, 7, 3,
      10, 200, 150, 15, 10, 100, 150, 15
    ]
Results:
  - Result: Test0
    Rule: BufferExact
    Actual: Out0
    Expected: ExpectedOut0
  - Result: Test1
    Rule: BufferExact
    Actual: Out1
    Expected: ExpectedOut1
DescriptorSets:
  - Resources:
    - Name: Cond
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: TrueVal0
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: FalseVal0
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
    - Name: TrueVal1
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 3
        Space: 0
      VulkanBinding:
        Binding: 3
    - Name: FalseVal1
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 4
        Space: 0
      VulkanBinding:
        Binding: 4
    - Name: Out0
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 5
        Space: 0
      VulkanBinding:
        Binding: 5
    - Name: Out1
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 6
        Space: 0
      VulkanBinding:
        Binding: 6
#--- end

# REQUIRES: Int64
# RUN: split-file %s %t
# RUN: %dxc_target -HV 202x -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
