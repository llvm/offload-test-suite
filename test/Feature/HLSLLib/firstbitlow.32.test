#--- source.hlsl

StructuredBuffer<uint4> In1 : register(t0);
StructuredBuffer<int4> In2 : register(t1);
RWStructuredBuffer<uint4> Out : register(u2);

[numthreads(1,1,1)]
void main() {
  Out[0] = firstbitlow(In1[0]);
  uint4 Out1 = {firstbitlow(In1[0].xyz), firstbitlow(In1[0].w)};
  uint4 Out2 = {firstbitlow(In2[0].xy), firstbitlow(In2[0].zw)};
  Out[1] = Out1;
  Out[2] = Out2;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In1
    Format: Hex32
    Stride: 16
    Data: [
      0x00000000,
      0x000000E8,
      0x80000000,
      0xFFFFFFFF,
    ]
  - Name: In2
    Format: Int32
    Stride: 16
    Data: [-1, -8, 8, 0]
  - Name: Out
    Format: UInt32
    Stride: 16
    ZeroInitSize: 48
  - Name: ExpectedOut # The result we expect
    Format: UInt32
    Stride: 16
    # All bits set (4294967295) is returned when no bit is set on the input
    Data: [4294967295, 3, 31, 0, 4294967295, 3, 31, 0, 0, 3, 3, 4294967295]
Results:
  - Result: Test1
    Rule: BufferExact
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: In1
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: In2
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
