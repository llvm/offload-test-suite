#--- source.hlsl

StructuredBuffer<double4> In1 : register(t0);
StructuredBuffer<double> In2 : register(t1);
RWStructuredBuffer<int4> Out1 : register(u2);
RWStructuredBuffer<uint> Out2 : register(u3);

[numthreads(1,1,1)]
void main() {
  Out1[0] = sign(In1[0]);
  int4 Tmp = {sign(In1[1].xyz), sign(In1[1].w)};
  Out1[1] = Tmp;
  Out1[2].xy = sign(In1[2].xy);

  int X = sign(In2[0]); // testing nan
  Out2[0] = (X == 1 || X == 0 || X == -1);
  X = sign(In2[1]); // testing -nan
  Out2[1] = (X == 1 || X == 0 || X == -1);
  X = sign(In2[2]); // testing denorm
  Out2[2] = (X == 1 || X == 0);
  X = sign(In2[3]); // testing -denorm
  Out2[3] = (X == 0 || X == -1);
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In1
    Format: Float64
    Stride: 32
    Data: [0, -0, -1.3, inf, -inf, -0.5, -0.05, 19]
  - Name: In2
    Format: Float64
    Stride: 8
    Data: [nan, -nan, 0x0.fffffffffffffp-1022, -0x0.fffffffffffffp-1022]
  - Name: Out1
    Format: Int32
    Stride: 16
    ZeroInitSize: 48
  - Name: ExpectedOut1 # The result we expect
    Format: Int32
    Stride: 16
    Data: [0, 0, -1, 1, -1, -1, -1, 1, 0, 0, 0, 0]
  - Name: Out2
    Format: UInt32
    Stride: 4
    ZeroInitSize: 16
  - Name: ExpectedOut2
    Format: UInt32
    Stride: 4
    Data: [1, 1, 1, 1]
Results:
  - Result: Test1
    Rule: BufferExact
    Actual: Out1
    Expected: ExpectedOut1
DescriptorSets:
  - Resources:
    - Name: In1
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: In2
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: Out1
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 2
        Space: 0
      VulkanBinding:
        Binding: 2
    - Name: Out2
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 3
        Space: 0
      VulkanBinding:
        Binding: 3
...
#--- end

# REQUIRES: Double
# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
