#--- source.hlsl
StructuredBuffer<float4> In : register(t0);

RWStructuredBuffer<float4> Out : register(u1);


[numthreads(1,1,1)]
void main() {
  Out[0] = normalize(In[0]);
  Out[1] = float4(normalize(In[1].xyz), normalize(In[1].w));
  Out[2] = float4(normalize(In[2].xy), normalize(In[2].zw));
  Out[3] = normalize(float4(1, 2, -3, 4));
}
//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: In
    Format: Float32
    Stride: 16
    Data: [ 1, 2, -3, 4, 0, 4.7, -8.5, 10.2, 5, 12, 3, -4 ]
  - Name: Out
    Format: Float32
    Stride: 16
    ZeroInitSize: 64
  - Name: ExpectedOut
    Format: Float32
    Stride: 16
    Data: [ 0.18257, 0.36515, -0.54772, 0.73030, 0, 0.48389, -0.87513, 1, 0.38462, 0.92308, 0.6, -0.8, 0.18257, 0.36515, -0.54772, 0.73030 ]
Results:
  - Result: Test0
    Rule: BufferFloatEpsilon
    Epsilon: 0.008
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: In
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -HV 202x -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
