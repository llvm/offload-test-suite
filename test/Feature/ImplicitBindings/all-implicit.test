#--- source.hlsl

RWBuffer<int> A; // dx: u0, vk: 0
StructuredBuffer<int> B; // dx: t0, vk: 1

cbuffer CB { // dx: b0, vk: 2
  int a;
}

RWStructuredBuffer<int> C; // dx: u1, vk: 3

[numthreads(4,2,1)]
void main(uint GI : SV_GroupIndex) {
  C[GI].x = 2 * A[GI] + B[GI].x + a;
}

//--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [4, 1, 1]
Buffers:
  - Name: BufA
    Format: Int32
    Data: [ 1, 2, 3, 4, 5, 6, 7, 8]
  - Name: BufB
    Format: Int32
    Stride: 4
    Data: [ 2, 4, 6, 8, 10, 12, 14, 16]
  - Name: BufC
    Format: Int32
    Stride: 4
    ZeroInitSize: 32
  - Name: CB
    Format: Int32
    Data: [ 100 ]
DescriptorSets:
  - Resources:
    - Name: BufA
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: BufB
      Kind: StructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 1
    - Name: CB
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 2
    - Name: BufC
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 3
...
#--- end

# Clang's Vulkan implicit binding is not yet implemented.
# UNSUPPORTED: Clang-Vulkan

# CBuffer bindings seem to be broken under metal
# https://github.com/llvm/offload-test-suite/issues/55
# UNSUPPORTED: Metal

# RUN: split-file %s %t
# RUN: %if !Vulkan %{ %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl %}
# RUN: %if Vulkan %{ %dxc_target -T cs_6_0 -fspv-target-env=vulkan1.3 -fvk-use-scalar-layout -Fo %t.o %t/source.hlsl %}
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: Name: BufC
# CHECK-NEXT: Format: Int32
# CHECK-NEXT: Stride: 4
# CHECK-NEXT: Data: [ 104, 108, 112, 116, 120, 124, 128, 132 ]
