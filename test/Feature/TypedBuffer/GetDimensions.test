#--- source.hlsl

// This test checks that we will get the expected values from invoking
// `GetDimension`s on typed buffers RWBuffer and Buffer.

Buffer<int4> A : register(t0);
RWBuffer<float> B : register(u0);

RWBuffer<uint> Out : register(u0, space1);

[numthreads(4,1,1)]
void main() {
  uint dim;

  A.GetDimensions(dim);
  Out[0] = dim;

  B.GetDimensions(dim);
  Out[1] = dim;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [4, 1, 1]

Buffers:
  - Name: A
    Format: Int32
    Data: [ 0, 1, 2, 3, 4, 5, 6, 7 ]

  - Name: B
    Format: Float32
    Data: [ 0.1, 1.1, 2.2, 3.3, 4.4 ]

  - Name: Out
    Format: Int32
    ZeroInitSize: 8

  - Name: ExpectedOut
    Format: Int32
    Data: [ 8, 5 ]

Results:
  - Result: Out
    Rule: BufferExact
    Actual: Out
    Expected: ExpectedOut

DescriptorSets:
  - Resources:
    - Name: A
      Kind: Buffer
      DirectXBinding:
        Register: 0
        Space: 0

    - Name: B
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 0

    - Name: Out
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 1
...
#--- end

# UNSUPPORTED: Clang
# UNSUPPORTED: Vulkan

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
