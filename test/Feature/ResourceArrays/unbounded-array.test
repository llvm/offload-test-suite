#--- source.hlsl

// This test verified handling of unbounded resource array.

[[vk::binding(0)]]
RWBuffer<int> Buf[] : register(u0);

[numthreads(4,2,1)]
void main(uint GI : SV_GroupIndex) {
  for (int i = 0; i < 4; i++) {
    Buf[GI][i] = GI * 100 + Buf[GI][i];
  }
}

//--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: Buf
    Format: Int32
    ArraySize: 8
    Data:
      - [ 0, 1, 2, 3 ]
      - [ 1, 2, 3, 4 ]
      - [ 2, 3, 4, 5 ]
      - [ 3, 4, 5, 6 ]
      - [ 4, 5, 6, 7 ]
      - [ 5, 6, 7, 8 ]
      - [ 6, 7, 8, 9 ]
      - [ 7, 8, 9, 10 ]

  - Name: ExpectedBuf
    Format: Int32
    ArraySize: 8
    Data:
      - [ 0, 1, 2, 3 ]
      - [ 101, 102, 103, 104 ]
      - [ 202, 203, 204, 205 ]
      - [ 303, 304, 305, 306 ]
      - [ 404, 405, 406, 407 ]
      - [ 505, 506, 507, 508 ]
      - [ 606, 607, 608, 609 ]
      - [ 707, 708, 709, 710 ]

Results:
  - Result: Buf
    Rule: BufferExact
    Actual: Buf
    Expected: ExpectedBuf

DescriptorSets:
  - Resources:
    - Name: Buf
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
...
#--- end

# UNSUPPORTED: Clang

# Resource arrays are not yet supported on Metal
# UNSUPPORTED: Metal

# RUN: split-file %s %t
# RUN: %if !Vulkan %{ %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl %}
# RUN: %if Vulkan %{ %dxc_target -T cs_6_0 -fspv-target-env=vulkan1.3 -Fo %t.o %t/source.hlsl %}
# RUN: %offloader %t/pipeline.yaml %t.o
