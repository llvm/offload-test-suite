#--- source.hlsl

// This test verified handling of subsets of multi-dimensional resource
// arrays used in a function argument.

RWStructuredBuffer<float> In[4][2] : register(u0);
RWStructuredBuffer<float> Out : register(u0, space1);

float foo(RWStructuredBuffer<float> A[2], uint Index) {
  return A[0][NonUniformResourceIndex(Index)] + A[1][NonUniformResourceIndex(Index)];
}

[numthreads(4,1,1)]
void main(uint GI : SV_GroupIndex) {
  Out[GI] = foo(In[NonUniformResourceIndex(GI)], GI);
}

//--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: BufIn
    Format: Float32
    ArraySize: 8
    Data:
      - [ 1.0, 2.0, 3.0, 4.0 ]
      - [ 0.1, 0.2, 0.3, 0.4 ]
      - [ 5.0, 6.0, 7.0, 8.0 ]
      - [ 0.5, 0.6, 0.7, 0.8 ]
      - [ 10.0, 11.0, 12.0, 13.0 ]
      - [ 0.10, 0.11, 0.12, 0.13 ]
      - [ 14.0, 15.0, 16.0, 17.0 ]
      - [ 0.14, 0.15, 0.16, 0.17 ]

  - Name: BufOut
    Format: Float32
    ZeroInitSize: 16

  - Name: ExpectedOut
    Format: Float32
    Data: [ 1.1, 6.6, 12.12, 17.17 ]

Results:
  - Result: BufOut
    Rule: BufferFloatULP
    ULPT: 1     # Float addition should be within 1 ULP on all hardware.
    Actual: BufOut
    Expected: ExpectedOut

DescriptorSets:
  - Resources:
    - Name: BufIn
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: BufOut
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 1
...
#--- end

# This test requires NonUniformResourceIndex.
# Tracked by https://github.com/llvm/llvm-project/issues/156713
# XFAIL: Clang

# Vulkan does not support multi-dimensional resource arrays
# UNSUPPORTED: Vulkan

# Resource arrays are not yet supported on Metal
# UNSUPPORTED: Metal

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
