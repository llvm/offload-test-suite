#--- source.hlsl

// This test verified handling of global multi-dimensional resource arrays.

RWBuffer<int> In[2][3] : register(u0);
RWBuffer<int> Out[2][3] : register(u6);

[numthreads(4,1,1)]
void main(uint GI : SV_GroupIndex) {
  for (int i = 0; i < 2; i++) {
    for (int j = 0; j < 3; j++) {
      Out[i][j][GI] = In[i][j][GI] * 2;
    }
  }
}

//--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: BufIn
    Format: Int32
    ArraySize: 6
    Data:
      - [ 0, 1, 2, 3 ]
      - [ 1, 2, 3, 4 ]
      - [ 2, 3, 4, 5 ]
      - [ 3, 4, 5, 6 ]
      - [ 4, 5, 6, 7 ]
      - [ 5, 6, 7, 8 ]

  - Name: BufOut
    Format: Int32
    ArraySize: 6
    ZeroInitSize: 16

  - Name: ExpectedBufOut
    Format: Int32
    ArraySize: 6
    Data:
      - [ 0, 2, 4, 6 ]
      - [ 2, 4, 6, 8 ]
      - [ 4, 6, 8, 10 ]
      - [ 6, 8, 10, 12 ]
      - [ 8, 10, 12, 14 ]
      - [ 10, 12, 14, 16 ]

Results:
  - Result: BufOut
    Rule: BufferExact
    Actual: BufOut
    Expected: ExpectedBufOut

DescriptorSets:
  - Resources:
    - Name: BufIn
      Kind: RWBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: BufOut
      Kind: RWBuffer
      DirectXBinding:
        Register: 6
        Space: 0
...
#--- end

# Resource arrays are not yet supported on Metal
# UNSUPPORTED: Metal

# Vulkan does not support multi-dimensional resource arrays
# UNSUPPORTED: Vulkan

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
