#--- source.hlsl

// This test verifies handling of resource arrays when the
// resource type has a counter.

RWStructuredBuffer<int> Out[4] : register(u0);

[numthreads(4,1,1)]
void main(uint GI : SV_GroupIndex) {
  for (int i = 0; i < GI; i++)
    Out[i].IncrementCounter();
  switch(GI) {
    case 0:
      Out[0][0] = Out[0].IncrementCounter();
      break;
    case 1:
      Out[1][0] = Out[1].IncrementCounter();
      break;
    case 2:
      Out[2][0] = Out[2].IncrementCounter();
      break;
    case 3:
      Out[3][0] = Out[3].IncrementCounter();
      break;
  }
}

//--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: Out
    Format: Hex32
    Stride: 4
    ArraySize: 4
    ZeroInitSize: 4

DescriptorSets:
  - Resources:
    - Name: Out
      Kind: RWStructuredBuffer
      HasCounter: true
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
        CounterBinding: 1
...
#--- end

# Unimplemented https://github.com/llvm/llvm-project/issues/137032
# XFAIL: Clang && Vulkan

# Offload tests are missing support for counters and resource arrays on Metal
# Unimplemented https://github.com/llvm/offload-test-suite/issues/304
# Unimplemented https://github.com/llvm/offload-test-suite/issues/305
# XFAIL: Metal

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_0 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s %if DirectX %{ --check-prefixes=CHECK,DX-CHECK %}

# DX-CHECK: Creating UAV: { Size = 4100, Register = u0, Space = 0, HasCounter = 1 }
# DX-CHECK: UAV: HeapIdx = 0 EltSize = 4 NumElts = 1 HasCounter = 1

# CHECK: Name: Out
# CHECK: Counters: [ 4, 3, 2, 1 ]
# CHECK: Data:
      - [ 0x3 ]
      - [ 0x2 ]
      - [ 0x1 ]
      - [ 0x0 ]
