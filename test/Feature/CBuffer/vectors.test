#--- source.hlsl

cbuffer CBVectors : register(b0) {
  float3 b1;
  int4 b2;
  uint2 b3;
  bool4 b4;
}

struct Vectors {
  float3 b1;
  int4 b2;
  uint2 b3;
  bool4 b4;
};

RWStructuredBuffer<Vectors> Out : register(u1);

[numthreads(1,1,1)]
void main() {
  Out[0].b1 = b1;
  Out[0].b2 = b2;
  Out[0].b3 = b3;
  Out[0].b4 = b4;
}


//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: CBVectors
    Format: Hex32
    Data: [
      0x3f800000, 0x40000000, 0x40400000, 0x5A5A5A5A,
      0x00000001, 0x00000002, 0x00000003, 0x00000004,
      0x00000001, 0x00000002, 0x5A5A5A5A, 0x5A5A5A5A,
      0x00000001, 0x00000000, 0x00000001, 0x00000000
    ]
  - Name: Out
    Format: Hex32
    Stride: 52
    ZeroInitSize: 52
DescriptorSets:
  - Resources:
    - Name: CBVectors
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
...
#--- end

# DXC's vulkan support does not layout cbuffers compatibly with DXIL
# UNSUPPORTED: Vulkan

# Clang trips on 3-element vectors in structs:
# https://github.com/llvm/llvm-project/issues/123968
# XFAIL: Clang

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: - Name: CBVectors
# CHECK:   Format: Hex32

# CHECK: - Name: Out
# CHECK:   Format: Hex32
# CHECK:   Data: [

# CHECK:     0x3F800000,
# CHECK:     0x40000000,
# CHECK:     0x40400000,
# CHECK-NOT: 0x5A5A5A5A,

# CHECK:     0x1,
# CHECK:     0x2,
# CHECK:     0x3,
# CHECK:     0x4,

# CHECK:     0x1,
# CHECK:     0x2,
# CHECK-NOT: 0x5A5A5A5A,

# CHECK:     0x1,
# CHECK:     0x0,
# CHECK:     0x1,
# CHECK:     0x0

# CHECK:   ]
