#--- source.hlsl

cbuffer CBScalars : register(b0) {
  float a1;
  int a2;
  bool a3;
}

struct Scalars {
  float a1;
  int a2;
  bool a3;
};

RWStructuredBuffer<Scalars> Out : register(u0);

[numthreads(1,1,1)]
void main() {
  Out[0].a1 = a1;
  Out[0].a2 = a2;
  Out[0].a3 = a3;
}


//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: CBScalars
    Format: Hex32
    Data: [ 0xbf800000, 0x0000002a, 0x00000001 ]
  - Name: Out
    Format: Hex32
    Stride: 12
    ZeroInitSize: 12
DescriptorSets:
  - Resources:
    - Name: CBScalars
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
...
#--- end

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: - Name: CBScalars
# CHECK:   Format: Hex32

# CHECK: - Name: Out
# CHECK:   Format: Hex32
# CHECK:   Data: [ 0xBF800000, 0x2A, 0x1 ]
