#--- source.hlsl

cbuffer CBVectors {
  double3 b1;
  uint64_t3 b2;
  int64_t3 b3;
}

struct Vectors {
  double3 b1;
  uint64_t3 b2;
  int64_t3 b3;
};

RWStructuredBuffer<Vectors> Out : register(u1);

[numthreads(1,1,1)]
void main() {
  Out[0].b1 = b1;
  Out[0].b2 = b2;
  Out[0].b3 = b3;
}


//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: CBVectors
    Format: Hex64
    Data: [
      0x3ff0000000000000, 0x4000000000000000,
      0x4008000000000000, 0x5A5A5A5A5A5A5A5A,
      0x0000000000000001, 0x0000000000001111,
      0x0000000000002222, 0x5A5A5A5A5A5A5A5A,
      0x000000000000000A, 0x000000000000000B,
      0x000000000000000C, 0x5A5A5A5A5A5A5A5A,
    ]
  - Name: Out
    Format: Hex64
    Stride: 72
    ZeroInitSize: 72
DescriptorSets:
  - Resources:
    - Name: CBVectors
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
...
#--- end

# REQUIRES: Double, Int64
# DXC's vulkan support does not layout cbuffers compatibly with DXIL
# UNSUPPORTED: Vulkan

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: - Name: CBVectors
# CHECK:   Format: Hex64

# CHECK: - Name: Out
# CHECK:   Format: Hex64
# CHECK:   Data: [

# CHECK:     0x3FF0000000000000,
# CHECK:     0x4000000000000000,
# CHECK:     0x4008000000000000,
# CHECK-NOT: 0x5A5A5A5A5A5A5A5A,

# CHECK:     0x1,
# CHECK:     0x1111,
# CHECK:     0x2222,
# CHECK-NOT: 0x5A5A5A5A5A5A5A5A,

# CHECK:     0xA,
# CHECK:     0xB,
# CHECK:     0xC
# CHECK-NOT: 0x5A5A5A5A5A5A5A5A

# CHECK:   ]
