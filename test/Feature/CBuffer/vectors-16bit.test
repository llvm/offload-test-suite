#--- source.hlsl

cbuffer CBVectors : register(b0) {
  float16_t2 b1;
  uint16_t3 b2;
}

struct Vectors {
  float16_t2 b1;
  uint16_t3 b2;
};

RWStructuredBuffer<Vectors> Out : register(u1);

[numthreads(1,1,1)]
void main() {
  Out[0].b1 = b1;
  Out[0].b2 = b2;
}


//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: CBVectors
    Format: Hex16
    Data: [
      0x3c00, 0x3555,
      0x0001, 0xffff, 0x1234
    ]
  - Name: Out
    Format: Hex16
    # Warp doesn't seem to be able to handle a stride of 10 so we use 12 here
    Stride: 12
    ZeroInitSize: 12
DescriptorSets:
  - Resources:
    - Name: CBVectors
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# REQUIRES: Half, Int16

# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: - Name: CBVectors
# CHECK:   Format: Hex16

# CHECK: - Name: Out
# CHECK:   Format: Hex16
# CHECK:   Data: [

# CHECK: 0x3C00,
# CHECK: 0x3555,

# CHECK: 0x1,
# CHECK: 0xFFFF,
# CHECK: 0x1234

# CHECK:   ]
