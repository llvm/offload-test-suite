#--- source.hlsl

cbuffer CBScalars : register(b0) {
  float16_t a1;
  uint16_t a2;
  int16_t a3;
}

struct Scalars {
  float16_t a1;
  uint16_t a2;
  int16_t a3;
};

RWStructuredBuffer<Scalars> Out : register(u0);

[numthreads(1,1,1)]
void main() {
  Out[0].a1 = a1;
  Out[0].a2 = a2;
  Out[0].a3 = a3;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: CBScalars
    Format: Hex16
    Data: [ 0x3c00, 0x0001, 0xffff ]
  - Name: Out
    Format: Hex16
    # Warp doesn't seem to be able to handle a stride of 6 so we use 8 here...
    Stride: 8
    ZeroInitSize: 8
DescriptorSets:
  - Resources:
    - Name: CBScalars
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
...
#--- end

# REQUIRES: Half, Int16

# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: - Name: CBScalars
# CHECK:   Format: Hex16

# CHECK: - Name: Out
# CHECK:   Format: Hex16
# CHECK:   Data: [ 0x3C00, 0x1, 0xFFFF, 0x0 ]
