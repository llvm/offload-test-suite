#--- source.hlsl
// Regression test for https://github.com/llvm/llvm-project/issues/156084
RWStructuredBuffer<uint> output : register(u1);
cbuffer Constants : register(b0) {
    uint4 s[3];
};

[numthreads(1,1,1)]
void main() {
    output[0] = s[1][3];
    output[1] = s[2].z;
}

//--- pipeline.yaml
---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: Constants
    Format: UInt32
    Data: [
      1, 2, 3, 4,
      5, 6, 7, 8,
      9, 10, 11, 12,
    ]
  - Name: Out
    Format: UInt32
    ZeroInitSize: 8
  - Name: ExpectedOut
    Format: UInt32
    Data: [ 8, 11 ]
Results:
  - Result: Test1
    Rule: BufferExact
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: Constants
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
...
#--- end

# DXC's vulkan support does not layout cbuffers compatibly with DXIL
# UNSUPPORTED: Vulkan

# Bug https://github.com/llvm/llvm-project/issues/156084
# XFAIL: Clang

# RUN: split-file %s %t
# RUN: %dxc_target -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
