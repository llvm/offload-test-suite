#--- source.hlsl

cbuffer CBArrays : register(b0) {
  uint16_t c1[2][2];
  float16_t c2[1];
}

struct Arrays {
  uint16_t c1[2][2];
  float16_t c2[1];
};

RWStructuredBuffer<Arrays> Out : register(u0);

[numthreads(1,1,1)]
void main() {
  Out[0].c1 = c1;
  Out[0].c2 = c2;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: CBArrays
    Format: Hex16
    Data: [
      0x0001, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0xffff, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0x1234, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0x0002, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0x3c00, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A
    ]
  - Name: Out
    Format: Hex16
    # Warp doesn't seem to be able to handle a stride of 10 so we use 12 here
    Stride: 12
    ZeroInitSize: 12
DescriptorSets:
  - Resources:
    - Name: CBArrays
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 0
        Space: 0
...
#--- end

# REQUIRES: Half, Int16
# DXC's vulkan support does not layout cbuffers compatibly with DXIL
# UNSUPPORTED: Vulkan

# RUN: split-file %s %t
# RUN: %dxc_target -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o | FileCheck %s

# CHECK: - Name: CBArrays
# CHECK:   Format: Hex16

# CHECK: - Name: Out
# CHECK:   Format: Hex16
# CHECK:   Data: [

# CHECK:     0x1,
# CHECK-NOT: 0x5A5A,
# CHECK:     0xFFFF,
# CHECK-NOT: 0x5A5A,
# CHECK:     0x1234,
# CHECK-NOT: 0x5A5A,
# CHECK:     0x2,
# CHECK-NOT: 0x5A5A,

# CHECK:     0x3C00,
# CHECK-NOT: 0x5A5A

# CHECK:   ]
