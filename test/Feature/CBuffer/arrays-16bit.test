#--- source.hlsl

cbuffer CBArrays : register(b0) {
  uint16_t c1[2][2];
  float16_t c2[1];
  uint16_t4 c3[2];
}

struct Arrays {
  uint16_t c1[2][2];
  float16_t c2[1];
  uint16_t4 c3[2];
};

RWStructuredBuffer<Arrays> Out : register(u1);

[numthreads(1,1,1)]
void main() {
  Out[0].c1 = c1;
  Out[0].c2 = c2;
  Out[0].c3 = c3;
}

//--- pipeline.yaml

---
Shaders:
  - Stage: Compute
    Entry: main
    DispatchSize: [1, 1, 1]
Buffers:
  - Name: CBArrays
    Format: Hex16
    Data: [
      0x0001, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0xffff, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0x1234, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0x0002, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0x3c00, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0x0001, 0x0002, 0x0003, 0x0004, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
      0x0005, 0x0006, 0x0007, 0x0008, 0x5A5A, 0x5A5A, 0x5A5A, 0x5A5A,
    ]
  - Name: Out
    Format: Hex16
    # Warp doesn't seem to like buffers with non-multiple of 4 strides, so we
    # add a small amount of buffer at the end here.
    Stride: 28
    ZeroInitSize: 28
  - Name: ExpectedOut
    Format: Hex16
    Stride: 26
    Data: [
      0x0001,
      0xffff,
      0x1234,
      0x0002,
      0x3c00,
      0x0001, 0x0002, 0x0003, 0x0004,
      0x0005, 0x0006, 0x0007, 0x0008,
      0x0,
    ]
Results:
  - Result: Test1
    Rule: BufferExact
    Actual: Out
    Expected: ExpectedOut
DescriptorSets:
  - Resources:
    - Name: CBArrays
      Kind: ConstantBuffer
      DirectXBinding:
        Register: 0
        Space: 0
      VulkanBinding:
        Binding: 0
    - Name: Out
      Kind: RWStructuredBuffer
      DirectXBinding:
        Register: 1
        Space: 0
      VulkanBinding:
        Binding: 1
...
#--- end

# REQUIRES: Half, Int16

# Bug https://github.com/llvm/llvm-project/issues/138996
# XFAIL: Clang

# RUN: split-file %s %t
# RUN: %dxc_target -fvk-use-dx-layout -enable-16bit-types -T cs_6_5 -Fo %t.o %t/source.hlsl
# RUN: %offloader %t/pipeline.yaml %t.o
