#--- vertex.hlsl
struct PSInput
{
    float4 position : SV_POSITION;
    float4 color : COLOR;
};

PSInput main(float4 position : POSITION, float4 color : COLOR)
{
    PSInput result;

    result.position = position;
    result.color = color;

    return result;
}


#--- pixel.hlsl
struct PSInput
{
    float4 position : SV_POSITION;
    float4 color : COLOR;
};

float4 main(PSInput input) : SV_TARGET
{
    return input.color;
}
#--- pipeline.yaml
---
Shaders:
  - Stage: Vertex
    Entry: main
  - Stage: Pixel
    Entry: main
Buffers:
  - Name: VertexData
    Format: Float32
    Stride: 28 # 32 bytes per vertex
    Data: [ 0.0, 0.25, 0.0, 1.0, 0.0, 0.0, 1.0,
            0.25, -0.25, 0.0, 0.0, 1.0, 0.0, 1.0,
           -0.25, -0.25, 0.0, 0.0, 0.0, 1.0, 1.0 ]
  - Name: Output
    Format: Float32
    Channels: 4
    FillSize: 1048576 # 256x256 @ 16 bytes per pixel
    OutputProps:
      Height: 256
      Width: 256
      Depth: 16
Bindings:
  VertexBuffer: VertexData
  VertexAttributes:
    - Format: Float32
      Channels: 3
      Offset: 0
      Name: POSITION
    - Format: Float32
      Channels: 4
      Offset: 12
      Name: COLOR
  RenderTarget: Output
DescriptorSets: []
...
#--- rules.yaml
---
- Type: PixelPercent
  Val: 0.2 # No more than 0.2% of pixels may be visibly different.
...
#--- end

# UNSUPPORTED: Clang
# REQUIRES: goldenimage

# RUN: split-file %s %t
# RUN: %dxc_target -T vs_6_0 -Fo %t-vertex.o %t/vertex.hlsl
# RUN: %dxc_target -T ps_6_0 -Fo %t-pixel.o %t/pixel.hlsl
# RUN: %offloader %t/pipeline.yaml %t-vertex.o %t-pixel.o -r Output -o %t/Output.png
# RUN: imgdiff %t/Output.png %goldenimage_dir/hlsl/Graphics/SimpleTriangle.png -rules %t/rules.yaml
